[{"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts":"1","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx":"2","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx":"3","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\constant.ts":"4","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\pass.ts":"5","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx":"6","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\main\\App.tsx":"7","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\internationalization\\i18n.ts":"8","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\Scene.tsx":"9","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\hooks\\useMousePosition.tsx":"10","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Effects.tsx":"11","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\SceneController.tsx":"12","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\contact\\Contact.tsx":"13","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\projects\\Projects.tsx":"14","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\education\\Education.tsx":"15","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\navigation\\Navbar.tsx":"16","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Home.tsx":"17","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Loader.tsx":"18","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\functions.ts":"19","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\projects\\Project.tsx":"20","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Globe.tsx":"21","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Texts.tsx":"22","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Photo.tsx":"23","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Objects.tsx":"24","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\DialogBox.tsx":"25","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Model.tsx":"26"},{"size":440,"mtime":1645890515845,"results":"27","hashOfConfig":"28"},{"size":1117,"mtime":1638974546313,"results":"29","hashOfConfig":"28"},{"size":899,"mtime":1638974597996,"results":"30","hashOfConfig":"28"},{"size":148,"mtime":1636310089838,"results":"31","hashOfConfig":"28"},{"size":2127,"mtime":1641761608550,"results":"32","hashOfConfig":"28"},{"size":694,"mtime":1638044082858,"results":"33","hashOfConfig":"28"},{"size":2567,"mtime":1641846816628,"results":"34","hashOfConfig":"28"},{"size":837,"mtime":1626182987337,"results":"35","hashOfConfig":"28"},{"size":3255,"mtime":1645570585899,"results":"36","hashOfConfig":"28"},{"size":759,"mtime":1635254042829,"results":"37","hashOfConfig":"28"},{"size":2695,"mtime":1636311033858,"results":"38","hashOfConfig":"28"},{"size":1501,"mtime":1636576676145,"results":"39","hashOfConfig":"28"},{"size":6800,"mtime":1639245566355,"results":"40","hashOfConfig":"28"},{"size":3704,"mtime":1641755704152,"results":"41","hashOfConfig":"28"},{"size":3232,"mtime":1641756953306,"results":"42","hashOfConfig":"28"},{"size":4905,"mtime":1638974092545,"results":"43","hashOfConfig":"28"},{"size":741,"mtime":1645481175075,"results":"44","hashOfConfig":"28"},{"size":571,"mtime":1639246111674,"results":"45","hashOfConfig":"28"},{"size":344,"mtime":1645739801378,"results":"46","hashOfConfig":"28"},{"size":10678,"mtime":1641823337364,"results":"47","hashOfConfig":"28"},{"size":2496,"mtime":1638971921459,"results":"48","hashOfConfig":"28"},{"size":1823,"mtime":1645481375442,"results":"49","hashOfConfig":"28"},{"size":4529,"mtime":1645741546277,"results":"50","hashOfConfig":"28"},{"size":1807,"mtime":1641510876722,"results":"51","hashOfConfig":"28"},{"size":2263,"mtime":1628173771825,"results":"52","hashOfConfig":"28"},{"size":1652,"mtime":1638973932845,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wz9zun",{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\constant.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\pass.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\main\\App.tsx",["111"],"import React, { useEffect, useState } from 'react';\r\nimport '../styles/app.css';\r\nimport { AppContext } from '../context';\r\nimport Scene from '../scene/Scene';\r\nimport { Stats, useContextBridge } from '@react-three/drei';\r\nimport Effects from '../components/Effects';\r\nimport { ACESFilmicToneMapping, WebGLRenderer, PerspectiveCamera, sRGBEncoding } from 'three';\r\nimport { Canvas } from '@react-three/fiber';\r\n\r\nconst App = (): JSX.Element => {\r\n  const ContextBridge = useContextBridge(AppContext);\r\n  const [canvas, setCanvas] = useState<any>(null);\r\n  const [camera, setCamera] = useState<PerspectiveCamera>(null);\r\n  const [gl, setGL] = useState<WebGLRenderer>(null);\r\n\r\n  const adjustCanvasSize = () => {\r\n    // look up the size the canvas is being displayed\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    if (width === 0) return;\r\n\r\n    if (width < 768)\r\n      // swap width and height on mobile\r\n      [width, height] = [height, width];\r\n\r\n    // adjust displayBuffer size to match\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n      const ratio = window.devicePixelRatio;\r\n      // you must pass false here or three.js sadly fights the browser\r\n      gl.setSize(width, height, false);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      canvas.width = width * ratio;\r\n      canvas.height = height * ratio;\r\n      canvas.style.width = `${width}px`;\r\n      canvas.style.height = `${height}px`;\r\n      // update any render target sizes here\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!camera || !gl) return;\r\n\r\n    adjustCanvasSize();\r\n    window.addEventListener('resize', adjustCanvasSize, false);\r\n  }, [canvas?.clientWidth, camera, gl])\r\n\r\n  return (\r\n    <>\r\n      <Canvas\r\n        gl={{\r\n          antialias: true,\r\n          physicallyCorrectLights: true,\r\n          outputEncoding: sRGBEncoding\r\n        }}\r\n        dpr={window.devicePixelRatio}\r\n        camera={{ far: 20 }}\r\n        linear\r\n        style={{\r\n          display: 'block',\r\n          width: '100vw',\r\n          height: '100vh'\r\n        }}\r\n        onCreated={({ camera, gl, raycaster }) => {\r\n          raycaster.layers.enableAll();\r\n          gl.toneMapping = ACESFilmicToneMapping;\r\n          setGL(gl);\r\n          setCanvas(gl.domElement);\r\n          setCamera(camera as PerspectiveCamera);\r\n        }}\r\n      >\r\n        <ContextBridge>\r\n          <Scene />\r\n        </ContextBridge>\r\n        <Effects />\r\n      </Canvas>\r\n      <Stats showPanel={0} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\internationalization\\i18n.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\Scene.tsx",["112"],"import React, { useEffect } from 'react';\r\nimport Home from '../home/Home';\r\nimport Education from '../education/Education';\r\nimport Projects from '../projects/Projects';\r\nimport Contact from '../contact/Contact';\r\nimport SceneController from './SceneController';\r\nimport { useRef } from 'react';\r\nimport { useThree } from '@react-three/fiber';\r\nimport Navbar from '../navigation/Navbar';\r\nimport { Environment, OrbitControls, Preload } from '@react-three/drei';\r\nimport { Suspense } from 'react';\r\nimport Loader from '../components/Loader';\r\nimport gsap from 'gsap';\r\n\r\nconst navbar_items: Array<NavbarItem> = [\r\n    { id: 0, name: 'education' },\r\n    { id: 1, name: 'projects' },\r\n    { id: 2, name: 'contact' },\r\n]\r\n\r\nexport interface NavbarItem {\r\n    id: number,\r\n    name: string,\r\n}\r\n\r\nconst Scene = (): JSX.Element => {\r\n    const keyLight = useRef(null);\r\n    const fillLight = useRef(null);\r\n    const frontLight = useRef(null);\r\n    const { camera } = useThree();\r\n    const timeline = gsap.timeline({ repeat: -1, yoyo: true });\r\n\r\n    useEffect(() => {\r\n        if (!keyLight.current || !fillLight.current || !frontLight.current) return;\r\n\r\n        const k = keyLight.current;\r\n        const fi = fillLight.current;\r\n        const fr = frontLight.current;\r\n\r\n        k.position.set(camera.position.x + 5, 1, camera.position.z);\r\n        fi.position.set(camera.position.x - 5, 0.5, camera.position.z);\r\n        fr.position.set(camera.position.x - 5, -0.5, camera.position.z);\r\n\r\n        k.target.position.set(camera.position.x, 0, camera.position.z - 5);\r\n        fi.target.position.set(camera.position.x, 0, camera.position.z - 5);\r\n        fr.target.position.set(camera.position.x, 0, camera.position.z - 5);\r\n\r\n        k.target.updateMatrixWorld();\r\n        fi.target.updateMatrixWorld();\r\n        fr.target.updateMatrixWorld();\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!fillLight.current) return;\r\n\r\n        timeline.to(\r\n            fillLight.current.position,\r\n            { x: camera.position.x + 5, duration: 5 },\r\n        )\r\n        timeline.to(\r\n            fillLight.current.position,\r\n            { x: camera.position.x - 5, duration: 5 },\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Suspense fallback={<Loader />}>\r\n                <Environment\r\n                    background={false}\r\n                    files={['square.png', 'square.png', 'square.png', 'square.png', 'square.png', 'square.png']}\r\n                    path='/images/textures/'\r\n                />\r\n                <Navbar items={navbar_items} />\r\n                <Home />\r\n                <Education />\r\n                <Projects />\r\n                <Contact />\r\n                <directionalLight\r\n                    ref={keyLight}\r\n                    args={['#fff', 1]}\r\n                />\r\n                <directionalLight\r\n                    ref={fillLight}\r\n                    args={['#d4af37', 1]}\r\n                />\r\n                <directionalLight\r\n                    ref={frontLight}\r\n                    args={['#fff', 1]}\r\n                />\r\n                <SceneController />\r\n                <Preload all />\r\n            </Suspense>\r\n            {/* <OrbitControls/> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Scene;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\hooks\\useMousePosition.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Effects.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\SceneController.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\contact\\Contact.tsx",["113"],"import React, { useContext, useEffect, useLayoutEffect, useRef, useState } from 'react';\r\nimport '../styles/contact.css';\r\nimport { Html, RoundedBox } from '@react-three/drei';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AppContext } from '../context';\r\nimport emailjs, { init } from 'emailjs-com';\r\nimport DialogBox from '../components/DialogBox';\r\nimport gsap from 'gsap';\r\n\r\nconst ContactForm = (): JSX.Element => {\r\n    const form = useRef(null);\r\n    const { t } = useTranslation();\r\n    const { state } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n    const [msgStatus, setMsgStatus] = useState<string>('unsent');\r\n    const timeline = gsap.timeline();\r\n\r\n    useEffect(() => init(process.env.REACT_APP_USER_ID), [])\r\n\r\n    useEffect(() => {\r\n        currentItem === 'contact.end' ? setFocus(true) : setFocus(false);\r\n    }, [currentItem])\r\n\r\n    useLayoutEffect(() => {\r\n        if (!form.current) return;\r\n\r\n        focus ?\r\n            [...form.current.children].forEach((c: HTMLDivElement) => timeline.to(c, { x: 0, opacity: 1, duration: 0.3 })) :\r\n            [...form.current.children].forEach((c: HTMLDivElement) => timeline.to(c, { x: -50, opacity: 0, duration: 0.3 }))\r\n    }, [focus])\r\n\r\n    return (\r\n        <group position={[15, 0, 0]}>\r\n            <RoundedBox\r\n                args={[5, 6, 0.2]}\r\n                radius={0.1}\r\n            >\r\n                <meshPhongMaterial attach='material' color='#000' />\r\n            </RoundedBox>\r\n            <Html\r\n                center\r\n                zIndexRange={[0, 0]}\r\n            >\r\n                {msgStatus === 'processing' ?\r\n                    <img\r\n                        src='/images/sending.gif'\r\n                        alt='sending'\r\n                        style={{\r\n                            width: '40vw',\r\n                            maxWidth: '40vw',\r\n                            height: '40vh'\r\n                        }}\r\n                    />\r\n                    :\r\n                    <Formik\r\n                        initialValues={{ firstname: '', lastname: '', email: '', phone: '', message: '' }}\r\n                        validate={values => {\r\n                            let errors = {};\r\n                            if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) errors = { ...errors, email: t('contact.6') };\r\n                            if (!values.firstname) errors = { ...errors, firstname: t('contact.7') };\r\n                            if (!values.lastname) errors = { ...errors, lastname: t('contact.7') };\r\n                            if (!values.email) errors = { ...errors, email: t('contact.7') };\r\n                            return errors;\r\n                        }}\r\n                        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                            setMsgStatus('processing');\r\n                            setTimeout(() => {\r\n                                emailjs.send(process.env.REACT_APP_SERVICE_ID, process.env.REACT_APP_TEMPLATE_ID, values)\r\n                                    .then((result) => {\r\n                                        setMsgStatus('sent');\r\n                                    },\r\n                                        (error) => {\r\n                                            setMsgStatus('error');\r\n                                            console.log(error.toString());\r\n                                        });\r\n                                setSubmitting(false);\r\n                                resetForm();\r\n                            }, 400);\r\n                        }}\r\n                    >\r\n                        {({ isSubmitting }) => (\r\n                            <Form\r\n                                ref={form}\r\n                                className='contact-form'\r\n                            >\r\n                                <div className='firstname'>\r\n                                    <Icon>person</Icon>\r\n                                    <Field type='text' name='firstname' placeholder={t('contact.0')} />\r\n                                    <ErrorMessage className='error' name='firstname' component='span' />\r\n                                </div>\r\n                                <div className='surname'>\r\n                                    <Icon>person</Icon>\r\n                                    <Field type='text' name='lastname' placeholder={t('contact.1')} />\r\n                                    <ErrorMessage className='error' name='lastname' component='span' />\r\n                                </div>\r\n                                <div className='email'>\r\n                                    <Icon>email</Icon>\r\n                                    <Field type='email' name='email' placeholder={t('contact.2')} />\r\n                                    <ErrorMessage className='error' name='email' component='span' />\r\n                                </div>\r\n                                <div className='phone'>\r\n                                    <Icon>phone</Icon>\r\n                                    <Field type='tel' name='phone' placeholder={t('contact.3')} />\r\n                                </div>\r\n                                <div className='message'>\r\n                                    <Icon>message</Icon>\r\n                                    <Field type='text' name='message' placeholder={t('contact.4')} as='textarea' />\r\n                                </div>\r\n                                <div className='break' />\r\n                                <button type='submit' disabled={isSubmitting}>{t('contact.5')}</button>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                }\r\n                {\r\n                    msgStatus === 'sent' &&\r\n                    <DialogBox\r\n                        title={t('emailDialog.0')}\r\n                        content={t('emailDialog.1')}\r\n                        agreeTxt={t('emailDialog.2')}\r\n                        onAgreed={() => setMsgStatus('unsent')}\r\n                    />\r\n                }\r\n                {\r\n                    msgStatus === 'error' &&\r\n                    <DialogBox\r\n                        title={t('emailDialog.3')}\r\n                        content={t('emailDialog.4')}\r\n                        agreeTxt={t('emailDialog.2')}\r\n                        onAgreed={() => setMsgStatus('unsent')}\r\n                    />\r\n                }\r\n            </Html>\r\n        </group>\r\n    )\r\n}\r\n\r\nconst Contact = (): JSX.Element => {\r\n    return <ContactForm />\r\n}\r\n\r\nexport default Contact;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\projects\\Projects.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\education\\Education.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\navigation\\Navbar.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Home.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Loader.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\functions.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\projects\\Project.tsx",["114","115","116","117"],"import React, { useContext, useRef, useState, useEffect, useMemo, Fragment } from 'react';\r\nimport '../styles/project.css';\r\nimport { AppContext } from '../context';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { RoundedBox, Text, Html } from '@react-three/drei';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Mesh, PlaneGeometry, ShaderMaterial, Vector2, VideoTexture } from 'three';\r\nimport videoVertexShader from '../shaders/videoVertex.glsl';\r\nimport videoFragmentShader from '../shaders/videoFragment.glsl';\r\nimport { ProjectItem } from './Projects';\r\nimport { ThreeEvent } from '@react-three/fiber';\r\nimport { animate } from '../components/functions';\r\nimport gsap from 'gsap';\r\n\r\nconst Project = ({ id, name, logos, medium, github, preview, x, y, active, focus, onClick }: ProjectItem): JSX.Element => {\r\n    const { state } = useContext(AppContext);\r\n    const { fullScreen } = state.scene;\r\n    const { t } = useTranslation();\r\n    const [hovered, setHovered] = useState<boolean>(false);\r\n    const project = useRef(null);\r\n    const projectDescription = useRef(null);\r\n    const exit = useRef(null);\r\n    const timeline = gsap.timeline();\r\n    const [enteredPreviewMode, setEnteredPreviewMode] = useState<boolean>(false);\r\n    const [visible, setVisible] = useState<boolean>(false);\r\n\r\n    const [vidPlayer] = useState(() => {\r\n        const vid = document.createElement('video');\r\n        vid.crossOrigin = 'Anonymous';\r\n        vid.loop = true;\r\n        vid.controls = true;\r\n        return vid;\r\n    });\r\n\r\n    const [vidObject] = useMemo(() => {\r\n        const geometry = medium === 'desktop' ? new PlaneGeometry(1.8, 0.8) : new PlaneGeometry(0.8, 1.8);\r\n\r\n        const uniforms = {\r\n            u_tex: { value: new VideoTexture(vidPlayer) },\r\n            u_adjust_uv: { value: new Vector2(1, 1) }\r\n        }\r\n\r\n        const material = new ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: videoVertexShader,\r\n            fragmentShader: videoFragmentShader,\r\n        });\r\n\r\n        const video = new Mesh(geometry, material);\r\n\r\n        return [video];\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (active || !fullScreen) document.body.style.cursor = hovered ? 'pointer' : 'auto';\r\n\r\n        if (fullScreen) return;\r\n\r\n        if (!project.current) return;\r\n\r\n        hovered ?\r\n            animate(project.current.scale, { x: 1.1, y: 1.1 }, 1, 'expo.out') :\r\n            animate(project.current.scale, { x: 1, y: 1 }, 1, 'expo.out');\r\n    }, [hovered])\r\n\r\n    useEffect(() => {\r\n        if (active) {\r\n            if (!vidPlayer) return;\r\n\r\n            if (vidPlayer.readyState < 3) {\r\n                vidPlayer.src = `videos/${name}.mp4`;\r\n                vidPlayer.load();\r\n                vidPlayer.onerror = () => console.log(`${name} error ${vidPlayer.error.code}; details: ${vidPlayer.error.message}`);\r\n            }\r\n\r\n            vidPlayer.play();\r\n\r\n            if (medium === 'desktop') {\r\n                timeline.to(project.current.position, { x: 16, y: 0, z: -17.5 });\r\n                timeline.to(project.current.scale, { x: 2, y: 2, z: 2, duration: 1 });\r\n            } else {\r\n                timeline.to(project.current.position, { x: 16.5, y: 0, z: -17.5 });\r\n                timeline.to(project.current.scale, { x: 1.6, y: 1.6, z: 1.6, duration: 1 });\r\n            }\r\n\r\n            timeline.to(project.current.rotation, {\r\n                y: -0.2, duration: 1,\r\n            });\r\n\r\n            animate(projectDescription.current.children[0].material, { opacity: 0.5 }, 3);\r\n\r\n            setVisible(true);\r\n        }\r\n\r\n        if (!active) {\r\n            if (vidPlayer) vidPlayer.pause();\r\n\r\n            timeline.to(project.current.position, { x: x, y: y, z: -18 })\r\n            timeline.to(project.current.rotation, { y: 0, duration: 1 });\r\n            timeline.to(project.current.scale, { x: 1, y: 1, z: 1, duration: 1 });\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0, duration: 3 });\r\n\r\n            setVisible(false);\r\n        }\r\n    }, [active])\r\n\r\n    useEffect(() => {\r\n        if (!project.current) return;\r\n\r\n        if (focus) {\r\n            animate(project.current.position, { x: x, y: y - 0.1, z: -18 }, 3, 'expo.out');\r\n            animate(project.current.children[1].material, { opacity: 1 }, 3, 'expo.out', () => project.current.children[0].visible = true);\r\n        } else {\r\n            animate(project.current.position, { x: rand(x - 2, x + 2), y: rand(y - 2, y + 2), z: -18 }, 3, 'expo.out');\r\n            animate(project.current.children[1].material, { opacity: 0 }, 3, 'expo.out', () => project.current.children[0].visible = false);\r\n        }\r\n    }, [focus])\r\n\r\n    const rand = (a: number, b: number) => a + (b - a) * Math.random();\r\n\r\n    const preventAnimation = () => {\r\n        if (timeline.isActive()) timeline.clear();\r\n    }\r\n\r\n    const onSelected = (e: ThreeEvent<MouseEvent>) => {\r\n        e.stopPropagation();\r\n\r\n        if (!fullScreen) {\r\n            preventAnimation();\r\n            setHovered(false);\r\n            onClick(id);\r\n        }\r\n    }\r\n\r\n    const onExit = () => {\r\n        preventAnimation();\r\n        setHovered(false);\r\n        onClick(null);\r\n    }\r\n\r\n    const onEnterPreviewMode = (e: ThreeEvent<MouseEvent>) => {\r\n        if (!active) return;\r\n        e.stopPropagation();\r\n        preventAnimation();\r\n\r\n        if (medium === 'desktop')\r\n            timeline.to(project.current.position, { x: 15, y: 0, z: -16.5 });\r\n        else\r\n            timeline.to(project.current.position, { x: 15, y: 0, z: -17.1 });\r\n\r\n        timeline.to(project.current.rotation, {\r\n            y: 0,\r\n            duration: 1,\r\n            onComplete: () => setEnteredPreviewMode(true)\r\n        });\r\n\r\n        animate(projectDescription.current.children[0].material, { opacity: 0 }, 3);\r\n\r\n        setVisible(false);\r\n    }\r\n\r\n    const onExitPreviewMode = (e: ThreeEvent<MouseEvent>) => {\r\n        if (!active) return;\r\n\r\n        e.stopPropagation();\r\n        preventAnimation();\r\n\r\n        setEnteredPreviewMode(false);\r\n\r\n        if (medium === 'desktop')\r\n            timeline.to(project.current.position, { x: 16, y: 0, z: -17.5 });\r\n        else\r\n            timeline.to(project.current.position, { x: 16.5, y: 0, z: -17.5 });\r\n\r\n        timeline.to(project.current.rotation, { y: -0.2, duration: 1 });\r\n        animate(projectDescription.current.children[0].material, { opacity: 0.5 }, 3);\r\n\r\n        setVisible(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <group\r\n                ref={project}\r\n                onClick={fullScreen ? (e) => onEnterPreviewMode(e) : (e) => onSelected(e)}\r\n                onPointerMissed={fullScreen ? (e) => onExitPreviewMode(e) : null}\r\n                onPointerOver={enteredPreviewMode ? () => setHovered(false) : () => setHovered(true)}\r\n                onPointerOut={enteredPreviewMode ? () => setHovered(true) : () => setHovered(false)}\r\n            >\r\n                <primitive\r\n                    visible={false}\r\n                    object={vidObject}\r\n                    position-z={0.08}\r\n                />\r\n                <RoundedBox args={medium === 'desktop' ? [2, 1, 0.1] : [1, 2, 0.1]}>\r\n                    <meshPhongMaterial\r\n                        attach='material'\r\n                        color='#000'\r\n                        opacity={0}\r\n                        transparent={true}\r\n                    />\r\n                </RoundedBox>\r\n            </group>\r\n            <group\r\n                ref={projectDescription}\r\n                position={[14.3, 0, -16]}\r\n                visible={visible}\r\n            >\r\n                <mesh>\r\n                    <planeBufferGeometry args={[1.5, 1.5]} />\r\n                    <meshStandardMaterial\r\n                        color='#000'\r\n                        transparent\r\n                    />\r\n                </mesh>\r\n                <group>\r\n                    <Text\r\n                        color='#d4af37'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.08}\r\n                        maxWidth={1.5}\r\n                        textAlign='center'\r\n                        anchorY={-0.7}\r\n                        layers={1}\r\n                    >\r\n                        {t(`projectTitles.${id}`)}\r\n                    </Text>\r\n                    <Text\r\n                        color='#fff'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.06}\r\n                        maxWidth={1}\r\n                        textAlign='center'\r\n                        anchorY={-0.5}\r\n                        lineHeight={2}\r\n                        layers={1}\r\n                    >\r\n                        {t(`projectDesc.${id}`)}\r\n                    </Text>\r\n                    <Html\r\n                        center\r\n                        position-y={-0.3}\r\n                        style={\r\n                            {\r\n                                visibility: visible ? 'visible' : 'hidden',\r\n                            }\r\n                        }\r\n                    >\r\n                        <section className='links'>\r\n                            <p>GitHub: <a href={github}>{github}</a></p>\r\n                            <p>Live: <a href={preview}>{preview}</a></p>\r\n                        </section>\r\n\r\n                    </Html>\r\n                </group>\r\n                {logos.map((logo: string, index: number) => {\r\n                    const texture = new TextureLoader().load(`images/logos/${logo}.png`);\r\n\r\n                    return (\r\n                        <Fragment key={index}>\r\n                            <mesh\r\n                                position-x={0.5 * (index % 3) - 0.5}\r\n                                position-y={index < 3 ? -0.5 : -0.7}\r\n                            >\r\n                                <planeBufferGeometry args={[0.25, 0.1]} />\r\n                                <meshStandardMaterial map={texture} transparent />\r\n                            </mesh>\r\n                        </Fragment>\r\n                    )\r\n                })}\r\n            </group>\r\n            {\r\n                fullScreen &&\r\n                <Text\r\n                    ref={exit}\r\n                    position={[16.8, -1, -16.5]}\r\n                    color='#d4af37'\r\n                    font='fonts/Oswald.ttf'\r\n                    fontSize={0.2}\r\n                    onClick={() => onExit()}\r\n                    layers={1}\r\n                >\r\n                    {t('exit')}\r\n                </Text>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Project;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Globe.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Texts.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Photo.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Objects.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\DialogBox.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Model.tsx",["118"],"import React, { forwardRef, useEffect, useState } from 'react';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { RoughnessMipmapper } from 'three-stdlib';\r\nimport { Group, Mesh, MeshStandardMaterial } from 'three';\r\nimport { MeshProps, useThree } from '@react-three/fiber';\r\n\r\ninterface ModelItem extends MeshProps {\r\n    path: string;\r\n}\r\n\r\nconst Model = forwardRef((props: ModelItem, ref): JSX.Element => {\r\n    const [gltf, set] = useState<Group>(null);\r\n    const { gl } = useThree();\r\n\r\n    useEffect(() => {\r\n        // use of RoughnessMipmapper is optional\r\n        const roughnessMipmapper = new RoughnessMipmapper(gl);\r\n\r\n        const loader = new GLTFLoader().setPath('models/');\r\n\r\n        loader.load(props.path, (gltf) => {\r\n            gltf.scene.traverse((child) => {\r\n                if ((child as Mesh).isMesh) {\r\n                    (child as Mesh).material = new MeshStandardMaterial({\r\n                        color: '#000',\r\n                        metalness: 5,\r\n                        roughness: 0\r\n                    })\r\n\r\n                    // @ts-ignore: Unreachable code error\r\n                    if (child.material.map) child.material.map.anisotropy = 16;\r\n                    roughnessMipmapper.generateMipmaps((child as Mesh).material as MeshStandardMaterial);\r\n                }\r\n            });\r\n            roughnessMipmapper.dispose();\r\n            set(gltf.scene)\r\n        })\r\n    }, [props.path])\r\n\r\n    return gltf &&\r\n        <primitive\r\n            {...props}\r\n            ref={ref}\r\n            object={gltf}\r\n            dispose={null}\r\n        />\r\n})\r\n\r\nexport default Model;",{"ruleId":"119","severity":1,"message":"120","line":47,"column":6,"nodeType":"121","endLine":47,"endColumn":39,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":10,"column":23,"nodeType":"125","messageId":"126","endLine":10,"endColumn":36},{"ruleId":"119","severity":1,"message":"127","line":33,"column":8,"nodeType":"121","endLine":33,"endColumn":15,"suggestions":"128"},{"ruleId":"119","severity":1,"message":"129","line":52,"column":8,"nodeType":"121","endLine":52,"endColumn":10,"suggestions":"130"},{"ruleId":"119","severity":1,"message":"131","line":64,"column":8,"nodeType":"121","endLine":64,"endColumn":17,"suggestions":"132"},{"ruleId":"119","severity":1,"message":"133","line":105,"column":8,"nodeType":"121","endLine":105,"endColumn":16,"suggestions":"134"},{"ruleId":"119","severity":1,"message":"135","line":117,"column":8,"nodeType":"121","endLine":117,"endColumn":15,"suggestions":"136"},{"ruleId":"119","severity":1,"message":"137","line":38,"column":8,"nodeType":"121","endLine":38,"endColumn":20,"suggestions":"138"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'adjustCanvasSize'. Either include it or remove the dependency array.","ArrayExpression",["139"],"@typescript-eslint/no-unused-vars","'OrbitControls' is defined but never used.","Identifier","unusedVar","React Hook useLayoutEffect has a missing dependency: 'timeline'. Either include it or remove the dependency array.",["140"],"React Hook useMemo has missing dependencies: 'medium' and 'vidPlayer'. Either include them or remove the dependency array.",["141"],"React Hook useEffect has missing dependencies: 'active' and 'fullScreen'. Either include them or remove the dependency array.",["142"],"React Hook useEffect has missing dependencies: 'medium', 'name', 'timeline', 'vidPlayer', 'x', and 'y'. Either include them or remove the dependency array.",["143"],"React Hook useEffect has missing dependencies: 'x' and 'y'. Either include them or remove the dependency array.",["144"],"React Hook useEffect has a missing dependency: 'gl'. Either include it or remove the dependency array.",["145"],{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [canvas.clientWidth, camera, gl, adjustCanvasSize]",{"range":"160","text":"161"},"Update the dependencies array to be: [focus, timeline]",{"range":"162","text":"163"},"Update the dependencies array to be: [medium, vidPlayer]",{"range":"164","text":"165"},"Update the dependencies array to be: [active, fullScreen, hovered]",{"range":"166","text":"167"},"Update the dependencies array to be: [active, medium, name, timeline, vidPlayer, x, y]",{"range":"168","text":"169"},"Update the dependencies array to be: [focus, x, y]",{"range":"170","text":"171"},"Update the dependencies array to be: [gl, props.path]",{"range":"172","text":"173"},[1702,1735],"[canvas.clientWidth, camera, gl, adjustCanvasSize]",[1393,1400],"[focus, timeline]",[2147,2149],"[medium, vidPlayer]",[2534,2543],"[active, fullScreen, hovered]",[4090,4098],"[active, medium, name, timeline, vidPlayer, x, y]",[4722,4729],"[focus, x, y]",[1454,1466],"[gl, props.path]"]
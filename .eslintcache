[{"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx":"1","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts":"2","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\App.tsx":"3","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Navbar.tsx":"4","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Home.tsx":"5","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Scene.tsx":"6","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Education.tsx":"7","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Projects.tsx":"8","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx":"9","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx":"10","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Contact.tsx":"11","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\i18n.ts":"12","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\functions.ts":"13","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Loader.tsx":"14","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\SceneController.tsx":"15","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\useMousePosition.tsx":"16"},{"size":1173,"mtime":1615244637424,"results":"17","hashOfConfig":"18"},{"size":440,"mtime":1614182950498,"results":"19","hashOfConfig":"18"},{"size":2710,"mtime":1625001420249,"results":"20","hashOfConfig":"18"},{"size":2392,"mtime":1622494341426,"results":"21","hashOfConfig":"18"},{"size":10495,"mtime":1625053707476,"results":"22","hashOfConfig":"18"},{"size":1713,"mtime":1625000420965,"results":"23","hashOfConfig":"18"},{"size":3147,"mtime":1622652834168,"results":"24","hashOfConfig":"18"},{"size":13145,"mtime":1625002524950,"results":"25","hashOfConfig":"18"},{"size":1166,"mtime":1617370915067,"results":"26","hashOfConfig":"18"},{"size":1246,"mtime":1616020094322,"results":"27","hashOfConfig":"18"},{"size":3626,"mtime":1622494086008,"results":"28","hashOfConfig":"18"},{"size":837,"mtime":1615245228365,"results":"29","hashOfConfig":"18"},{"size":1782,"mtime":1624969635605,"results":"30","hashOfConfig":"18"},{"size":510,"mtime":1622494250930,"results":"31","hashOfConfig":"18"},{"size":1532,"mtime":1622494815514,"results":"32","hashOfConfig":"18"},{"size":763,"mtime":1622760093250,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"g7aof9",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx",[],["73","74"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\App.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Navbar.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Home.tsx",["75"],"import React, { Suspense, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { useFrame, useLoader } from 'react-three-fiber'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { Vector3 } from 'three/src/math/Vector3';\r\nimport { rotateAroundPoint } from './functions';\r\nimport { Sphere, Text } from '@react-three/drei';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AppContext } from './context';\r\nimport Loader from './Loader';\r\nimport gsap from 'gsap';\r\nimport globeVertexShader from './shaders/globeVertex.glsl';\r\nimport globeFragmentShader from './shaders/globeFragment.glsl';\r\nimport atmosphereVertexShader from './shaders/atmosphereVertex.glsl';\r\nimport atmosphereFragmentShader from './shaders/atmosphereFragment.glsl';\r\nimport photoVertexShader from './shaders/photoVertex.glsl';\r\nimport photoFragmentShader from './shaders/photoFragment.glsl';\r\nimport { AdditiveBlending, BackSide, DoubleSide } from 'three';\r\nimport useMousePosition from './useMousePosition';\r\nconsole.log(globeVertexShader)\r\n\r\nconst Globe = ({ focus }: { focus: boolean }): JSX.Element => {\r\n    const globe = useRef(null);\r\n    const globeController = useRef(null);\r\n    const { x, y } = useMousePosition('3D');\r\n\r\n    useFrame(() => {\r\n        if (globe.current)\r\n            globe.current.rotation.y -= 0.005;\r\n        if (globeController.current)\r\n            gsap.to(globeController.current.rotation, { x: -y * 0.3, y: x * 0.5, duration: 2 })\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <group\r\n                ref={globeController}\r\n                position={[0, 0, -6]}\r\n            >\r\n                <Sphere\r\n                    args={[5, 50, 50]}\r\n                    ref={globe}\r\n                >\r\n                    <shaderMaterial\r\n                        vertexShader={globeVertexShader}\r\n                        fragmentShader={globeFragmentShader}\r\n                        uniforms={\r\n                            {\r\n                                globeTexture: {\r\n                                    value: new TextureLoader().load('images/textures/night.jpg')\r\n                                }\r\n                            }\r\n                        }\r\n                        attach=\"material\"\r\n                    />\r\n                </Sphere>\r\n            </group>\r\n            <Sphere\r\n                args={[5, 50, 50]}\r\n                position={[0, 0, -6]}\r\n                scale={[1.1, 1.1, 1.1]}\r\n            >\r\n                <shaderMaterial\r\n                    vertexShader={atmosphereVertexShader}\r\n                    fragmentShader={atmosphereFragmentShader}\r\n                    blending={AdditiveBlending}\r\n                    side={BackSide}\r\n                    attach=\"material\"\r\n                />\r\n            </Sphere>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Texts = ({ focus }: { focus: boolean }): JSX.Element => {\r\n    const texts = useRef([]);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (focus) {\r\n            texts.current[0] && gsap.to(texts.current[0].position, { x: -2, y: 0, z: 0.5, duration: 5, ease: 'expo.out' });\r\n            texts.current[1] && gsap.to(texts.current[1].position, { x: 2, y: -1, z: 0.5, duration: 5, ease: 'expo.out' });\r\n            texts.current[0] && gsap.to(texts.current[0], { duration: 5, ease: 'expo.out', fillOpacity: 1 });\r\n            texts.current[1] && gsap.to(texts.current[1], { duration: 5, ease: 'expo.out', fillOpacity: 1 });\r\n        } else {\r\n            texts.current[0] && gsap.to(texts.current[0].position, { x: 0, y: 0, z: 0, duration: 5, ease: 'expo.out' });\r\n            texts.current[1] && gsap.to(texts.current[1].position, { x: 0, y: 0, z: 0, duration: 5, ease: 'expo.out' });\r\n            texts.current[0] && gsap.to(texts.current[0], { duration: 5, ease: 'expo.out', fillOpacity: 0 });\r\n            texts.current[1] && gsap.to(texts.current[1], { duration: 5, ease: 'expo.out', fillOpacity: 0 });\r\n        }\r\n    }, [focus])\r\n\r\n    return (\r\n        <>\r\n            <Text\r\n                ref={el => texts.current[0] = el}\r\n                color='#fff'\r\n                font='fonts/Oswald.ttf'\r\n                fontSize={1}\r\n                textAlign='center'\r\n                fillOpacity={0}\r\n            >\r\n                {t('homeDesc.0')}\r\n            </Text>\r\n            <Text\r\n                ref={el => texts.current[1] = el}\r\n                color='#d4af37'\r\n                font='fonts/Oswald.ttf'\r\n                fontSize={1}\r\n                textAlign='center'\r\n                fillOpacity={0}\r\n            >\r\n                {t('homeDesc.1')}\r\n            </Text>\r\n        </>\r\n    )\r\n}\r\n\r\n// const Objects = ({ focus }: { focus: boolean }): JSX.Element => {\r\nconst Objects = (): JSX.Element => {\r\n    const monitor = useLoader(GLTFLoader, 'models/monitor.glb');\r\n    const phone = useLoader(GLTFLoader, 'models/phone.glb');\r\n    const tablet = useLoader(GLTFLoader, 'models/tablet.glb');\r\n\r\n    useFrame(() => {\r\n        monitor.scene && rotateAroundPoint(monitor.scene, new Vector3(0, 0, -3), new Vector3(0, 1, 0), 1 * Math.PI / 180, true);\r\n        phone.scene && rotateAroundPoint(phone.scene, new Vector3(0, 0, -3), new Vector3(0, 1, 0), 1 * Math.PI / 180, true);\r\n        tablet.scene && rotateAroundPoint(tablet.scene, new Vector3(0, 0, -3), new Vector3(0, 1, 0), 1 * Math.PI / 180, true);\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <mesh position={[-4, 1, 0]}>\r\n                <primitive object={monitor.scene} />\r\n            </mesh>\r\n            <mesh position={[-4, -0.5, 0]}>\r\n                <primitive object={phone.scene} />\r\n            </mesh>\r\n            <mesh position={[4, 1, 0]}>\r\n                <primitive object={tablet.scene} />\r\n            </mesh>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Photo = ({ focus }: { focus: boolean }): JSX.Element => {\r\n    const photo = useRef(null);\r\n    const row: number = 3;\r\n    const col: number = 4;\r\n    // const particlesNum: number = row * col;\r\n    const photoTexture = useLoader(TextureLoader, 'images/photo.png');\r\n    const maskTexture = useLoader(TextureLoader, 'images/mask.png');\r\n\r\n    const rand = (a: number, b: number) => a + (b - a) * Math.random();\r\n\r\n    const [positions, coordinates, speeds, offset] = useMemo(() => {\r\n        const initialPositions: Array<number> = [];\r\n        const initialCoordinates: Array<number> = [];\r\n        const initialSpeeds: Array<number> = [];\r\n        const initialOffset: Array<number> = [];\r\n\r\n        for (let y = 0; y < row; y += 0.01) {\r\n            let posY: number = y - row / 2;\r\n            for (let x = 0; x < col; x += 0.01) {\r\n                let posX: number = x - col / 2;\r\n                initialPositions.push(posY * 2);\r\n                initialPositions.push(posX * 2);\r\n                initialPositions.push(0);\r\n                initialCoordinates.push(y);\r\n                initialCoordinates.push(x);\r\n                initialCoordinates.push(0);\r\n                initialSpeeds.push(rand(0.4, 1));\r\n                initialOffset.push(rand(0, 5));\r\n            }\r\n        }\r\n\r\n        const positions: Float32Array = new Float32Array(initialPositions);\r\n        const coordinates: Float32Array = new Float32Array(initialCoordinates);\r\n        const speeds: Float32Array = new Float32Array(initialSpeeds);\r\n        const offset: Float32Array = new Float32Array(initialOffset);\r\n        return [positions, coordinates, speeds, offset];\r\n    }, [])\r\n\r\n    const uniforms = useMemo(() => ({\r\n        progress: { value: 0 },\r\n        photo: { value: photoTexture },\r\n        mask: { value: maskTexture },\r\n        move: { value: 5 },\r\n        time: { value: 0 }\r\n    }), [])\r\n\r\n    useEffect(() => {\r\n        focus ?\r\n            photo.current && gsap.to(photo.current.material.uniforms.move, { value: 0, duration: 5, ease: 'expo.out',}) :\r\n            photo.current && gsap.to(photo.current.material.uniforms.move, { value: 5, duration: 5, ease: 'expo.out',onUpdate: () => {console.log(photo.current.material.uniforms.move);photo.current.geometry.verticesNeedUpdate = true},});\r\n    }, [focus])\r\n\r\n    return (\r\n        <points\r\n            ref={photo}\r\n        >\r\n            <bufferGeometry>\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"position\"]}\r\n                    count={positions.length / 3}\r\n                    array={positions}\r\n                    itemSize={3}\r\n                />\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"aCoordinates\"]}\r\n                    count={coordinates.length / 3}\r\n                    array={coordinates}\r\n                    itemSize={3}\r\n                />\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"aSpeed\"]}\r\n                    count={speeds.length}\r\n                    array={speeds}\r\n                    itemSize={1}\r\n                />\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"aOffset\"]}\r\n                    count={offset.length}\r\n                    array={offset}\r\n                    itemSize={1}\r\n                />\r\n            </bufferGeometry>\r\n            <shaderMaterial\r\n                vertexShader={photoVertexShader}\r\n                fragmentShader={photoFragmentShader}\r\n                uniforms={uniforms}\r\n                side={DoubleSide}\r\n                transparent={true}\r\n                depthTest={false}\r\n                depthWrite={false}\r\n            />\r\n        </points>\r\n    )\r\n}\r\n\r\nconst Home = React.memo(() => {\r\n    console.log('home rendered');\r\n    const { state } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        currentItem === 'home.end' ? setFocus(true) : setFocus(false);\r\n    }, [currentItem])\r\n\r\n    return (\r\n        <>\r\n            <Suspense fallback={<Loader />}>\r\n                <Photo focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Globe focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Texts focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Objects />\r\n                {/* <Preload all /> */}\r\n            </Suspense>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Home;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Scene.tsx",["76"],"import React from 'react';\r\nimport Home from './Home';\r\nimport Education from './Education';\r\nimport Projects from './Projects';\r\nimport Contact from './Contact';\r\nimport SceneController from './SceneController';\r\nimport { OrbitControls } from '@react-three/drei/core/OrbitControls';\r\n\r\n// const Skybox = React.memo(() => {\r\n//     console.log('skybox rendered');\r\n//     const textures: Array<string> = [\r\n//         'images/textures/skybox/space_ft.png',\r\n//         'images/textures/skybox/space_bk.png',\r\n//         'images/textures/skybox/space_up.png',\r\n//         'images/textures/skybox/space_dn.png',\r\n//         'images/textures/skybox/space_rt.png',\r\n//         'images/textures/skybox/space_lf.png'\r\n//     ];\r\n\r\n//     return <mesh>\r\n//         <boxBufferGeometry args={[1000, 1000, 1000]} />\r\n//         {\r\n//             textures.map((value: string, i: number) => {\r\n//                 const texture = new TextureLoader().load(value);\r\n//                 console.log(texture);\r\n//                 return <meshBasicMaterial key={i} attachArray='material' map={texture} side={BackSide} />;\r\n//             })\r\n//         }\r\n//     </mesh>\r\n// })\r\n\r\nconst Scene = (): JSX.Element => {\r\n    console.log('scene rendered');\r\n\r\n    return (\r\n        <>\r\n            <Home />\r\n            <Education />\r\n            <Projects />\r\n            <Contact />\r\n            <directionalLight position={[0, 1, 1]} intensity={1} color={'#fff'} />\r\n            <ambientLight color={'#404040'} />\r\n            <SceneController />\r\n            {/* <Suspense fallback={null}>\r\n                <Skybox />\r\n            </Suspense> */}\r\n            {/* <OrbitControls /> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Scene;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Education.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Projects.tsx",["77","78","79","80","81","82","83","84"],"import React, { useContext, useRef, useState, useEffect, Suspense, useMemo } from 'react';\r\nimport { useLoader } from 'react-three-fiber'\r\nimport { AppContext } from './context';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { RoundedBox, Text } from '@react-three/drei';\r\nimport { Types } from './context/reducers';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Loader from './Loader';\r\nimport gsap from 'gsap';\r\nimport { Color, DoubleSide, FrontSide, Mesh, PlaneGeometry, ShaderMaterial, Vector2, VideoTexture } from 'three';\r\nimport videoVertexShader from './shaders/videoVertex.glsl';\r\nimport videoFragmentShader from './shaders/videoFragment.glsl';\r\n\r\ninterface ProjectItem {\r\n    id: number,\r\n    name: string,\r\n    logos: Array<string>,\r\n    medium: string,\r\n    preview: string,\r\n    x: number,\r\n    y: number,\r\n    active: boolean,\r\n    focus?: boolean,\r\n    onClick?: (id: number) => void,\r\n}\r\n\r\nconst Project = ({ id, name, logos, medium, preview, x, y, active, focus, onClick }: ProjectItem): JSX.Element => {\r\n    const { state } = useContext(AppContext);\r\n    const { fullScreen, gui } = state.scene;\r\n    const { t } = useTranslation();\r\n    const [hovered, setHovered] = useState<boolean>(false);\r\n    const [vidPlayer] = useState(() => {\r\n        const vid = document.createElement('video');\r\n        vid.crossOrigin = 'Anonymous';\r\n        vid.loop = true;\r\n        vid.controls = true;\r\n        return vid;\r\n    });\r\n    const [vidObject] = useMemo(() => {\r\n        const geometry = medium === 'desktop' ? new PlaneGeometry(1.8, 0.8) : new PlaneGeometry(0.8, 1.8);\r\n        geometry.center();\r\n        const uniforms = {\r\n            u_tex: { value: new VideoTexture(vidPlayer) },\r\n            u_adjust_uv: { value: new Vector2(1, 1) }\r\n        }\r\n        const material = new ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: videoVertexShader,\r\n            fragmentShader: videoFragmentShader\r\n        });\r\n\r\n        const video = new Mesh(geometry, material);\r\n        return [video];\r\n    }, []);\r\n    const project = useRef(null);\r\n    const projectDescription = useRef(null);\r\n    const exit = useRef(null);\r\n    const normalMap1 = useLoader(TextureLoader, 'images/textures/nm1.jpg');\r\n    // const normalMap2 = useLoader(TextureLoader, 'images/textures/nm2.jpg');\r\n    const timeline = gsap.timeline();\r\n\r\n    // useEffect(() => {\r\n    //     project.current && gui.add(project.current.rotation, 'x').min(0).max(360)\r\n    //     project.current && gui.add(project.current.rotation, 'y').min(0).max(360)\r\n    //     project.current && gui.add(project.current.rotation, 'z').min(0).max(360)\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        document.body.style.cursor = hovered ? 'pointer' : 'auto';\r\n        hovered ?\r\n            project.current && gsap.to(project.current.scale, { duration: 1, ease: 'expo.out', x: 1.1, y: 1.1 }) :\r\n            project.current && gsap.to(project.current.scale, { duration: 1, ease: 'expo.out', x: 1, y: 1 });\r\n    }, [hovered])\r\n\r\n    useEffect(() => {\r\n        if (active) {\r\n            if (vidPlayer) {\r\n                if (vidPlayer.readyState < 3) {\r\n                    vidPlayer.src = `videos/${name}.mp4`;\r\n                    vidPlayer.load();\r\n                    vidPlayer.onerror = () => console.log(`${name} error ${vidPlayer.error.code}; details: ${vidPlayer.error.message}`);\r\n                }\r\n                vidPlayer.play();\r\n            }\r\n            if (medium === 'desktop') {\r\n                timeline.to(project.current.position, { x: 16, y: 0, z: -17.5 });\r\n                timeline.to(project.current.scale, { x: 2, y: 2, z: 2, duration: 1 });\r\n            } else {\r\n                timeline.to(project.current.position, { x: 16.5, y: 0, z: -17.5 });\r\n                timeline.to(project.current.scale, { x: 1.6, y: 1.6, z: 1.6, duration: 1 });\r\n            }\r\n            timeline.to(project.current.rotation, { y: -0.2, duration: 1 });\r\n            projectDescription.current.visible = true;\r\n            console.log('current', projectDescription.current)\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0.5, duration: 3 });\r\n        }\r\n        if (!active) {\r\n            if (vidPlayer) vidPlayer.pause();\r\n            timeline.to(project.current.position, { x: x, y: y, z: -18 })\r\n            timeline.to(project.current.rotation, { y: 0, duration: 1 });\r\n            timeline.to(project.current.scale, { x: 1, y: 1, z: 1, duration: 1 });\r\n            projectDescription.current.visible = false;\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0, duration: 3 });\r\n        }\r\n    }, [active])\r\n\r\n    // useEffect(() => {\r\n    //     focus ?\r\n    //         project.current && gsap.to(project.current.position, { duration: 5, ease: 'expo.out', x: 0, y: 0, z: 0 }) :\r\n    //         project.current && gsap.to(project.current.position, { duration: 5, ease: 'expo.out', x: generateNumber(-2, 2), y: generateNumber(-2, 2), z: generateNumber(-2, 2) });\r\n    // }, [focus])\r\n\r\n    // const generateNumber = (min: number, max: number) => {\r\n    //     min = Math.ceil(min);\r\n    //     max = Math.floor(max);\r\n    //     return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    // }\r\n\r\n    const onSelected = () => {\r\n        setHovered(false);\r\n        onClick(id);\r\n    }\r\n\r\n    const onExit = () => {\r\n        setHovered(false);\r\n        onClick(null);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <group\r\n                ref={project}\r\n                position={[x, y - 0.1, -18]}\r\n                onClick={fullScreen ? null : onSelected}\r\n                onPointerOver={fullScreen ? null : () => setHovered(true)}\r\n                onPointerOut={fullScreen ? null : () => setHovered(false)}\r\n            >\r\n                <primitive object={vidObject} position-z={0.08} />\r\n                <RoundedBox args={medium == 'desktop' ? [2, 1, 0.1] : [1, 2, 0.1]}>\r\n                    <meshPhongMaterial attach=\"material\" color=\"#000\" />\r\n                </RoundedBox>\r\n            </group>\r\n            <group\r\n                ref={projectDescription}\r\n                position={[14.3, 0, -16]}\r\n                visible={false}\r\n            >\r\n                <mesh>\r\n                    <planeBufferGeometry args={[1.5, 1.5]} />\r\n                    <meshStandardMaterial\r\n                        map={normalMap1}\r\n                        color='#000'\r\n                        transparent\r\n                    />\r\n                </mesh>\r\n                <group>\r\n                    <Text\r\n                        color='#d4af37'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.1}\r\n                        maxWidth={1.5}\r\n                        textAlign='center'\r\n                        anchorY={-0.7}\r\n                    >\r\n                        {t(`projectTitles.${id}`)}\r\n                    </Text>\r\n                    <Text\r\n                        color='#fff'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.08}\r\n                        maxWidth={1}\r\n                        textAlign='center'\r\n                        anchorY={-0.5}\r\n                        lineHeight={2}\r\n                    >\r\n                        {t(`projectDesc.${id}`)}\r\n                    </Text>\r\n                    <Text\r\n                        color='#fff'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.06}\r\n                        maxWidth={1}\r\n                        textAlign='center'\r\n                        anchorY={0.3}\r\n                        lineHeight={2}\r\n                    >\r\n                        {preview}\r\n                    </Text>\r\n                </group>\r\n                {logos.map((logo: string, index: number) => {\r\n                    const texture = new TextureLoader().load(`images/logos/${logo}.png`);\r\n\r\n                    return <mesh position-x={0.5 * (index % 3) - 0.5} position-y={index < 3 ? -0.5 : -0.7}>\r\n                        <planeBufferGeometry args={[0.2, 0.1]} />\r\n                        <meshStandardMaterial map={texture} transparent />\r\n                    </mesh>\r\n                })}\r\n            </group>\r\n            {\r\n                fullScreen &&\r\n                <Text\r\n                    ref={exit}\r\n                    position={[17, -1, -16.5]}\r\n                    color='#d4af37'\r\n                    font='fonts/Oswald.ttf'\r\n                    fontSize={0.2}\r\n                    onClick={onExit}\r\n                >\r\n                    {t('exit')}\r\n                </Text>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst Projects = React.memo(() => {\r\n    console.log('projects rendered');\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n    const [projectItems, setProjectItems] = useState<Array<ProjectItem>>([\r\n        { id: 0, name: 'gfe', logos: ['vue', 'uikit', 'firebase'], medium: 'desktop', preview: 'http://www.gfe.agh.edu.pl', x: 12, y: 1, active: false },\r\n        { id: 1, name: 'stalcraft', logos: ['angular', 'node'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Stalcraft', x: 14.5, y: 1, active: false },\r\n        { id: 2, name: 'shop', logos: ['aspnet', 'mysql'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Shop', x: 17, y: 1, active: false },\r\n        { id: 3, name: 'coronastats', logos: ['reactnative', 'redux'], medium: 'mobile', preview: 'https://github.com/kmroczek11/Coronastats', x: 19, y: 1, active: false },\r\n        { id: 4, name: 'marbles', logos: ['three', 'node', 'jquery', 'ajax', 'socketio', 'mongodb'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Marbles', x: 12, y: -1, active: false },\r\n        { id: 5, name: 'mp3player', logos: ['jquery', 'node', 'ajax'], medium: 'desktop', preview: 'https://github.com/kmroczek11/School-projects/tree/master/MP3%20Player', x: 14.5, y: -1, active: false },\r\n        { id: 6, name: 'tasky', logos: ['flutter', 'rive', 'firebase'], medium: 'mobile', preview: 'https://github.com/kmroczek11/Tasky', x: 16.5, y: -1, active: false },\r\n        // { id: 7, name: '', logos: ['react', 'sass'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Portfolio', x: 19.5, y: -1, active: false },\r\n    ]);\r\n    const [selected, setSelected] = useState<number>(null);\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        currentItem === 'projects.end' ? setFocus(true) : setFocus(false);\r\n    }, [currentItem])\r\n    // const light1 = useRef(null);\r\n    // const light2 = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // light1.current && gui.add(light1.current.position, 'x').min(10).max(20);\r\n        // light1.current && gui.add(light1.current.position, 'y').min(-5).max(5);\r\n        // light1.current && gui.add(light1.current.position, 'z').min(-20).max(-10);\r\n        // light2.current && gui.add(light2.current.position, 'x').min(10).max(20);\r\n        // light2.current && gui.add(light2.current.position, 'y').min(-5).max(5);\r\n        // light2.current && gui.add(light2.current.position, 'z').min(-20).max(-10);\r\n        // const t = new TimelineMax({yoyo:true,repeat:-1});\r\n\r\n        // light1.current && t.from(light1.current.position, {x:20, y:1, z:-16 ,ease: 'slow( 0.1, 0.7, false)', duration: 5, });\r\n        // light2.current && t.from(light2.current.position, {x:20, y:0, z:-16 ,ease: 'slow( 0.1, 0.7, false)', duration: 5, });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setProjectItems(prevProjectItems =>\r\n            prevProjectItems.map(\r\n                (e: ProjectItem) =>\r\n                    e.id === selected ?\r\n                        { ...e, active: true } : { ...e, active: false }\r\n            ));\r\n    }, [selected])\r\n\r\n    useEffect(() => {\r\n        projectItems.some((e: ProjectItem) => e.active) ?\r\n            dispatch({\r\n                type: Types.SetFullScreen,\r\n                payload: true,\r\n            }) : dispatch({\r\n                type: Types.SetFullScreen,\r\n                payload: false,\r\n            });\r\n    }, [projectItems])\r\n\r\n    return (\r\n        <>\r\n            {/* <pointLight ref={light1} color='#fff' position={[10, 0.5, -16]} intensity={5} distance={5} />\r\n            {light1.current && <pointLightHelper args={[light1.current, 0.5]} />}\r\n            <pointLight ref={light2} color='#d4af37' position={[10, 0, -16]} intensity={5} distance={5} />\r\n            {light2.current && <pointLightHelper args={[light2.current, 0.5]} />} */}\r\n            {\r\n                projectItems.map(\r\n                    (e: ProjectItem, i: number) =>\r\n                        <Suspense fallback={<Loader />}>\r\n                            <Project\r\n                                key={i}\r\n                                {...e}\r\n                                focus={focus}\r\n                                onClick={setSelected}\r\n                            />\r\n                        </Suspense>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Projects;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Contact.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\i18n.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\functions.ts",[],["85","86"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Loader.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\SceneController.tsx",["87"],"import { useContext, useEffect } from 'react';\r\nimport { AppContext } from './context';\r\nimport gsap from 'gsap';\r\nimport { Types } from './context/reducers';\r\n\r\nconst SceneController = (): JSX.Element => {\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { camera, currentItem } = state.scene;\r\n\r\n    const onNavigationEnded = (name: string) => {\r\n        dispatch({\r\n            type: Types.SetCurrentItem,\r\n            payload: name,\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        switch (currentItem) {\r\n            case 'home.to':\r\n                camera && gsap.to(camera.position, { x: 0, y: 0, z: 5, duration: 5, ease: 'expo.out', onComplete: () => onNavigationEnded('home.end') });\r\n                break;\r\n            case 'education.to':\r\n                camera && gsap.to(camera.position, { x: 0, y: 0, z: -15, duration: 5, ease: 'expo.out', onComplete: () => onNavigationEnded('education.end') });\r\n                break;\r\n            case 'projects.to':\r\n                camera && gsap.to(camera.position, { x: 15, y: 0, z: -15, duration: 5, ease: 'expo.out', onComplete: () => onNavigationEnded('projects.end') });\r\n                break;\r\n            case 'contact.to':\r\n                camera && gsap.to(camera.position, { x: 15, y: 0, z: 5, duration: 5, ease: 'expo.out', onComplete: () => onNavigationEnded('contact.end') });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [currentItem])\r\n\r\n    return null;\r\n}\r\n\r\nexport default SceneController;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\useMousePosition.tsx",["88"],"import { useState, useEffect } from 'react';\r\n\r\nconst useMousePosition = (world: string) => {\r\n    const [mousePosition, setMousePosition] = useState<{ x: number, y: number }>({ x: null, y: null });\r\n\r\n    const updateMousePosition = ev => {\r\n        setMousePosition(\r\n            {\r\n                x: world === '2D' ? ev.clientX : (ev.clientX / window.innerWidth) * 2 - 1,\r\n                y: world === '2D' ? ev.clientY : -(ev.clientY / window.innerWidth) * 2 + 1\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('mousemove', updateMousePosition);\r\n\r\n        return () => window.removeEventListener('mousemove', updateMousePosition);\r\n    }, []);\r\n\r\n    return mousePosition;\r\n};\r\n\r\nexport default useMousePosition;",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":190,"column":9,"nodeType":"95","endLine":190,"endColumn":11,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":7,"column":10,"nodeType":"99","messageId":"100","endLine":7,"endColumn":23},{"ruleId":"97","severity":1,"message":"101","line":10,"column":10,"nodeType":"99","messageId":"100","endLine":10,"endColumn":15},{"ruleId":"97","severity":1,"message":"102","line":10,"column":17,"nodeType":"99","messageId":"100","endLine":10,"endColumn":27},{"ruleId":"97","severity":1,"message":"103","line":10,"column":29,"nodeType":"99","messageId":"100","endLine":10,"endColumn":38},{"ruleId":"97","severity":1,"message":"104","line":29,"column":25,"nodeType":"99","messageId":"100","endLine":29,"endColumn":28},{"ruleId":"93","severity":1,"message":"105","line":54,"column":8,"nodeType":"95","endLine":54,"endColumn":10,"suggestions":"106"},{"ruleId":"93","severity":1,"message":"107","line":105,"column":8,"nodeType":"95","endLine":105,"endColumn":16,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":139,"column":42,"nodeType":"111","messageId":"112","endLine":139,"endColumn":44},{"ruleId":"93","severity":1,"message":"113","line":270,"column":8,"nodeType":"95","endLine":270,"endColumn":22,"suggestions":"114"},{"ruleId":"89","replacedBy":"115"},{"ruleId":"91","replacedBy":"116"},{"ruleId":"93","severity":1,"message":"117","line":34,"column":8,"nodeType":"95","endLine":34,"endColumn":21,"suggestions":"118"},{"ruleId":"93","severity":1,"message":"119","line":19,"column":8,"nodeType":"95","endLine":19,"endColumn":10,"suggestions":"120"},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'maskTexture' and 'photoTexture'. Either include them or remove the dependency array.","ArrayExpression",["123"],"@typescript-eslint/no-unused-vars","'OrbitControls' is defined but never used.","Identifier","unusedVar","'Color' is defined but never used.","'DoubleSide' is defined but never used.","'FrontSide' is defined but never used.","'gui' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'medium' and 'vidPlayer'. Either include them or remove the dependency array.",["124"],"React Hook useEffect has missing dependencies: 'medium', 'name', 'timeline', 'vidPlayer', 'x', and 'y'. Either include them or remove the dependency array.",["125"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["126"],["121"],["122"],"React Hook useEffect has missing dependencies: 'camera' and 'onNavigationEnded'. Either include them or remove the dependency array.",["127"],"React Hook useEffect has a missing dependency: 'updateMousePosition'. Either include it or remove the dependency array.",["128"],"no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"Update the dependencies array to be: [maskTexture, photoTexture]",{"range":"141","text":"142"},"Update the dependencies array to be: [medium, vidPlayer]",{"range":"143","text":"144"},"Update the dependencies array to be: [active, medium, name, timeline, vidPlayer, x, y]",{"range":"145","text":"146"},"Update the dependencies array to be: [dispatch, projectItems]",{"range":"147","text":"148"},"Update the dependencies array to be: [camera, currentItem, onNavigationEnded]",{"range":"149","text":"150"},"Update the dependencies array to be: [updateMousePosition]",{"range":"151","text":"152"},[7750,7752],"[maskTexture, photoTexture]",[2081,2083],"[medium, vidPlayer]",[4706,4714],"[active, medium, name, timeline, vidPlayer, x, y]",[12177,12191],"[dispatch, projectItems]",[1460,1473],"[camera, currentItem, onNavigationEnded]",[690,692],"[updateMousePosition]"]
[{"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\index.tsx":"1","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\reportWebVitals.ts":"2","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\internationalization\\i18n.ts":"3","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\main\\App.tsx":"4","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\context\\index.tsx":"5","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Effects.tsx":"6","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\scene\\Scene.tsx":"7","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\context\\reducers.tsx":"8","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\postprocessing\\pass.ts":"9","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\postprocessing\\constant.ts":"10","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Loader.tsx":"11","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\scene\\SceneController.tsx":"12","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\navigation\\Navbar.tsx":"13","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Home.tsx":"14","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\projects\\Projects.tsx":"15","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\education\\Education.tsx":"16","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\contact\\Contact.tsx":"17","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\functions.ts":"18","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Photo.tsx":"19","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\DialogBox.tsx":"20","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\projects\\Project.tsx":"21","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Objects.tsx":"22","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Texts.tsx":"23","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Globe.tsx":"24","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Model.tsx":"25","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\hooks\\useMousePosition.tsx":"26"},{"size":694,"mtime":1647183240567,"results":"27","hashOfConfig":"28"},{"size":440,"mtime":1647183240569,"results":"29","hashOfConfig":"28"},{"size":837,"mtime":1647183240567,"results":"30","hashOfConfig":"28"},{"size":1154,"mtime":1647270441479,"results":"31","hashOfConfig":"28"},{"size":1117,"mtime":1647350051847,"results":"32","hashOfConfig":"28"},{"size":2695,"mtime":1647183240563,"results":"33","hashOfConfig":"28"},{"size":3255,"mtime":1647183240569,"results":"34","hashOfConfig":"28"},{"size":899,"mtime":1647183240564,"results":"35","hashOfConfig":"28"},{"size":2127,"mtime":1647183240568,"results":"36","hashOfConfig":"28"},{"size":148,"mtime":1647183240568,"results":"37","hashOfConfig":"28"},{"size":571,"mtime":1647183240564,"results":"38","hashOfConfig":"28"},{"size":2925,"mtime":1647272596361,"results":"39","hashOfConfig":"28"},{"size":4885,"mtime":1647433593596,"results":"40","hashOfConfig":"28"},{"size":741,"mtime":1647183240566,"results":"41","hashOfConfig":"28"},{"size":4353,"mtime":1647350114782,"results":"42","hashOfConfig":"28"},{"size":3232,"mtime":1647183240565,"results":"43","hashOfConfig":"28"},{"size":6817,"mtime":1647433722857,"results":"44","hashOfConfig":"28"},{"size":391,"mtime":1647349191691,"results":"45","hashOfConfig":"28"},{"size":4529,"mtime":1647183240566,"results":"46","hashOfConfig":"28"},{"size":2379,"mtime":1647276798618,"results":"47","hashOfConfig":"28"},{"size":10760,"mtime":1647350287885,"results":"48","hashOfConfig":"28"},{"size":1807,"mtime":1647183240566,"results":"49","hashOfConfig":"28"},{"size":1823,"mtime":1647183240566,"results":"50","hashOfConfig":"28"},{"size":2496,"mtime":1647183240566,"results":"51","hashOfConfig":"28"},{"size":1652,"mtime":1647183240564,"results":"52","hashOfConfig":"28"},{"size":759,"mtime":1647183240567,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1uq7kkm",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\index.tsx",[],["111","112"],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\reportWebVitals.ts",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\internationalization\\i18n.ts",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\main\\App.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\context\\index.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Effects.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\scene\\Scene.tsx",["113"],"import React, { useEffect } from 'react';\r\nimport Home from '../home/Home';\r\nimport Education from '../education/Education';\r\nimport Projects from '../projects/Projects';\r\nimport Contact from '../contact/Contact';\r\nimport SceneController from './SceneController';\r\nimport { useRef } from 'react';\r\nimport { useThree } from '@react-three/fiber';\r\nimport Navbar from '../navigation/Navbar';\r\nimport { Environment, OrbitControls, Preload } from '@react-three/drei';\r\nimport { Suspense } from 'react';\r\nimport Loader from '../components/Loader';\r\nimport gsap from 'gsap';\r\n\r\nconst navbar_items: Array<NavbarItem> = [\r\n    { id: 0, name: 'education' },\r\n    { id: 1, name: 'projects' },\r\n    { id: 2, name: 'contact' },\r\n]\r\n\r\nexport interface NavbarItem {\r\n    id: number,\r\n    name: string,\r\n}\r\n\r\nconst Scene = (): JSX.Element => {\r\n    const keyLight = useRef(null);\r\n    const fillLight = useRef(null);\r\n    const frontLight = useRef(null);\r\n    const { camera } = useThree();\r\n    const timeline = gsap.timeline({ repeat: -1, yoyo: true });\r\n\r\n    useEffect(() => {\r\n        if (!keyLight.current || !fillLight.current || !frontLight.current) return;\r\n\r\n        const k = keyLight.current;\r\n        const fi = fillLight.current;\r\n        const fr = frontLight.current;\r\n\r\n        k.position.set(camera.position.x + 5, 1, camera.position.z);\r\n        fi.position.set(camera.position.x - 5, 0.5, camera.position.z);\r\n        fr.position.set(camera.position.x - 5, -0.5, camera.position.z);\r\n\r\n        k.target.position.set(camera.position.x, 0, camera.position.z - 5);\r\n        fi.target.position.set(camera.position.x, 0, camera.position.z - 5);\r\n        fr.target.position.set(camera.position.x, 0, camera.position.z - 5);\r\n\r\n        k.target.updateMatrixWorld();\r\n        fi.target.updateMatrixWorld();\r\n        fr.target.updateMatrixWorld();\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!fillLight.current) return;\r\n\r\n        timeline.to(\r\n            fillLight.current.position,\r\n            { x: camera.position.x + 5, duration: 5 },\r\n        )\r\n        timeline.to(\r\n            fillLight.current.position,\r\n            { x: camera.position.x - 5, duration: 5 },\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Suspense fallback={<Loader />}>\r\n                <Environment\r\n                    background={false}\r\n                    files={['square.png', 'square.png', 'square.png', 'square.png', 'square.png', 'square.png']}\r\n                    path='/images/textures/'\r\n                />\r\n                <Navbar items={navbar_items} />\r\n                <Home />\r\n                <Education />\r\n                <Projects />\r\n                <Contact />\r\n                <directionalLight\r\n                    ref={keyLight}\r\n                    args={['#fff', 1]}\r\n                />\r\n                <directionalLight\r\n                    ref={fillLight}\r\n                    args={['#d4af37', 1]}\r\n                />\r\n                <directionalLight\r\n                    ref={frontLight}\r\n                    args={['#fff', 1]}\r\n                />\r\n                <SceneController />\r\n                <Preload all />\r\n            </Suspense>\r\n            {/* <OrbitControls/> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Scene;","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\context\\reducers.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\postprocessing\\pass.ts",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\postprocessing\\constant.ts",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Loader.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\scene\\SceneController.tsx",["114"],"import { useContext, useEffect } from 'react';\r\nimport { AppContext } from '../context';\r\nimport { Types } from '../context/reducers';\r\nimport { useThree } from '@react-three/fiber';\r\nimport { animate } from '../components/functions';\r\nimport { WebGLRenderer } from 'three/src/renderers/WebGLRenderer';\r\nimport { PerspectiveCamera } from 'three/src/cameras/PerspectiveCamera';\r\n\r\nconst SceneController = (): JSX.Element => {\r\n    const { gl, camera }: { gl: WebGLRenderer, camera: PerspectiveCamera } = useThree();\r\n    const { domElement: canvas } = gl;\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n\r\n    const adjustCanvasSize = () => {\r\n        // look up the size the canvas is being displayed\r\n        let width = canvas.clientWidth;\r\n        let height = canvas.clientHeight;\r\n\r\n        if (width === 0) return;\r\n\r\n        if (width < 768)\r\n            // swap width and height on mobile\r\n            [width, height] = [height, width];\r\n\r\n        // adjust displayBuffer size to match\r\n        if (canvas.width !== width || canvas.height !== height) {\r\n            const ratio = window.devicePixelRatio;\r\n            // you must pass false here or three.js sadly fights the browser\r\n            gl.setSize(width, height, false);\r\n            camera.aspect = width / height;\r\n            camera.updateProjectionMatrix();\r\n            canvas.width = width * ratio;\r\n            canvas.height = height * ratio;\r\n            canvas.style.width = `${width}px`;\r\n            canvas.style.height = `${height}px`;\r\n            // update any render target sizes here\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!camera || !gl) return;\r\n\r\n        adjustCanvasSize();\r\n        window.addEventListener('resize', adjustCanvasSize, false);\r\n    }, [canvas?.clientWidth, camera, gl])\r\n\r\n    const onNavigationEnded = (name: string) => {\r\n        dispatch({\r\n            type: Types.SetCurrentItem,\r\n            payload: name,\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!camera) return;\r\n\r\n        switch (currentItem) {\r\n            case 'home.to':\r\n                animate(camera.position, { x: 0, y: 0, z: 5 }, 3, 'expo.out', () => onNavigationEnded('home.end'));\r\n                break;\r\n            case 'education.to':\r\n                animate(camera.position, { x: 0, y: 0, z: -15 }, 3, 'expo.out', () => onNavigationEnded('education.end'));\r\n                break;\r\n            case 'projects.to':\r\n                animate(camera.position, { x: 15, y: 0, z: -15 }, 3, 'expo.out', () => onNavigationEnded('projects.end'));\r\n                break;\r\n            case 'contact.to':\r\n                animate(camera.position, { x: 15, y: 0, z: 5 }, 3, 'expo.out', () => onNavigationEnded('contact.end'));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n\r\n    return null;\r\n}\r\n\r\nexport default SceneController;","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\navigation\\Navbar.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Home.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\projects\\Projects.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\education\\Education.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\contact\\Contact.tsx",["115"],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\functions.ts",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Photo.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\DialogBox.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\projects\\Project.tsx",["116","117","118","119"],"import React, { useContext, useRef, useState, useEffect, useMemo, Fragment } from 'react';\r\nimport '../styles/project.css';\r\nimport { AppContext } from '../context';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { RoundedBox, Text, Html } from '@react-three/drei';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Mesh, PlaneGeometry, ShaderMaterial, Vector2, VideoTexture } from 'three';\r\nimport videoVertexShader from '../shaders/videoVertex.glsl';\r\nimport videoFragmentShader from '../shaders/videoFragment.glsl';\r\nimport { ProjectItem } from './Projects';\r\nimport { ThreeEvent } from '@react-three/fiber';\r\nimport { animate } from '../components/functions';\r\nimport gsap from 'gsap';\r\n\r\nconst Project = ({ id, name, logos, medium, github, preview, x, y, active, focus, onClick }: ProjectItem): JSX.Element => {\r\n    const { state } = useContext(AppContext);\r\n    const { fullScreen } = state.scene;\r\n    const { t } = useTranslation();\r\n    const [hovered, setHovered] = useState<boolean>(false);\r\n    const project = useRef(null);\r\n    const projectDescription = useRef(null);\r\n    const exit = useRef(null);\r\n    const timeline = gsap.timeline();\r\n    const [enteredPreviewMode, setEnteredPreviewMode] = useState<boolean>(false);\r\n    const [visible, setVisible] = useState<boolean>(false);\r\n    const [clickable, setClickable] = useState<boolean>(false);\r\n\r\n    const [vidPlayer] = useState(() => {\r\n        const vid = document.createElement('video');\r\n        vid.crossOrigin = 'Anonymous';\r\n        vid.loop = true;\r\n        vid.controls = true;\r\n        return vid;\r\n    });\r\n\r\n    const [vidObject] = useMemo(() => {\r\n        const geometry = medium === 'desktop' ? new PlaneGeometry(1.8, 0.8) : new PlaneGeometry(0.8, 1.8);\r\n\r\n        const uniforms = {\r\n            u_tex: { value: new VideoTexture(vidPlayer) },\r\n            u_adjust_uv: { value: new Vector2(1, 1) }\r\n        }\r\n\r\n        const material = new ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: videoVertexShader,\r\n            fragmentShader: videoFragmentShader,\r\n        });\r\n\r\n        const video = new Mesh(geometry, material);\r\n\r\n        return [video];\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (active || !fullScreen) document.body.style.cursor = hovered ? 'pointer' : 'auto';\r\n\r\n        if (fullScreen) return;\r\n\r\n        if (!project.current) return;\r\n\r\n        hovered ?\r\n            animate(project.current.scale, { x: 1.1, y: 1.1 }, 1, 'expo.out') :\r\n            animate(project.current.scale, { x: 1, y: 1 }, 1, 'expo.out');\r\n    }, [hovered])\r\n\r\n    useEffect(() => {\r\n        if (!vidPlayer) return;\r\n\r\n        if (active) {\r\n            if (vidPlayer.readyState < 3) {\r\n                vidPlayer.src = `videos/${name}.mp4`;\r\n                vidPlayer.load();\r\n                vidPlayer.onerror = () => console.log(`${name} error ${vidPlayer.error.code}; details: ${vidPlayer.error.message}`);\r\n            }\r\n\r\n            vidPlayer.play();\r\n\r\n            if (medium === 'desktop') {\r\n                timeline.to(project.current.position, { x: 16, y: 0, z: -17.5 });\r\n                timeline.to(project.current.scale, { x: 2, y: 2, z: 2, duration: 1 });\r\n            } else {\r\n                timeline.to(project.current.position, { x: 16.5, y: 0, z: -17.5 });\r\n                timeline.to(project.current.scale, { x: 1.6, y: 1.6, z: 1.6, duration: 1 });\r\n            }\r\n\r\n            timeline.to(project.current.rotation, {\r\n                y: -0.2, duration: 1,\r\n            });\r\n\r\n            animate(projectDescription.current.children[0].material, { opacity: 0.5 }, 3);\r\n\r\n            setVisible(true);\r\n        } else {\r\n            vidPlayer.pause();\r\n\r\n            timeline.to(project.current.position, { x: x, y: y, z: -18 })\r\n            timeline.to(project.current.rotation, { y: 0, duration: 1 });\r\n            timeline.to(project.current.scale, { x: 1, y: 1, z: 1, duration: 1 });\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0, duration: 3 });\r\n\r\n            setVisible(false);\r\n        }\r\n    }, [active])\r\n\r\n    useEffect(() => {\r\n        if (!project.current) return;\r\n\r\n        if (focus) {\r\n            animate(project.current.position, { x: x, y: y - 0.1, z: -18 }, 3, 'expo.out');\r\n            animate(project.current.children[1].material, { opacity: 1 }, 3, 'expo.out', () => { project.current.children[0].visible = true; setClickable(true) });\r\n        } else {\r\n            animate(project.current.position, { x: rand(x - 2, x + 2), y: rand(y - 2, y + 2), z: -18 }, 3, 'expo.out');\r\n            animate(project.current.children[1].material, { opacity: 0 }, 3, 'expo.out', () => project.current.children[0].visible = false, null, () => setClickable(false));\r\n        }\r\n    }, [focus])\r\n\r\n    const rand = (a: number, b: number) => a + (b - a) * Math.random();\r\n\r\n    const preventAnimation = () => {\r\n        if (timeline.isActive()) timeline.clear();\r\n    }\r\n\r\n    const onSelected = (e: ThreeEvent<MouseEvent>) => {\r\n        if (fullScreen || !clickable) return;\r\n\r\n        e.stopPropagation();\r\n        preventAnimation();\r\n        setHovered(false);\r\n        onClick(id);\r\n    }\r\n\r\n    const onExit = () => {\r\n        preventAnimation();\r\n        setHovered(false);\r\n        onClick(null);\r\n    }\r\n\r\n    const onEnterPreviewMode = (e: ThreeEvent<MouseEvent>) => {\r\n        if (!active) return;\r\n\r\n        e.stopPropagation();\r\n        preventAnimation();\r\n\r\n        if (medium === 'desktop')\r\n            timeline.to(project.current.position, { x: 15, y: 0, z: -16.5 });\r\n        else\r\n            timeline.to(project.current.position, { x: 15, y: 0, z: -17.1 });\r\n\r\n        timeline.to(project.current.rotation, {\r\n            y: 0,\r\n            duration: 1,\r\n            onComplete: () => setEnteredPreviewMode(true)\r\n        });\r\n\r\n        animate(projectDescription.current.children[0].material, { opacity: 0 }, 3);\r\n\r\n        setVisible(false);\r\n    }\r\n\r\n    const onExitPreviewMode = (e: ThreeEvent<MouseEvent>) => {\r\n        if (!active) return;\r\n\r\n        e.stopPropagation();\r\n        preventAnimation();\r\n\r\n        setEnteredPreviewMode(false);\r\n\r\n        if (medium === 'desktop')\r\n            timeline.to(project.current.position, { x: 16, y: 0, z: -17.5 });\r\n        else\r\n            timeline.to(project.current.position, { x: 16.5, y: 0, z: -17.5 });\r\n\r\n        timeline.to(project.current.rotation, { y: -0.2, duration: 1 });\r\n        animate(projectDescription.current.children[0].material, { opacity: 0.5 }, 3);\r\n\r\n        setVisible(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <group\r\n                ref={project}\r\n                onClick={fullScreen ? (e) => onEnterPreviewMode(e) : (e) => onSelected(e)}\r\n                onPointerMissed={fullScreen ? (e) => onExitPreviewMode(e) : null}\r\n                onPointerOver={enteredPreviewMode ? () => setHovered(false) : () => setHovered(true)}\r\n                onPointerOut={enteredPreviewMode ? () => setHovered(true) : () => setHovered(false)}\r\n            >\r\n                <primitive\r\n                    visible={false}\r\n                    object={vidObject}\r\n                    position-z={0.08}\r\n                />\r\n                <RoundedBox args={medium === 'desktop' ? [2, 1, 0.1] : [1, 2, 0.1]}>\r\n                    <meshPhongMaterial\r\n                        attach='material'\r\n                        color='#000'\r\n                        opacity={0}\r\n                        transparent={true}\r\n                    />\r\n                </RoundedBox>\r\n            </group>\r\n            <group\r\n                ref={projectDescription}\r\n                position={[14.3, 0, -16]}\r\n                visible={visible}\r\n            >\r\n                <mesh>\r\n                    <planeBufferGeometry args={[1.5, 1.5]} />\r\n                    <meshStandardMaterial\r\n                        color='#000'\r\n                        transparent\r\n                    />\r\n                </mesh>\r\n                <group>\r\n                    <Text\r\n                        color='#d4af37'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.08}\r\n                        maxWidth={1.5}\r\n                        textAlign='center'\r\n                        anchorY={-0.7}\r\n                        layers={1}\r\n                    >\r\n                        {t(`projectTitles.${id}`)}\r\n                    </Text>\r\n                    <Text\r\n                        color='#fff'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.06}\r\n                        maxWidth={1}\r\n                        textAlign='center'\r\n                        anchorY={-0.5}\r\n                        lineHeight={2}\r\n                        layers={1}\r\n                    >\r\n                        {t(`projectDesc.${id}`)}\r\n                    </Text>\r\n                    <Html\r\n                        center\r\n                        position-y={-0.3}\r\n                        style={\r\n                            {\r\n                                visibility: visible ? 'visible' : 'hidden',\r\n                            }\r\n                        }\r\n                    >\r\n                        <section className='links'>\r\n                            <p>GitHub: <a href={github}>{github}</a></p>\r\n                            <p>Live: <a href={preview}>{preview}</a></p>\r\n                        </section>\r\n\r\n                    </Html>\r\n                </group>\r\n                {logos.map((logo: string, index: number) => {\r\n                    const texture = new TextureLoader().load(`images/logos/${logo}.png`);\r\n\r\n                    return (\r\n                        <Fragment key={index}>\r\n                            <mesh\r\n                                position-x={0.5 * (index % 3) - 0.5}\r\n                                position-y={index < 3 ? -0.5 : -0.7}\r\n                            >\r\n                                <planeBufferGeometry args={[0.25, 0.1]} />\r\n                                <meshStandardMaterial map={texture} transparent />\r\n                            </mesh>\r\n                        </Fragment>\r\n                    )\r\n                })}\r\n            </group>\r\n            {\r\n                fullScreen &&\r\n                <Text\r\n                    ref={exit}\r\n                    position={[16.8, -1, -16.5]}\r\n                    color='#d4af37'\r\n                    font='fonts/Oswald.ttf'\r\n                    fontSize={0.2}\r\n                    onClick={() => onExit()}\r\n                    layers={1}\r\n                >\r\n                    {t('exit')}\r\n                </Text>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Project;","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Objects.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Texts.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Globe.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Model.tsx",["120"],"import React, { forwardRef, useEffect, useState } from 'react';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { RoughnessMipmapper } from 'three-stdlib';\r\nimport { Group, Mesh, MeshStandardMaterial } from 'three';\r\nimport { MeshProps, useThree } from '@react-three/fiber';\r\n\r\ninterface ModelItem extends MeshProps {\r\n    path: string;\r\n}\r\n\r\nconst Model = forwardRef((props: ModelItem, ref): JSX.Element => {\r\n    const [gltf, set] = useState<Group>(null);\r\n    const { gl } = useThree();\r\n\r\n    useEffect(() => {\r\n        // use of RoughnessMipmapper is optional\r\n        const roughnessMipmapper = new RoughnessMipmapper(gl);\r\n\r\n        const loader = new GLTFLoader().setPath('models/');\r\n\r\n        loader.load(props.path, (gltf) => {\r\n            gltf.scene.traverse((child) => {\r\n                if ((child as Mesh).isMesh) {\r\n                    (child as Mesh).material = new MeshStandardMaterial({\r\n                        color: '#000',\r\n                        metalness: 5,\r\n                        roughness: 0\r\n                    })\r\n\r\n                    // @ts-ignore: Unreachable code error\r\n                    if (child.material.map) child.material.map.anisotropy = 16;\r\n                    roughnessMipmapper.generateMipmaps((child as Mesh).material as MeshStandardMaterial);\r\n                }\r\n            });\r\n            roughnessMipmapper.dispose();\r\n            set(gltf.scene)\r\n        })\r\n    }, [props.path])\r\n\r\n    return gltf &&\r\n        <primitive\r\n            {...props}\r\n            ref={ref}\r\n            object={gltf}\r\n            dispose={null}\r\n        />\r\n})\r\n\r\nexport default Model;","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\hooks\\useMousePosition.tsx",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":10,"column":23,"nodeType":"127","messageId":"128","endLine":10,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":46,"column":8,"nodeType":"131","endLine":46,"endColumn":41,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":33,"column":8,"nodeType":"131","endLine":33,"endColumn":15,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"135","line":53,"column":8,"nodeType":"131","endLine":53,"endColumn":10,"suggestions":"136"},{"ruleId":"129","severity":1,"message":"137","line":65,"column":8,"nodeType":"131","endLine":65,"endColumn":17,"suggestions":"138"},{"ruleId":"129","severity":1,"message":"139","line":104,"column":8,"nodeType":"131","endLine":104,"endColumn":16,"suggestions":"140"},{"ruleId":"129","severity":1,"message":"141","line":116,"column":8,"nodeType":"131","endLine":116,"endColumn":15,"suggestions":"142"},{"ruleId":"129","severity":1,"message":"143","line":38,"column":8,"nodeType":"131","endLine":38,"endColumn":20,"suggestions":"144"},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"@typescript-eslint/no-unused-vars","'OrbitControls' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'adjustCanvasSize'. Either include it or remove the dependency array.","ArrayExpression",["147"],"React Hook useLayoutEffect has a missing dependency: 'timeline'. Either include it or remove the dependency array.",["148"],"React Hook useMemo has missing dependencies: 'medium' and 'vidPlayer'. Either include them or remove the dependency array.",["149"],"React Hook useEffect has missing dependencies: 'active' and 'fullScreen'. Either include them or remove the dependency array.",["150"],"React Hook useEffect has missing dependencies: 'medium', 'name', 'timeline', 'vidPlayer', 'x', and 'y'. Either include them or remove the dependency array.",["151"],"React Hook useEffect has missing dependencies: 'x' and 'y'. Either include them or remove the dependency array.",["152"],"React Hook useEffect has a missing dependency: 'gl'. Either include it or remove the dependency array.",["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},"Update the dependencies array to be: [canvas.clientWidth, camera, gl, adjustCanvasSize]",{"range":"168","text":"169"},"Update the dependencies array to be: [focus, timeline]",{"range":"170","text":"171"},"Update the dependencies array to be: [medium, vidPlayer]",{"range":"172","text":"173"},"Update the dependencies array to be: [active, fullScreen, hovered]",{"range":"174","text":"175"},"Update the dependencies array to be: [active, medium, name, timeline, vidPlayer, x, y]",{"range":"176","text":"177"},"Update the dependencies array to be: [focus, x, y]",{"range":"178","text":"179"},"Update the dependencies array to be: [gl, props.path]",{"range":"180","text":"181"},[1807,1840],"[canvas.clientWidth, camera, gl, adjustCanvasSize]",[1393,1400],"[focus, timeline]",[2212,2214],"[medium, vidPlayer]",[2599,2608],"[active, fullScreen, hovered]",[4117,4125],"[active, medium, name, timeline, vidPlayer, x, y]",[4806,4813],"[focus, x, y]",[1454,1466],"[gl, props.path]"]
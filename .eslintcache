[{"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts":"1","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx":"2","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx":"3","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\constant.ts":"4","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\pass.ts":"5","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx":"6","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\main\\App.tsx":"7","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\internationalization\\i18n.ts":"8","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\Scene.tsx":"9","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\hooks\\useMousePosition.tsx":"10","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Effects.tsx":"11","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\SceneController.tsx":"12","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\contact\\Contact.tsx":"13","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\projects\\Projects.tsx":"14","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\education\\Education.tsx":"15","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\navigation\\Navbar.tsx":"16","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Home.tsx":"17","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Loader.tsx":"18","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\functions.ts":"19"},{"size":440,"mtime":1614182950498,"results":"20","hashOfConfig":"21"},{"size":1085,"mtime":1625681721538,"results":"22","hashOfConfig":"21"},{"size":931,"mtime":1625681752763,"results":"23","hashOfConfig":"21"},{"size":143,"mtime":1625666555056,"results":"24","hashOfConfig":"21"},{"size":2161,"mtime":1625670862307,"results":"25","hashOfConfig":"21"},{"size":1199,"mtime":1626183085368,"results":"26","hashOfConfig":"21"},{"size":2614,"mtime":1626183566547,"results":"27","hashOfConfig":"21"},{"size":837,"mtime":1626182987337,"results":"28","hashOfConfig":"21"},{"size":2855,"mtime":1626183248039,"results":"29","hashOfConfig":"21"},{"size":763,"mtime":1626182523356,"results":"30","hashOfConfig":"21"},{"size":2397,"mtime":1626183475032,"results":"31","hashOfConfig":"21"},{"size":1609,"mtime":1626183452494,"results":"32","hashOfConfig":"21"},{"size":4162,"mtime":1626183575147,"results":"33","hashOfConfig":"21"},{"size":14773,"mtime":1626183555672,"results":"34","hashOfConfig":"21"},{"size":3306,"mtime":1626183273803,"results":"35","hashOfConfig":"21"},{"size":5050,"mtime":1626183589713,"results":"36","hashOfConfig":"21"},{"size":10578,"mtime":1626183499126,"results":"37","hashOfConfig":"21"},{"size":510,"mtime":1626182799450,"results":"38","hashOfConfig":"21"},{"size":1782,"mtime":1626182797362,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"g7aof9",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts",[],["89","90"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx",["91"],"import { GUI } from 'dat.gui';\r\nimport * as dat from 'dat.gui';\r\nimport React, { createContext, Dispatch, useReducer } from 'react';\r\nimport { Camera } from 'three';\r\nimport { sceneReducer, SceneActions } from './reducers';\r\n\r\nexport type SceneType = {\r\n    currentItem: string;\r\n    fullScreen: boolean;\r\n    gui: GUI;\r\n}\r\n\r\ntype InitialStateType = {\r\n    scene: SceneType;\r\n}\r\n\r\nconst initialState = {\r\n    scene: { currentItem: 'home.end', fullScreen: false, gui: new dat.GUI() }\r\n}\r\n\r\nconst AppContext = createContext<{\r\n    state: InitialStateType;\r\n    dispatch: Dispatch<SceneActions>;\r\n}>({\r\n    state: initialState,\r\n    dispatch: () => null\r\n});\r\n\r\nconst mainReducer = ({ scene }: InitialStateType, action: SceneActions) => ({\r\n    scene: sceneReducer(scene, action),\r\n});\r\n\r\nconst AppProvider: React.FC = ({ children }) => {\r\n    const [state, dispatch] = useReducer(mainReducer, initialState);\r\n\r\n    return (\r\n        <AppContext.Provider value={{ state, dispatch }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n\r\nexport { AppContext, AppProvider };","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx",["92"],"import { Camera } from \"three\";\r\nimport { SceneType } from \"./index\";\r\n\r\ntype ActionMap<M extends { [index: string]: any }> = {\r\n    [Key in keyof M]: M[Key] extends undefined\r\n    ? {\r\n        type: Key;\r\n    }\r\n    : {\r\n        type: Key;\r\n        payload: M[Key];\r\n    }\r\n};\r\n\r\nexport enum Types {\r\n    SetCurrentItem = 'SET_CURRENT_ELEMENT',\r\n    SetFullScreen = 'SET_FULL_SCREEN'\r\n}\r\n\r\ntype ScenePayload = {\r\n    [Types.SetCurrentItem]: string;\r\n    [Types.SetFullScreen]: boolean;\r\n}\r\n\r\nexport type SceneActions = ActionMap<ScenePayload>[keyof ActionMap<ScenePayload>];\r\n\r\nexport const sceneReducer = (state: SceneType, action: SceneActions) => {\r\n    switch (action.type) {\r\n        case Types.SetCurrentItem:\r\n            return { ...state, currentItem: action.payload };\r\n        case Types.SetFullScreen:\r\n            return { ...state, fullScreen: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\constant.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\pass.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\main\\App.tsx",["93","94","95","96","97"],"import React, { useContext, useMemo, useRef } from 'react';\r\nimport '../styles/app.css';\r\nimport { AppContext } from '../context';\r\nimport { Types } from '../context/reducers';\r\nimport { Canvas, useFrame } from 'react-three-fiber';\r\nimport Navbar from '../navigation/Navbar';\r\nimport Scene from '../scene/Scene';\r\nimport { Stats, useContextBridge } from '@react-three/drei';\r\nimport useMousePosition from '../hooks/useMousePosition';\r\nimport Effects from '../components/Effects';\r\nimport { ACESFilmicToneMapping, ReinhardToneMapping } from 'three';\r\n\r\nconst Particles = (): JSX.Element => {\r\n  const particles = useRef(null);\r\n  const { x, y } = useMousePosition('2D');\r\n  const [coords] = useMemo(() => {\r\n    const particlesCnt: number = 5000;\r\n    const posArray = new Float32Array(particlesCnt * 3);\r\n    for (let i = 0; i < particlesCnt * 3; i++) {\r\n      posArray[i] = (Math.random() - 0.5) * 100;\r\n    }\r\n    return [posArray]\r\n  }, [])\r\n\r\n  useFrame((state) => {\r\n    if (particles.current) {\r\n      particles.current.rotation.y = -0.1 * state.clock.getElapsedTime();\r\n      if (x > 0) {\r\n        particles.current.rotation.x = -y * (state.clock.getElapsedTime() * 0.000001);\r\n        particles.current.rotation.y = x * (state.clock.getElapsedTime() * 0.000001);\r\n      }\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <points ref={particles}>\r\n        <bufferGeometry>\r\n          <bufferAttribute\r\n            attachObject={[\"attributes\", \"position\"]}\r\n            count={coords.length / 3}\r\n            array={coords}\r\n            itemSize={3}\r\n          />\r\n        </bufferGeometry>\r\n        <pointsMaterial\r\n          sizeAttenuation\r\n          attach=\"material\"\r\n          color='#fff'\r\n          opacity={0}\r\n          size={0.005}\r\n        />\r\n      </points>\r\n    </>\r\n  )\r\n}\r\n\r\nconst App = (): JSX.Element => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const ContextBridge = useContextBridge(AppContext);\r\n\r\n  return (\r\n    <>\r\n      <Canvas\r\n        gl={{ antialias: true }}\r\n        pixelRatio={window.devicePixelRatio}\r\n        colorManagement={false}\r\n        shadowMap\r\n        style={{ width: '100vw', height: '100vh' }}\r\n        onCreated={({ camera, gl, raycaster }) => {\r\n          // camera.position.set(15, 0, -15);\r\n          raycaster.layers.enableAll();\r\n          gl.toneMapping = ACESFilmicToneMapping;\r\n          gl.toneMappingExposure = 1;\r\n        }}\r\n      >\r\n        <ContextBridge>\r\n          <Scene />\r\n        </ContextBridge>\r\n        {/* <Particles /> */}\r\n        <Effects />\r\n      </Canvas>\r\n      <Stats showPanel={0} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\internationalization\\i18n.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\Scene.tsx",["98","99"],"import React, { useEffect } from 'react';\r\nimport Home from '../home/Home';\r\nimport Education from '../education/Education';\r\nimport Projects from '../projects/Projects';\r\nimport Contact from '../contact/Contact';\r\nimport SceneController from './SceneController';\r\nimport { OrbitControls } from '@react-three/drei/core/OrbitControls';\r\nimport { useRef } from 'react';\r\nimport { useFrame, useThree } from 'react-three-fiber';\r\nimport Navbar from '../navigation/Navbar';\r\n\r\n// const Skybox = React.memo(() => {\r\n//     console.log('skybox rendered');\r\n//     const textures: Array<string> = [\r\n//         'images/textures/skybox/space_ft.png',\r\n//         'images/textures/skybox/space_bk.png',\r\n//         'images/textures/skybox/space_up.png',\r\n//         'images/textures/skybox/space_dn.png',\r\n//         'images/textures/skybox/space_rt.png',\r\n//         'images/textures/skybox/space_lf.png'\r\n//     ];\r\n\r\n//     return <mesh>\r\n//         <boxBufferGeometry args={[1000, 1000, 1000]} />\r\n//         {\r\n//             textures.map((value: string, i: number) => {\r\n//                 const texture = new TextureLoader().load(value);\r\n//                 console.log(texture);\r\n//                 return <meshBasicMaterial key={i} attachArray='material' map={texture} side={BackSide} />;\r\n//             })\r\n//         }\r\n//     </mesh>\r\n// })\r\n\r\nconst navbar_items: Array<NavbarItem> = [\r\n    { id: 0, name: 'education' },\r\n    { id: 1, name: 'projects' },\r\n    { id: 2, name: 'contact' },\r\n]\r\n\r\nexport interface NavbarItem {\r\n    id: number,\r\n    name: string,\r\n}\r\n\r\nconst Scene = (): JSX.Element => {\r\n    console.log('scene rendered');\r\n    const light = useRef(null);\r\n    const { camera } = useThree();\r\n\r\n    useEffect(() => {\r\n        if (light.current) {\r\n            light.current.position.set(\r\n                camera.position.x + 10,\r\n                camera.position.y + 10,\r\n                camera.position.z + 10\r\n            )\r\n            console.log(light.current.position)\r\n        }\r\n    }, [camera.position])\r\n\r\n    return (\r\n        <>\r\n            <Navbar items={navbar_items} />\r\n            <Home />\r\n            <Education />\r\n            <Projects />\r\n            <Contact />\r\n            {/* <directionalLight position={[0, 1, 1]} intensity={1} color={'#fff'} /> */}\r\n            <hemisphereLight args={['#fff', '#d4af37', 4]} />\r\n            <spotLight\r\n                ref={light}\r\n                args={['#fff', 2]}\r\n                castShadow={true}\r\n                shadow-bias={-0.0001}\r\n                shadow-mapSize-width={1024 * 4}\r\n                shadow-mapSize-height={1024 * 4}\r\n            />\r\n            <SceneController />\r\n            {/* <Suspense fallback={null}>\r\n                <Skybox />\r\n            </Suspense> */}\r\n            {/* <OrbitControls /> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Scene;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\hooks\\useMousePosition.tsx",["100"],"import { useState, useEffect } from 'react';\r\n\r\nconst useMousePosition = (world: string) => {\r\n    const [mousePosition, setMousePosition] = useState<{ x: number, y: number }>({ x: null, y: null });\r\n\r\n    const updateMousePosition = ev => {\r\n        setMousePosition(\r\n            {\r\n                x: world === '2D' ? ev.clientX : (ev.clientX / window.innerWidth) * 2 - 1,\r\n                y: world === '2D' ? ev.clientY : -(ev.clientY / window.innerWidth) * 2 + 1\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('mousemove', updateMousePosition);\r\n\r\n        return () => window.removeEventListener('mousemove', updateMousePosition);\r\n    }, []);\r\n\r\n    return mousePosition;\r\n};\r\n\r\nexport default useMousePosition;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Effects.tsx",["101","102","103","104","105","106","107","108","109"],"import React, { useRef, useMemo, useEffect, useState } from 'react'\r\nimport { useThree, useFrame } from 'react-three-fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { Vector2 } from 'three/src/math/Vector2'\r\nimport {\r\n    DEFAULT_LAYER_NUM,\r\n    BLOOM_LAYER_NUM,\r\n    FILM_LAYER_NUM,\r\n    MULTIPASS_LAYER_NUM\r\n} from \"../postprocessing/constant\";\r\nimport { createRenderPass, bloomPass, filmPass, createFinalPass } from \"../postprocessing/pass\";\r\n\r\nconst Effects = (): JSX.Element => {\r\n    const { scene, gl, size, camera } = useThree()\r\n    const [bloomComposer, setBloomComposer] = useState<EffectComposer>(null);\r\n    const [finalComposer, setFinalComposer] = useState<EffectComposer>(null);\r\n\r\n    useMemo(() => {\r\n        const renderPass = createRenderPass(scene, camera);\r\n\r\n        // setup bloom composer\r\n        const bloomComposer = new EffectComposer(gl);\r\n        bloomComposer.renderToScreen = false;\r\n        bloomComposer.addPass(renderPass);\r\n        bloomComposer.addPass(bloomPass);\r\n\r\n        // setup film composer\r\n        // const filmComposer = new EffectComposer(gl);\r\n        // filmComposer.renderToScreen = false;\r\n        // filmComposer.addPass(renderPass);\r\n        // filmComposer.addPass(filmPass);\r\n\r\n        // setup composer with multiple passes\r\n        // const multipassComposer = new EffectComposer(gl);\r\n        // multipassComposer.renderToScreen = false;\r\n        // multipassComposer.addPass(renderPass);\r\n        // multipassComposer.addPass(bloomPass);\r\n        // multipassComposer.addPass(filmPass);\r\n\r\n        // setup final composer\r\n        const finalComposer = new EffectComposer(gl);\r\n        finalComposer.addPass(renderPass);\r\n        const finalPass = createFinalPass(\r\n            bloomComposer,\r\n            // filmComposer,\r\n            // multipassComposer\r\n        );\r\n        finalComposer.addPass(finalPass);\r\n\r\n        gl.autoClear = false;\r\n\r\n        setBloomComposer(bloomComposer);\r\n        setFinalComposer(finalComposer);\r\n    }, [])\r\n\r\n    useFrame(() => {\r\n        gl.clear();\r\n\r\n        camera.layers.set(BLOOM_LAYER_NUM);\r\n        bloomComposer.swapBuffers();\r\n        bloomComposer.render();\r\n\r\n        camera.layers.set(DEFAULT_LAYER_NUM);\r\n        finalComposer.swapBuffers();\r\n        finalComposer.render();\r\n    })\r\n\r\n    return null;\r\n}\r\n\r\nexport default Effects;\r\n","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\SceneController.tsx",["110"],"import { useContext, useEffect } from 'react';\r\nimport { AppContext } from '../context';\r\nimport gsap from 'gsap';\r\nimport { Types } from '../context/reducers';\r\nimport { useThree } from 'react-three-fiber';\r\n\r\nconst SceneController = (): JSX.Element => {\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { camera } = useThree();\r\n    const { currentItem } = state.scene;\r\n\r\n    const onNavigationEnded = (name: string) => {\r\n        dispatch({\r\n            type: Types.SetCurrentItem,\r\n            payload: name,\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        switch (currentItem) {\r\n            case 'home.to':\r\n                camera && gsap.to(camera.position, { x: 0, y: 0, z: 5, duration: 3, ease: 'expo.out', onComplete: () => onNavigationEnded('home.end') });\r\n                break;\r\n            case 'education.to':\r\n                camera && gsap.to(camera.position, { x: 0, y: 0, z: -15, duration: 3, ease: 'expo.out', onComplete: () => onNavigationEnded('education.end') });\r\n                break;\r\n            case 'projects.to':\r\n                camera && gsap.to(camera.position, { x: 15, y: 0, z: -15, duration: 3, ease: 'expo.out', onComplete: () => onNavigationEnded('projects.end') });\r\n                break;\r\n            case 'contact.to':\r\n                camera && gsap.to(camera.position, { x: 15, y: 0, z: 5, duration: 3, ease: 'expo.out', onComplete: () => onNavigationEnded('contact.end') });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [currentItem])\r\n\r\n    return null;\r\n}\r\n\r\nexport default SceneController;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\contact\\Contact.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\projects\\Projects.tsx",["111","112","113","114","115","116","117","118"],"import React, { useContext, useRef, useState, useEffect, Suspense, useMemo, Fragment } from 'react';\r\nimport { useLoader } from 'react-three-fiber'\r\nimport { AppContext } from '../context';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { RoundedBox, Text } from '@react-three/drei';\r\nimport { Types } from '../context/reducers';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Loader from '../components/Loader';\r\nimport gsap from 'gsap';\r\nimport { Color, DoubleSide, FrontSide, Mesh, PlaneGeometry, ShaderMaterial, Vector2, VideoTexture } from 'three';\r\nimport videoVertexShader from '../shaders/videoVertex.glsl';\r\nimport videoFragmentShader from '../shaders/videoFragment.glsl';\r\n\r\ninterface ProjectItem {\r\n    id: number,\r\n    name: string,\r\n    logos: Array<string>,\r\n    medium: string,\r\n    preview: string,\r\n    x: number,\r\n    y: number,\r\n    active: boolean,\r\n    focus?: boolean,\r\n    onClick?: (id: number) => void,\r\n}\r\n\r\nconst Project = ({ id, name, logos, medium, preview, x, y, active, focus, onClick }: ProjectItem): JSX.Element => {\r\n    const { state } = useContext(AppContext);\r\n    const { fullScreen, gui } = state.scene;\r\n    const { t } = useTranslation();\r\n    const [hovered, setHovered] = useState<boolean>(false);\r\n    const [vidPlayer] = useState(() => {\r\n        const vid = document.createElement('video');\r\n        vid.crossOrigin = 'Anonymous';\r\n        vid.loop = true;\r\n        vid.controls = true;\r\n        return vid;\r\n    });\r\n    const [vidObject] = useMemo(() => {\r\n        const geometry = medium === 'desktop' ? new PlaneGeometry(1.8, 0.8) : new PlaneGeometry(0.8, 1.8);\r\n        const uniforms = {\r\n            u_tex: { value: new VideoTexture(vidPlayer) },\r\n            u_adjust_uv: { value: new Vector2(1, 1) }\r\n        }\r\n        const material = new ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: videoVertexShader,\r\n            fragmentShader: videoFragmentShader\r\n        });\r\n\r\n        const video = new Mesh(geometry, material);\r\n        return [video];\r\n    }, []);\r\n    const project = useRef(null);\r\n    const projectDescription = useRef(null);\r\n    const exit = useRef(null);\r\n    const normalMap1 = useLoader(TextureLoader, 'images/textures/nm1.jpg');\r\n    // const normalMap2 = useLoader(TextureLoader, 'images/textures/nm2.jpg');\r\n    const timeline = gsap.timeline();\r\n    const [enteredPreviewMode, setEnteredPreviewMode] = useState<boolean>(false);\r\n\r\n    // useEffect(() => {\r\n    //     project.current && gui.add(project.current.rotation, 'x').min(0).max(360)\r\n    //     project.current && gui.add(project.current.rotation, 'y').min(0).max(360)\r\n    //     project.current && gui.add(project.current.rotation, 'z').min(0).max(360)\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        document.body.style.cursor = hovered ? 'pointer' : 'auto';\r\n        hovered ?\r\n            project.current && gsap.to(project.current.scale, { duration: 1, ease: 'expo.out', x: 1.1, y: 1.1 }) :\r\n            project.current && gsap.to(project.current.scale, { duration: 1, ease: 'expo.out', x: 1, y: 1 });\r\n    }, [hovered])\r\n\r\n    useEffect(() => {\r\n        if (active) {\r\n            if (vidPlayer) {\r\n                if (vidPlayer.readyState < 3) {\r\n                    vidPlayer.src = `videos/${name}.mp4`;\r\n                    vidPlayer.load();\r\n                    vidPlayer.onerror = () => console.log(`${name} error ${vidPlayer.error.code}; details: ${vidPlayer.error.message}`);\r\n                }\r\n                vidPlayer.play();\r\n            }\r\n            if (medium === 'desktop') {\r\n                timeline.to(project.current.position, { x: 16, y: 0, z: -17.5 });\r\n                timeline.to(project.current.scale, { x: 2, y: 2, z: 2, duration: 1 });\r\n            } else {\r\n                timeline.to(project.current.position, { x: 16.5, y: 0, z: -17.5 });\r\n                timeline.to(project.current.scale, { x: 1.6, y: 1.6, z: 1.6, duration: 1 });\r\n            }\r\n            timeline.to(project.current.rotation, { y: -0.2, duration: 1, onComplete: () => setEnteredPreviewMode(true) });\r\n            projectDescription.current.visible = true;\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0.5, duration: 3 });\r\n        }\r\n        if (!active) {\r\n            setEnteredPreviewMode(false);\r\n            if (vidPlayer) vidPlayer.pause();\r\n            timeline.to(project.current.position, { x: x, y: y, z: -18 })\r\n            timeline.to(project.current.rotation, { y: 0, duration: 1 });\r\n            timeline.to(project.current.scale, { x: 1, y: 1, z: 1, duration: 1 });\r\n            projectDescription.current.visible = false;\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0, duration: 3 });\r\n        }\r\n    }, [active])\r\n\r\n    // useEffect(() => {\r\n    //     focus ?\r\n    //         project.current && gsap.to(project.current.position, { duration: 5, ease: 'expo.out', x: 0, y: 0, z: 0 }) :\r\n    //         project.current && gsap.to(project.current.position, { duration: 5, ease: 'expo.out', x: generateNumber(-2, 2), y: generateNumber(-2, 2), z: generateNumber(-2, 2) });\r\n    // }, [focus])\r\n\r\n    // const generateNumber = (min: number, max: number) => {\r\n    //     min = Math.ceil(min);\r\n    //     max = Math.floor(max);\r\n    //     return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    // }\r\n\r\n    const onSelected = () => {\r\n        setHovered(false);\r\n        onClick(id);\r\n    }\r\n\r\n    const onExit = () => {\r\n        setHovered(false);\r\n        onClick(null);\r\n    }\r\n\r\n    const onEnterPreviewMode = () => {\r\n        if (enteredPreviewMode) {\r\n            if (medium === 'desktop')\r\n                timeline.to(project.current.position, { x: 15, y: 0, z: -16.5 });\r\n            else\r\n                timeline.to(project.current.position, { x: 15, y: 0, z: -17.1 });\r\n            timeline.to(project.current.rotation, { y: 0, duration: 1 });\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0, duration: 3 });\r\n            projectDescription.current.visible = false;\r\n        }\r\n    }\r\n\r\n    const onExitPreviewMode = () => {\r\n        if (enteredPreviewMode) {\r\n            if (medium === 'desktop')\r\n                timeline.to(project.current.position, { x: 16, y: 0, z: -17.5 });\r\n            else\r\n                timeline.to(project.current.position, { x: 16.5, y: 0, z: -17.5 });\r\n            timeline.to(project.current.rotation, { y: -0.2, duration: 1 });\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0.5, duration: 3 });\r\n            projectDescription.current.visible = true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <group\r\n                ref={project}\r\n                position={[x, y - 0.1, -18]}\r\n                onClick={fullScreen ? null : onSelected}\r\n                onPointerOver={fullScreen ? () => onEnterPreviewMode() : () => setHovered(true)}\r\n                onPointerOut={fullScreen ? () => onExitPreviewMode() : () => setHovered(false)}\r\n            >\r\n                <primitive object={vidObject} position-z={0.08} />\r\n                <RoundedBox args={medium == 'desktop' ? [2, 1, 0.1] : [1, 2, 0.1]}>\r\n                    <meshPhongMaterial attach=\"material\" color=\"#000\" />\r\n                </RoundedBox>\r\n            </group>\r\n            <group\r\n                ref={projectDescription}\r\n                position={[14.3, 0, -16]}\r\n                visible={false}\r\n            >\r\n                <mesh>\r\n                    <planeBufferGeometry args={[1.5, 1.5]} />\r\n                    <meshStandardMaterial\r\n                        map={normalMap1}\r\n                        color='#000'\r\n                        transparent\r\n                    />\r\n                </mesh>\r\n                <group>\r\n                    <Text\r\n                        color='#d4af37'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.1}\r\n                        maxWidth={1.5}\r\n                        textAlign='center'\r\n                        anchorY={-0.7}\r\n                        layers={[1]}\r\n                    >\r\n                        {t(`projectTitles.${id}`)}\r\n                    </Text>\r\n                    <Text\r\n                        color='#fff'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.08}\r\n                        maxWidth={1}\r\n                        textAlign='center'\r\n                        anchorY={-0.5}\r\n                        lineHeight={2}\r\n                        layers={[1]}\r\n                    >\r\n                        {t(`projectDesc.${id}`)}\r\n                    </Text>\r\n                    <Text\r\n                        color='#fff'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.06}\r\n                        maxWidth={1}\r\n                        textAlign='center'\r\n                        anchorY={0.3}\r\n                        lineHeight={2}\r\n                        layers={[1]}\r\n                    >\r\n                        {preview}\r\n                    </Text>\r\n                </group>\r\n                {logos.map((logo: string, index: number) => {\r\n                    const texture = new TextureLoader().load(`images/logos/${logo}.png`);\r\n\r\n                    return (\r\n                        <Fragment key={index}>\r\n                            <mesh\r\n                                position-x={0.5 * (index % 3) - 0.5}\r\n                                position-y={index < 3 ? -0.5 : -0.7}\r\n                            >\r\n                                <planeBufferGeometry args={[0.2, 0.1]} />\r\n                                <meshStandardMaterial map={texture} transparent />\r\n                            </mesh>\r\n                        </Fragment>\r\n                    )\r\n                })}\r\n            </group>\r\n            {\r\n                fullScreen &&\r\n                <Text\r\n                    ref={exit}\r\n                    position={[17, -1, -16.5]}\r\n                    color='#d4af37'\r\n                    font='fonts/Oswald.ttf'\r\n                    fontSize={0.2}\r\n                    onClick={onExit}\r\n                >\r\n                    {t('exit')}\r\n                </Text>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst Projects = React.memo(() => {\r\n    console.log('projects rendered');\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n    const [projectItems, setProjectItems] = useState<Array<ProjectItem>>([\r\n        { id: 0, name: 'gfe', logos: ['vue', 'uikit', 'firebase'], medium: 'desktop', preview: 'http://www.gfe.agh.edu.pl', x: 12, y: 1, active: false },\r\n        { id: 1, name: 'stalcraft', logos: ['angular', 'node'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Stalcraft', x: 14.5, y: 1, active: false },\r\n        { id: 2, name: 'shop', logos: ['aspnet', 'mysql'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Shop', x: 17, y: 1, active: false },\r\n        { id: 3, name: 'coronastats', logos: ['reactnative', 'redux'], medium: 'mobile', preview: 'https://github.com/kmroczek11/Coronastats', x: 19, y: 1, active: false },\r\n        { id: 4, name: 'marbles', logos: ['three', 'node', 'jquery', 'ajax', 'socketio', 'mongodb'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Marbles', x: 12, y: -1, active: false },\r\n        { id: 5, name: 'mp3player', logos: ['jquery', 'node', 'ajax'], medium: 'desktop', preview: 'https://github.com/kmroczek11/School-projects/tree/master/MP3%20Player', x: 14.5, y: -1, active: false },\r\n        { id: 6, name: 'tasky', logos: ['flutter', 'rive', 'firebase'], medium: 'mobile', preview: 'https://github.com/kmroczek11/Tasky', x: 16.5, y: -1, active: false },\r\n        // { id: 7, name: '', logos: ['react', 'sass'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Portfolio', x: 19.5, y: -1, active: false },\r\n    ]);\r\n    const [selected, setSelected] = useState<number>(null);\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        currentItem === 'projects.end' ? setFocus(true) : setFocus(false);\r\n    }, [currentItem])\r\n    // const light1 = useRef(null);\r\n    // const light2 = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // light1.current && gui.add(light1.current.position, 'x').min(10).max(20);\r\n        // light1.current && gui.add(light1.current.position, 'y').min(-5).max(5);\r\n        // light1.current && gui.add(light1.current.position, 'z').min(-20).max(-10);\r\n        // light2.current && gui.add(light2.current.position, 'x').min(10).max(20);\r\n        // light2.current && gui.add(light2.current.position, 'y').min(-5).max(5);\r\n        // light2.current && gui.add(light2.current.position, 'z').min(-20).max(-10);\r\n        // const t = new TimelineMax({yoyo:true,repeat:-1});\r\n\r\n        // light1.current && t.from(light1.current.position, {x:20, y:1, z:-16 ,ease: 'slow( 0.1, 0.7, false)', duration: 5, });\r\n        // light2.current && t.from(light2.current.position, {x:20, y:0, z:-16 ,ease: 'slow( 0.1, 0.7, false)', duration: 5, });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setProjectItems(prevProjectItems =>\r\n            prevProjectItems.map(\r\n                (e: ProjectItem) =>\r\n                    e.id === selected ?\r\n                        { ...e, active: true } : { ...e, active: false }\r\n            ));\r\n    }, [selected])\r\n\r\n    useEffect(() => {\r\n        projectItems.some((e: ProjectItem) => e.active) ?\r\n            dispatch({\r\n                type: Types.SetFullScreen,\r\n                payload: true,\r\n            }) : dispatch({\r\n                type: Types.SetFullScreen,\r\n                payload: false,\r\n            });\r\n    }, [projectItems])\r\n\r\n    return (\r\n        <>\r\n            {/* <pointLight ref={light1} color='#fff' position={[10, 0.5, -16]} intensity={5} distance={5} />\r\n            {light1.current && <pointLightHelper args={[light1.current, 0.5]} />}\r\n            <pointLight ref={light2} color='#d4af37' position={[10, 0, -16]} intensity={5} distance={5} />\r\n            {light2.current && <pointLightHelper args={[light2.current, 0.5]} />} */}\r\n            {\r\n                projectItems.map(\r\n                    (e: ProjectItem, i: number) =>\r\n                        <Suspense fallback={<Loader />}>\r\n                            <Project\r\n                                key={i}\r\n                                {...e}\r\n                                focus={focus}\r\n                                onClick={setSelected}\r\n                            />\r\n                        </Suspense>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Projects;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\education\\Education.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\navigation\\Navbar.tsx",["119","120","121","122"],"import { Fragment, memo, Suspense, useContext, useEffect, useState } from 'react';\r\nimport '../styles/navbar.css';\r\nimport { NavbarItem } from '../scene/Scene';\r\nimport { AppContext } from '../context';\r\nimport { Types } from '../context/reducers';\r\nimport { Html, Text } from '@react-three/drei';\r\nimport { MeshStandardMaterial, Shader, TextureLoader, WebGLRenderer } from 'three';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useLoader, useThree } from 'react-three-fiber';\r\nimport Loader from '../components/Loader';\r\n\r\ninterface NavProps {\r\n    items: Array<NavbarItem>\r\n}\r\n\r\ninterface LanguageItem {\r\n    imageSrc: string,\r\n    name?: string,\r\n    position?: number,\r\n    onClick?: (element: string) => void,\r\n}\r\n\r\ninterface ItemProps {\r\n    name: string,\r\n    position: number,\r\n    onClick: (element: string) => void,\r\n}\r\n\r\nconst Item = ({ name, position, onClick }: ItemProps): JSX.Element => {\r\n    const [color, setColor] = useState<string>('#fff');\r\n\r\n    return (\r\n        <Text\r\n            position-x={position}\r\n            material-depthTest={false}\r\n            // onBeforeRender={(renderer) => renderer.clearDepth()}\r\n            onClick={() => onClick(name)}\r\n            onPointerOver={() => setColor('#d4af37')}\r\n            onPointerOut={() => setColor('#fff')}\r\n            color={color}\r\n            font='fonts/Oswald.ttf'\r\n            fontSize={0.4}\r\n            layers={[1]}\r\n        >\r\n            {name}\r\n        </Text>\r\n    )\r\n}\r\n\r\nconst Language = ({ imageSrc, name, position, onClick }: LanguageItem) => {\r\n    const texture = useLoader(TextureLoader, imageSrc);\r\n\r\n    return (\r\n        <mesh position-x={position} onClick={() => onClick(name)}>\r\n            <planeBufferGeometry attach='geometry' args={[0.6, 0.6]} />\r\n            <meshBasicMaterial\r\n                attach='material'\r\n                map={texture}\r\n                depthTest={false}\r\n                transparent\r\n            />\r\n        </mesh>\r\n    )\r\n}\r\n\r\nconst Navbar = memo(({ items }: NavProps) => {\r\n    console.log('navbar rendered');\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { currentItem, fullScreen } = state.scene;\r\n    const [languages] = useState<Array<LanguageItem>>([\r\n        { name: 'pl', imageSrc: 'images/flags/poland.png' },\r\n        { name: 'en', imageSrc: 'images/flags/england.png' }\r\n    ]);\r\n    const { t, i18n } = useTranslation();\r\n    const { camera } = useThree();\r\n    const [hovered, setHovered] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        document.body.style.cursor = hovered ? 'pointer' : 'auto'\r\n    }, [hovered])\r\n\r\n    const onNavigationStarted = (name: string) => {\r\n        dispatch({\r\n            type: Types.SetCurrentItem,\r\n            payload: name,\r\n        });\r\n    }\r\n\r\n    const onLanguageChanged = (language: string) => {\r\n        i18n.changeLanguage(language);\r\n    };\r\n\r\n    return (\r\n        <group\r\n            position={[camera.position.x, 3, camera.position.z - 5]}\r\n            onPointerOver={() => setHovered(true)}\r\n            onPointerOut={() => setHovered(false)}\r\n            visible={!fullScreen && !currentItem.endsWith('to')}\r\n        >\r\n            <group onClick={() => onNavigationStarted('home.to')}>\r\n                <Text\r\n                    position-x={-5}\r\n                    color='#d4af37'\r\n                    font='fonts/Oswald.ttf'\r\n                    fontSize={1}\r\n                    material-depthTest={false}\r\n                    layers={[1]}\r\n                >\r\n                    M\r\n                </Text>\r\n                <Text\r\n                    position-x={-3}\r\n                    color='#fff'\r\n                    font='fonts/Oswald.ttf'\r\n                    fontSize={0.5}\r\n                    material-depthTest={false}\r\n                    layers={[1]}\r\n                >\r\n                    KAMIL MROCZEK\r\n                </Text>\r\n            </group>\r\n            {\r\n                items.map((item: NavbarItem, index: number) =>\r\n                    <Fragment key={index}>\r\n                        <Item\r\n                            name={t(`navItems.${index}`)}\r\n                            position={(index + 1) * 1.7}\r\n                            onClick={() => onNavigationStarted(`${item.name}.to`)}\r\n                        />\r\n                    </Fragment>\r\n                )\r\n            }\r\n            {\r\n                languages.map((language: LanguageItem, index: number) =>\r\n                    <Fragment key={index}>\r\n                        <Suspense fallback={<Loader />}>\r\n                            <Language\r\n                                imageSrc={language.imageSrc}\r\n                                name={language.name}\r\n                                position={5.5 + (index + 1) * 0.7}\r\n                                onClick={() => onLanguageChanged(language.name)}\r\n                            />\r\n                        </Suspense>\r\n                    </Fragment>\r\n                )\r\n            }\r\n        </group>\r\n    )\r\n})\r\n\r\nexport default Navbar;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Home.tsx",["123","124","125"],"import { memo, Suspense, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { useFrame, useLoader } from 'react-three-fiber'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { Vector3 } from 'three/src/math/Vector3';\r\nimport { rotateAroundPoint } from '../components/functions';\r\nimport { Sphere, Text } from '@react-three/drei';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AppContext } from '../context';\r\nimport Loader from '../components/Loader';\r\nimport gsap from 'gsap';\r\nimport globeVertexShader from '../shaders/globeVertex.glsl';\r\nimport globeFragmentShader from '../shaders/globeFragment.glsl';\r\nimport atmosphereVertexShader from '../shaders/atmosphereVertex.glsl';\r\nimport atmosphereFragmentShader from '../shaders/atmosphereFragment.glsl';\r\nimport photoVertexShader from '../shaders/photoVertex.glsl';\r\nimport photoFragmentShader from '../shaders/photoFragment.glsl';\r\nimport { AdditiveBlending, BackSide, Color, DoubleSide } from 'three';\r\nimport useMousePosition from '../hooks/useMousePosition';\r\nimport EffectText from '../components/EffectText';\r\n\r\nconst Globe = ({ focus }: { focus: boolean }): JSX.Element => {\r\n    const globe = useRef(null);\r\n    const globeController = useRef(null);\r\n    const { x, y } = useMousePosition('3D');\r\n\r\n    useFrame(() => {\r\n        if (globe.current)\r\n            globe.current.rotation.y -= 0.005;\r\n        if (globeController.current)\r\n            gsap.to(globeController.current.rotation, { x: -y * 0.3, y: x * 0.5, duration: 2 })\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <group\r\n                ref={globeController}\r\n                position={[0, 0, -6]}\r\n            >\r\n                <Sphere\r\n                    args={[5, 50, 50]}\r\n                    ref={globe}\r\n                >\r\n                    <shaderMaterial\r\n                        vertexShader={globeVertexShader}\r\n                        fragmentShader={globeFragmentShader}\r\n                        uniforms={\r\n                            {\r\n                                globeTexture: {\r\n                                    value: new TextureLoader().load('images/textures/night.jpg')\r\n                                }\r\n                            }\r\n                        }\r\n                        attach=\"material\"\r\n                    />\r\n                </Sphere>\r\n            </group>\r\n            <Sphere\r\n                args={[5, 50, 50]}\r\n                position={[0, 0, -6]}\r\n                scale={[1.1, 1.1, 1.1]}\r\n            >\r\n                <shaderMaterial\r\n                    vertexShader={atmosphereVertexShader}\r\n                    fragmentShader={atmosphereFragmentShader}\r\n                    blending={AdditiveBlending}\r\n                    side={BackSide}\r\n                    attach=\"material\"\r\n                />\r\n            </Sphere>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Texts = ({ focus }: { focus: boolean }): JSX.Element => {\r\n    const first = useRef(null);\r\n    const second = useRef(null);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (focus) {\r\n            first.current && gsap.to(first.current.position, { x: -2, y: 0, z: 0.5, duration: 5, ease: 'expo.out' });\r\n            second.current && gsap.to(second.current.position, { x: 2, y: -1, z: 0.5, duration: 5, ease: 'expo.out' });\r\n            first.current && gsap.to(first.current, { duration: 5, ease: 'expo.out', fillOpacity: 1 });\r\n            second.current && gsap.to(second.current, { duration: 5, ease: 'expo.out', fillOpacity: 1 });\r\n        } else {\r\n            first.current && gsap.to(first.current.position, { x: 0, y: 0, z: 0, duration: 5, ease: 'expo.out' });\r\n            second.current && gsap.to(second.current.position, { x: 0, y: 0, z: 0, duration: 5, ease: 'expo.out' });\r\n            first.current && gsap.to(first.current, { duration: 5, ease: 'expo.out', fillOpacity: 0 });\r\n            second.current && gsap.to(second.current, { duration: 5, ease: 'expo.out', fillOpacity: 0 });\r\n        }\r\n    }, [focus])\r\n\r\n    return (\r\n        <>\r\n            <Text\r\n                ref={first}\r\n                color='#fff'\r\n                font='fonts/Oswald.ttf'\r\n                fontSize={1}\r\n                textAlign='center'\r\n                fillOpacity={0}\r\n                layers={[1]}\r\n            >\r\n                {t('homeDesc.0')}\r\n            </Text>\r\n            <Text\r\n                ref={second}\r\n                color='#d4af37'\r\n                font='fonts/Oswald.ttf'\r\n                fontSize={1}\r\n                textAlign='center'\r\n                fillOpacity={0}\r\n                layers={[1]}\r\n            >\r\n                {t('homeDesc.1')}\r\n            </Text>\r\n        </>\r\n    )\r\n}\r\n\r\n// const Objects = ({ focus }: { focus: boolean }): JSX.Element => {\r\nconst Objects = (): JSX.Element => {\r\n    const monitor = useLoader(GLTFLoader, 'models/monitor.glb');\r\n    const phone = useLoader(GLTFLoader, 'models/phone.glb');\r\n    const tablet = useLoader(GLTFLoader, 'models/tablet.glb');\r\n\r\n    useFrame(() => {\r\n        monitor.scene && rotateAroundPoint(monitor.scene, new Vector3(0, 0, -3), new Vector3(0, 1, 0), 1 * Math.PI / 180, true);\r\n        phone.scene && rotateAroundPoint(phone.scene, new Vector3(0, 0, -3), new Vector3(0, 1, 0), 1 * Math.PI / 180, true);\r\n        tablet.scene && rotateAroundPoint(tablet.scene, new Vector3(0, 0, -3), new Vector3(0, 1, 0), 1 * Math.PI / 180, true);\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <mesh position={[-4, 1, 0]}>\r\n                <primitive object={monitor.scene} />\r\n            </mesh>\r\n            <mesh position={[-4, -0.5, 0]}>\r\n                <primitive object={phone.scene} />\r\n            </mesh>\r\n            <mesh position={[4, 1, 0]}>\r\n                <primitive object={tablet.scene} />\r\n            </mesh>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Photo = ({ focus }: { focus: boolean }): JSX.Element => {\r\n    const photo = useRef(null);\r\n    const row: number = 3;\r\n    const col: number = 4;\r\n    // const particlesNum: number = row * col;\r\n    const photoTexture = useLoader(TextureLoader, 'images/photo.png');\r\n    const maskTexture = useLoader(TextureLoader, 'images/mask.png');\r\n\r\n    const rand = (a: number, b: number) => a + (b - a) * Math.random();\r\n\r\n    const [positions, coordinates, speeds, offset] = useMemo(() => {\r\n        const initialPositions: Array<number> = [];\r\n        const initialCoordinates: Array<number> = [];\r\n        const initialSpeeds: Array<number> = [];\r\n        const initialOffset: Array<number> = [];\r\n\r\n        for (let y = 0; y < row; y += 0.01) {\r\n            let posY: number = y - row / 2;\r\n            for (let x = 0; x < col; x += 0.01) {\r\n                let posX: number = x - col / 2;\r\n                initialPositions.push(posY * 2);\r\n                initialPositions.push(posX * 2);\r\n                initialPositions.push(0);\r\n                initialCoordinates.push(y);\r\n                initialCoordinates.push(x);\r\n                initialCoordinates.push(0);\r\n                initialSpeeds.push(rand(0.4, 1));\r\n                initialOffset.push(rand(0, 5));\r\n            }\r\n        }\r\n\r\n        const positions: Float32Array = new Float32Array(initialPositions);\r\n        const coordinates: Float32Array = new Float32Array(initialCoordinates);\r\n        const speeds: Float32Array = new Float32Array(initialSpeeds);\r\n        const offset: Float32Array = new Float32Array(initialOffset);\r\n        return [positions, coordinates, speeds, offset];\r\n    }, [])\r\n\r\n    const uniforms = useMemo(() => ({\r\n        progress: { value: 0 },\r\n        photo: { value: photoTexture },\r\n        mask: { value: maskTexture },\r\n        move: { value: 5 },\r\n        time: { value: 0 }\r\n    }), [])\r\n\r\n    useEffect(() => {\r\n        focus ?\r\n            photo.current && gsap.to(photo.current.material.uniforms.move, { value: 0, duration: 5, ease: 'expo.out', }) :\r\n            photo.current && gsap.to(photo.current.material.uniforms.move, { value: 5, duration: 5, ease: 'expo.out', onUpdate: () => { console.log(photo.current.material.uniforms.move); photo.current.geometry.verticesNeedUpdate = true }, });\r\n    }, [focus])\r\n\r\n    return (\r\n        <points\r\n            ref={photo}\r\n        >\r\n            <bufferGeometry>\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"position\"]}\r\n                    count={positions.length / 3}\r\n                    array={positions}\r\n                    itemSize={3}\r\n                />\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"aCoordinates\"]}\r\n                    count={coordinates.length / 3}\r\n                    array={coordinates}\r\n                    itemSize={3}\r\n                />\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"aSpeed\"]}\r\n                    count={speeds.length}\r\n                    array={speeds}\r\n                    itemSize={1}\r\n                />\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"aOffset\"]}\r\n                    count={offset.length}\r\n                    array={offset}\r\n                    itemSize={1}\r\n                />\r\n            </bufferGeometry>\r\n            <shaderMaterial\r\n                vertexShader={photoVertexShader}\r\n                fragmentShader={photoFragmentShader}\r\n                uniforms={uniforms}\r\n                side={DoubleSide}\r\n                transparent={true}\r\n                // depthTest={false}\r\n                // depthWrite={false}\r\n            />\r\n        </points>\r\n    )\r\n}\r\n\r\nconst Home = memo(() => {\r\n    console.log('home rendered');\r\n    const { state } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        currentItem === 'home.end' ? setFocus(true) : setFocus(false);\r\n    }, [currentItem])\r\n\r\n    return (\r\n        <>\r\n            <Suspense fallback={<Loader />}>\r\n                <Photo focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Globe focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Texts focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Objects />\r\n                {/* <Preload all /> */}\r\n            </Suspense>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Home;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Loader.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\functions.ts",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":4,"column":10,"nodeType":"132","messageId":"133","endLine":4,"endColumn":16},{"ruleId":"130","severity":1,"message":"131","line":1,"column":10,"nodeType":"132","messageId":"133","endLine":1,"endColumn":16},{"ruleId":"130","severity":1,"message":"134","line":4,"column":10,"nodeType":"132","messageId":"133","endLine":4,"endColumn":15},{"ruleId":"130","severity":1,"message":"135","line":6,"column":8,"nodeType":"132","messageId":"133","endLine":6,"endColumn":14},{"ruleId":"130","severity":1,"message":"136","line":11,"column":33,"nodeType":"132","messageId":"133","endLine":11,"endColumn":52},{"ruleId":"130","severity":1,"message":"137","line":13,"column":7,"nodeType":"132","messageId":"133","endLine":13,"endColumn":16},{"ruleId":"130","severity":1,"message":"138","line":59,"column":11,"nodeType":"132","messageId":"133","endLine":59,"endColumn":19},{"ruleId":"130","severity":1,"message":"139","line":7,"column":10,"nodeType":"132","messageId":"133","endLine":7,"endColumn":23},{"ruleId":"130","severity":1,"message":"140","line":9,"column":10,"nodeType":"132","messageId":"133","endLine":9,"endColumn":18},{"ruleId":"141","severity":1,"message":"142","line":19,"column":8,"nodeType":"143","endLine":19,"endColumn":10,"suggestions":"144"},{"ruleId":"130","severity":1,"message":"145","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"146","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":23},{"ruleId":"130","severity":1,"message":"147","line":1,"column":34,"nodeType":"132","messageId":"133","endLine":1,"endColumn":43},{"ruleId":"130","severity":1,"message":"148","line":4,"column":10,"nodeType":"132","messageId":"133","endLine":4,"endColumn":17},{"ruleId":"130","severity":1,"message":"149","line":8,"column":5,"nodeType":"132","messageId":"133","endLine":8,"endColumn":19},{"ruleId":"130","severity":1,"message":"150","line":9,"column":5,"nodeType":"132","messageId":"133","endLine":9,"endColumn":24},{"ruleId":"130","severity":1,"message":"151","line":11,"column":39,"nodeType":"132","messageId":"133","endLine":11,"endColumn":47},{"ruleId":"130","severity":1,"message":"152","line":14,"column":24,"nodeType":"132","messageId":"133","endLine":14,"endColumn":28},{"ruleId":"141","severity":1,"message":"153","line":54,"column":8,"nodeType":"143","endLine":54,"endColumn":10,"suggestions":"154"},{"ruleId":"141","severity":1,"message":"155","line":36,"column":8,"nodeType":"143","endLine":36,"endColumn":21,"suggestions":"156"},{"ruleId":"130","severity":1,"message":"157","line":10,"column":10,"nodeType":"132","messageId":"133","endLine":10,"endColumn":15},{"ruleId":"130","severity":1,"message":"158","line":10,"column":17,"nodeType":"132","messageId":"133","endLine":10,"endColumn":27},{"ruleId":"130","severity":1,"message":"159","line":10,"column":29,"nodeType":"132","messageId":"133","endLine":10,"endColumn":38},{"ruleId":"130","severity":1,"message":"160","line":29,"column":25,"nodeType":"132","messageId":"133","endLine":29,"endColumn":28},{"ruleId":"141","severity":1,"message":"161","line":53,"column":8,"nodeType":"143","endLine":53,"endColumn":10,"suggestions":"162"},{"ruleId":"141","severity":1,"message":"163","line":105,"column":8,"nodeType":"143","endLine":105,"endColumn":16,"suggestions":"164"},{"ruleId":"165","severity":1,"message":"166","line":163,"column":42,"nodeType":"167","messageId":"168","endLine":163,"endColumn":44},{"ruleId":"141","severity":1,"message":"169","line":304,"column":8,"nodeType":"143","endLine":304,"endColumn":22,"suggestions":"170"},{"ruleId":"130","severity":1,"message":"171","line":6,"column":10,"nodeType":"132","messageId":"133","endLine":6,"endColumn":14},{"ruleId":"130","severity":1,"message":"172","line":7,"column":10,"nodeType":"132","messageId":"133","endLine":7,"endColumn":30},{"ruleId":"130","severity":1,"message":"173","line":7,"column":32,"nodeType":"132","messageId":"133","endLine":7,"endColumn":38},{"ruleId":"130","severity":1,"message":"174","line":7,"column":55,"nodeType":"132","messageId":"133","endLine":7,"endColumn":68},{"ruleId":"130","severity":1,"message":"157","line":18,"column":38,"nodeType":"132","messageId":"133","endLine":18,"endColumn":43},{"ruleId":"130","severity":1,"message":"175","line":20,"column":8,"nodeType":"132","messageId":"133","endLine":20,"endColumn":18},{"ruleId":"141","severity":1,"message":"176","line":193,"column":9,"nodeType":"143","endLine":193,"endColumn":11,"suggestions":"177"},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"@typescript-eslint/no-unused-vars","'Camera' is defined but never used.","Identifier","unusedVar","'Types' is defined but never used.","'Navbar' is defined but never used.","'ReinhardToneMapping' is defined but never used.","'Particles' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'OrbitControls' is defined but never used.","'useFrame' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateMousePosition'. Either include it or remove the dependency array.","ArrayExpression",["180"],"'React' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'Vector2' is defined but never used.","'FILM_LAYER_NUM' is defined but never used.","'MULTIPASS_LAYER_NUM' is defined but never used.","'filmPass' is defined but never used.","'size' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'camera', 'gl', and 'scene'. Either include them or remove the dependency array.",["181"],"React Hook useEffect has missing dependencies: 'camera' and 'onNavigationEnded'. Either include them or remove the dependency array.",["182"],"'Color' is defined but never used.","'DoubleSide' is defined but never used.","'FrontSide' is defined but never used.","'gui' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'medium' and 'vidPlayer'. Either include them or remove the dependency array.",["183"],"React Hook useEffect has missing dependencies: 'medium', 'name', 'timeline', 'vidPlayer', 'x', and 'y'. Either include them or remove the dependency array.",["184"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["185"],"'Html' is defined but never used.","'MeshStandardMaterial' is defined but never used.","'Shader' is defined but never used.","'WebGLRenderer' is defined but never used.","'EffectText' is defined but never used.","React Hook useMemo has missing dependencies: 'maskTexture' and 'photoTexture'. Either include them or remove the dependency array.",["186"],"no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},"Update the dependencies array to be: [updateMousePosition]",{"range":"201","text":"202"},"Update the dependencies array to be: [camera, gl, scene]",{"range":"203","text":"204"},"Update the dependencies array to be: [camera, currentItem, onNavigationEnded]",{"range":"205","text":"206"},"Update the dependencies array to be: [medium, vidPlayer]",{"range":"207","text":"208"},"Update the dependencies array to be: [active, medium, name, timeline, vidPlayer, x, y]",{"range":"209","text":"210"},"Update the dependencies array to be: [dispatch, projectItems]",{"range":"211","text":"212"},"Update the dependencies array to be: [maskTexture, photoTexture]",{"range":"213","text":"214"},[690,692],"[updateMousePosition]",[2051,2053],"[camera, gl, scene]",[1537,1550],"[camera, currentItem, onNavigationEnded]",[2079,2081],"[medium, vidPlayer]",[4813,4821],"[active, medium, name, timeline, vidPlayer, x, y]",[13805,13819],"[dispatch, projectItems]",[7827,7829],"[maskTexture, photoTexture]"]
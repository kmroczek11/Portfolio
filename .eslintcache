[{"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\index.tsx":"1","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\reportWebVitals.ts":"2","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\internationalization\\i18n.ts":"3","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\main\\App.tsx":"4","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\context\\index.tsx":"5","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Effects.tsx":"6","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\scene\\Scene.tsx":"7","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\context\\reducers.tsx":"8","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\postprocessing\\pass.ts":"9","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\postprocessing\\constant.ts":"10","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Loader.tsx":"11","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\scene\\SceneController.tsx":"12","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\navigation\\Navbar.tsx":"13","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Home.tsx":"14","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\projects\\Projects.tsx":"15","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\education\\Education.tsx":"16","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\contact\\Contact.tsx":"17","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\functions.ts":"18","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Photo.tsx":"19","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\DialogBox.tsx":"20","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\projects\\Project.tsx":"21","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Objects.tsx":"22","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Texts.tsx":"23","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Globe.tsx":"24","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Model.tsx":"25","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\hooks\\useMousePosition.tsx":"26"},{"size":694,"mtime":1647183240567,"results":"27","hashOfConfig":"28"},{"size":440,"mtime":1647183240569,"results":"29","hashOfConfig":"28"},{"size":762,"mtime":1647887052206,"results":"30","hashOfConfig":"28"},{"size":1154,"mtime":1647270441479,"results":"31","hashOfConfig":"28"},{"size":1117,"mtime":1647350051847,"results":"32","hashOfConfig":"28"},{"size":2695,"mtime":1647183240563,"results":"33","hashOfConfig":"28"},{"size":3255,"mtime":1647183240569,"results":"34","hashOfConfig":"28"},{"size":899,"mtime":1647183240564,"results":"35","hashOfConfig":"28"},{"size":2127,"mtime":1647183240568,"results":"36","hashOfConfig":"28"},{"size":148,"mtime":1647183240568,"results":"37","hashOfConfig":"28"},{"size":571,"mtime":1647183240564,"results":"38","hashOfConfig":"28"},{"size":2925,"mtime":1647272596361,"results":"39","hashOfConfig":"28"},{"size":4885,"mtime":1647433593596,"results":"40","hashOfConfig":"28"},{"size":741,"mtime":1647183240566,"results":"41","hashOfConfig":"28"},{"size":4353,"mtime":1647874390167,"results":"42","hashOfConfig":"28"},{"size":3232,"mtime":1647183240565,"results":"43","hashOfConfig":"28"},{"size":6817,"mtime":1647433722857,"results":"44","hashOfConfig":"28"},{"size":391,"mtime":1647349191691,"results":"45","hashOfConfig":"28"},{"size":4529,"mtime":1647183240566,"results":"46","hashOfConfig":"28"},{"size":2379,"mtime":1647276798618,"results":"47","hashOfConfig":"28"},{"size":11190,"mtime":1647887252159,"results":"48","hashOfConfig":"28"},{"size":1807,"mtime":1647183240566,"results":"49","hashOfConfig":"28"},{"size":1823,"mtime":1647183240566,"results":"50","hashOfConfig":"28"},{"size":2496,"mtime":1647183240566,"results":"51","hashOfConfig":"28"},{"size":1652,"mtime":1647183240564,"results":"52","hashOfConfig":"28"},{"size":759,"mtime":1647183240567,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1uq7kkm",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\index.tsx",[],["111","112"],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\reportWebVitals.ts",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\internationalization\\i18n.ts",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\main\\App.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\context\\index.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Effects.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\scene\\Scene.tsx",["113"],"import React, { useEffect } from 'react';\r\nimport Home from '../home/Home';\r\nimport Education from '../education/Education';\r\nimport Projects from '../projects/Projects';\r\nimport Contact from '../contact/Contact';\r\nimport SceneController from './SceneController';\r\nimport { useRef } from 'react';\r\nimport { useThree } from '@react-three/fiber';\r\nimport Navbar from '../navigation/Navbar';\r\nimport { Environment, OrbitControls, Preload } from '@react-three/drei';\r\nimport { Suspense } from 'react';\r\nimport Loader from '../components/Loader';\r\nimport gsap from 'gsap';\r\n\r\nconst navbar_items: Array<NavbarItem> = [\r\n    { id: 0, name: 'education' },\r\n    { id: 1, name: 'projects' },\r\n    { id: 2, name: 'contact' },\r\n]\r\n\r\nexport interface NavbarItem {\r\n    id: number,\r\n    name: string,\r\n}\r\n\r\nconst Scene = (): JSX.Element => {\r\n    const keyLight = useRef(null);\r\n    const fillLight = useRef(null);\r\n    const frontLight = useRef(null);\r\n    const { camera } = useThree();\r\n    const timeline = gsap.timeline({ repeat: -1, yoyo: true });\r\n\r\n    useEffect(() => {\r\n        if (!keyLight.current || !fillLight.current || !frontLight.current) return;\r\n\r\n        const k = keyLight.current;\r\n        const fi = fillLight.current;\r\n        const fr = frontLight.current;\r\n\r\n        k.position.set(camera.position.x + 5, 1, camera.position.z);\r\n        fi.position.set(camera.position.x - 5, 0.5, camera.position.z);\r\n        fr.position.set(camera.position.x - 5, -0.5, camera.position.z);\r\n\r\n        k.target.position.set(camera.position.x, 0, camera.position.z - 5);\r\n        fi.target.position.set(camera.position.x, 0, camera.position.z - 5);\r\n        fr.target.position.set(camera.position.x, 0, camera.position.z - 5);\r\n\r\n        k.target.updateMatrixWorld();\r\n        fi.target.updateMatrixWorld();\r\n        fr.target.updateMatrixWorld();\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!fillLight.current) return;\r\n\r\n        timeline.to(\r\n            fillLight.current.position,\r\n            { x: camera.position.x + 5, duration: 5 },\r\n        )\r\n        timeline.to(\r\n            fillLight.current.position,\r\n            { x: camera.position.x - 5, duration: 5 },\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Suspense fallback={<Loader />}>\r\n                <Environment\r\n                    background={false}\r\n                    files={['square.png', 'square.png', 'square.png', 'square.png', 'square.png', 'square.png']}\r\n                    path='/images/textures/'\r\n                />\r\n                <Navbar items={navbar_items} />\r\n                <Home />\r\n                <Education />\r\n                <Projects />\r\n                <Contact />\r\n                <directionalLight\r\n                    ref={keyLight}\r\n                    args={['#fff', 1]}\r\n                />\r\n                <directionalLight\r\n                    ref={fillLight}\r\n                    args={['#d4af37', 1]}\r\n                />\r\n                <directionalLight\r\n                    ref={frontLight}\r\n                    args={['#fff', 1]}\r\n                />\r\n                <SceneController />\r\n                <Preload all />\r\n            </Suspense>\r\n            {/* <OrbitControls/> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Scene;","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\context\\reducers.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\postprocessing\\pass.ts",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\postprocessing\\constant.ts",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Loader.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\scene\\SceneController.tsx",["114"],"import { useContext, useEffect } from 'react';\r\nimport { AppContext } from '../context';\r\nimport { Types } from '../context/reducers';\r\nimport { useThree } from '@react-three/fiber';\r\nimport { animate } from '../components/functions';\r\nimport { WebGLRenderer } from 'three/src/renderers/WebGLRenderer';\r\nimport { PerspectiveCamera } from 'three/src/cameras/PerspectiveCamera';\r\n\r\nconst SceneController = (): JSX.Element => {\r\n    const { gl, camera }: { gl: WebGLRenderer, camera: PerspectiveCamera } = useThree();\r\n    const { domElement: canvas } = gl;\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n\r\n    const adjustCanvasSize = () => {\r\n        // look up the size the canvas is being displayed\r\n        let width = canvas.clientWidth;\r\n        let height = canvas.clientHeight;\r\n\r\n        if (width === 0) return;\r\n\r\n        if (width < 768)\r\n            // swap width and height on mobile\r\n            [width, height] = [height, width];\r\n\r\n        // adjust displayBuffer size to match\r\n        if (canvas.width !== width || canvas.height !== height) {\r\n            const ratio = window.devicePixelRatio;\r\n            // you must pass false here or three.js sadly fights the browser\r\n            gl.setSize(width, height, false);\r\n            camera.aspect = width / height;\r\n            camera.updateProjectionMatrix();\r\n            canvas.width = width * ratio;\r\n            canvas.height = height * ratio;\r\n            canvas.style.width = `${width}px`;\r\n            canvas.style.height = `${height}px`;\r\n            // update any render target sizes here\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!camera || !gl) return;\r\n\r\n        adjustCanvasSize();\r\n        window.addEventListener('resize', adjustCanvasSize, false);\r\n    }, [canvas?.clientWidth, camera, gl])\r\n\r\n    const onNavigationEnded = (name: string) => {\r\n        dispatch({\r\n            type: Types.SetCurrentItem,\r\n            payload: name,\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!camera) return;\r\n\r\n        switch (currentItem) {\r\n            case 'home.to':\r\n                animate(camera.position, { x: 0, y: 0, z: 5 }, 3, 'expo.out', () => onNavigationEnded('home.end'));\r\n                break;\r\n            case 'education.to':\r\n                animate(camera.position, { x: 0, y: 0, z: -15 }, 3, 'expo.out', () => onNavigationEnded('education.end'));\r\n                break;\r\n            case 'projects.to':\r\n                animate(camera.position, { x: 15, y: 0, z: -15 }, 3, 'expo.out', () => onNavigationEnded('projects.end'));\r\n                break;\r\n            case 'contact.to':\r\n                animate(camera.position, { x: 15, y: 0, z: 5 }, 3, 'expo.out', () => onNavigationEnded('contact.end'));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n\r\n    return null;\r\n}\r\n\r\nexport default SceneController;","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\navigation\\Navbar.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Home.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\projects\\Projects.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\education\\Education.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\contact\\Contact.tsx",["115"],"import React, { useContext, useEffect, useLayoutEffect, useRef, useState } from 'react';\r\nimport '../styles/contact.css';\r\nimport { Html, RoundedBox } from '@react-three/drei';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AppContext } from '../context';\r\nimport emailjs, { init } from 'emailjs-com';\r\nimport DialogBox from '../components/DialogBox';\r\nimport gsap from 'gsap';\r\n\r\nconst ContactForm = (): JSX.Element => {\r\n    const form = useRef(null);\r\n    const { t } = useTranslation();\r\n    const { state } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n    const [msgStatus, setMsgStatus] = useState<string>('unsent');\r\n    const timeline = gsap.timeline();\r\n\r\n    useEffect(() => init(process.env.REACT_APP_USER_ID), [])\r\n\r\n    useEffect(() => {\r\n        currentItem === 'contact.end' ? setFocus(true) : setFocus(false);\r\n    }, [currentItem])\r\n\r\n    useLayoutEffect(() => {\r\n        if (!form.current) return;\r\n\r\n        focus ?\r\n            [...form.current.children].forEach((c: HTMLDivElement) => timeline.to(c, { x: 0, opacity: 1, duration: 0.3 })) :\r\n            [...form.current.children].forEach((c: HTMLDivElement) => timeline.to(c, { x: -50, opacity: 0, duration: 0.3 }))\r\n    }, [focus])\r\n\r\n    return (\r\n        <RoundedBox\r\n            position={[15, 0, 0]}\r\n            args={[5, 6, 0.2]}\r\n            radius={0.1}\r\n        >\r\n            <meshPhongMaterial attach='material' color='#000' />\r\n            <Html\r\n                center\r\n                zIndexRange={[0, 0]}\r\n                transform\r\n                distanceFactor={4}\r\n            >\r\n                {msgStatus === 'processing' ?\r\n                    <img\r\n                        src='/images/sending.gif'\r\n                        alt='sending'\r\n                        style={{\r\n                            width: '40vw',\r\n                            maxWidth: '40vw',\r\n                            height: '40vh'\r\n                        }}\r\n                    />\r\n                    :\r\n                    <Formik\r\n                        initialValues={{ firstname: '', lastname: '', email: '', phone: '', message: '' }}\r\n                        validate={values => {\r\n                            let errors = {};\r\n                            if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) errors = { ...errors, email: t('contact.6') };\r\n                            if (!values.firstname) errors = { ...errors, firstname: t('contact.7') };\r\n                            if (!values.lastname) errors = { ...errors, lastname: t('contact.7') };\r\n                            if (!values.email) errors = { ...errors, email: t('contact.7') };\r\n                            return errors;\r\n                        }}\r\n                        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                            setMsgStatus('processing');\r\n                            setTimeout(() => {\r\n                                emailjs.send(process.env.REACT_APP_SERVICE_ID, process.env.REACT_APP_TEMPLATE_ID, values)\r\n                                    .then((result) => {\r\n                                        setMsgStatus('sent');\r\n                                    },\r\n                                        (error) => {\r\n                                            setMsgStatus('error');\r\n                                            console.log(error.toString());\r\n                                        });\r\n                                setSubmitting(false);\r\n                                resetForm();\r\n                            }, 400);\r\n                        }}\r\n                    >\r\n                        {({ isSubmitting }) => (\r\n                            <Form\r\n                                ref={form}\r\n                                className='contact-form'\r\n                            >\r\n                                <div className='firstname'>\r\n                                    <Icon>person</Icon>\r\n                                    <Field type='text' name='firstname' placeholder={t('contact.0')} />\r\n                                    <ErrorMessage className='error' name='firstname' component='span' />\r\n                                </div>\r\n                                <div className='surname'>\r\n                                    <Icon>person</Icon>\r\n                                    <Field type='text' name='lastname' placeholder={t('contact.1')} />\r\n                                    <ErrorMessage className='error' name='lastname' component='span' />\r\n                                </div>\r\n                                <div className='email'>\r\n                                    <Icon>email</Icon>\r\n                                    <Field type='email' name='email' placeholder={t('contact.2')} />\r\n                                    <ErrorMessage className='error' name='email' component='span' />\r\n                                </div>\r\n                                <div className='phone'>\r\n                                    <Icon>phone</Icon>\r\n                                    <Field type='tel' name='phone' placeholder={t('contact.3')} />\r\n                                </div>\r\n                                <div className='message'>\r\n                                    <Icon>message</Icon>\r\n                                    <Field type='text' name='message' placeholder={t('contact.4')} as='textarea' />\r\n                                </div>\r\n                                <div className='break' />\r\n                                <button type='submit' disabled={isSubmitting}>{t('contact.5')}</button>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                }\r\n                {\r\n                    msgStatus === 'sent' &&\r\n                    <DialogBox\r\n                        title={t('emailDialog.0')}\r\n                        content={t('emailDialog.1')}\r\n                        agreeTxt={t('emailDialog.2')}\r\n                        onAgreed={() => setMsgStatus('unsent')}\r\n                    />\r\n                }\r\n                {\r\n                    msgStatus === 'error' &&\r\n                    <DialogBox\r\n                        title={t('emailDialog.3')}\r\n                        content={t('emailDialog.4')}\r\n                        agreeTxt={t('emailDialog.2')}\r\n                        onAgreed={() => setMsgStatus('unsent')}\r\n                    />\r\n                }\r\n            </Html>\r\n        </RoundedBox>\r\n    )\r\n}\r\n\r\nconst Contact = (): JSX.Element => {\r\n    return <ContactForm />\r\n}\r\n\r\nexport default Contact;","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\functions.ts",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Photo.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\DialogBox.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\projects\\Project.tsx",["116","117","118","119","120"],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Objects.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Texts.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\home\\Globe.tsx",[],"C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\components\\Model.tsx",["121"],"import React, { forwardRef, useEffect, useState } from 'react';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { RoughnessMipmapper } from 'three-stdlib';\r\nimport { Group, Mesh, MeshStandardMaterial } from 'three';\r\nimport { MeshProps, useThree } from '@react-three/fiber';\r\n\r\ninterface ModelItem extends MeshProps {\r\n    path: string;\r\n}\r\n\r\nconst Model = forwardRef((props: ModelItem, ref): JSX.Element => {\r\n    const [gltf, set] = useState<Group>(null);\r\n    const { gl } = useThree();\r\n\r\n    useEffect(() => {\r\n        // use of RoughnessMipmapper is optional\r\n        const roughnessMipmapper = new RoughnessMipmapper(gl);\r\n\r\n        const loader = new GLTFLoader().setPath('models/');\r\n\r\n        loader.load(props.path, (gltf) => {\r\n            gltf.scene.traverse((child) => {\r\n                if ((child as Mesh).isMesh) {\r\n                    (child as Mesh).material = new MeshStandardMaterial({\r\n                        color: '#000',\r\n                        metalness: 5,\r\n                        roughness: 0\r\n                    })\r\n\r\n                    // @ts-ignore: Unreachable code error\r\n                    if (child.material.map) child.material.map.anisotropy = 16;\r\n                    roughnessMipmapper.generateMipmaps((child as Mesh).material as MeshStandardMaterial);\r\n                }\r\n            });\r\n            roughnessMipmapper.dispose();\r\n            set(gltf.scene)\r\n        })\r\n    }, [props.path])\r\n\r\n    return gltf &&\r\n        <primitive\r\n            {...props}\r\n            ref={ref}\r\n            object={gltf}\r\n            dispose={null}\r\n        />\r\n})\r\n\r\nexport default Model;","C:\\Users\\Marin PC\\Desktop\\Portfolio\\src\\hooks\\useMousePosition.tsx",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":10,"column":23,"nodeType":"128","messageId":"129","endLine":10,"endColumn":36},{"ruleId":"130","severity":1,"message":"131","line":46,"column":8,"nodeType":"132","endLine":46,"endColumn":41,"suggestions":"133"},{"ruleId":"130","severity":1,"message":"134","line":33,"column":8,"nodeType":"132","endLine":33,"endColumn":15,"suggestions":"135"},{"ruleId":"130","severity":1,"message":"136","line":59,"column":8,"nodeType":"132","endLine":59,"endColumn":10,"suggestions":"137"},{"ruleId":"130","severity":1,"message":"138","line":71,"column":8,"nodeType":"132","endLine":71,"endColumn":17,"suggestions":"139"},{"ruleId":"130","severity":1,"message":"140","line":104,"column":8,"nodeType":"132","endLine":104,"endColumn":16,"suggestions":"141"},{"ruleId":"130","severity":1,"message":"142","line":116,"column":8,"nodeType":"132","endLine":116,"endColumn":15,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":196,"column":53,"nodeType":"146","messageId":"147","endLine":196,"endColumn":55},{"ruleId":"130","severity":1,"message":"148","line":38,"column":8,"nodeType":"132","endLine":38,"endColumn":20,"suggestions":"149"},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"@typescript-eslint/no-unused-vars","'OrbitControls' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'adjustCanvasSize'. Either include it or remove the dependency array.","ArrayExpression",["152"],"React Hook useLayoutEffect has a missing dependency: 'timeline'. Either include it or remove the dependency array.",["153"],"React Hook useMemo has missing dependencies: 'medium' and 'vidPlayer'. Either include them or remove the dependency array.",["154"],"React Hook useEffect has missing dependencies: 'active' and 'fullScreen'. Either include them or remove the dependency array.",["155"],"React Hook useEffect has missing dependencies: 'medium', 'timeline', 'vidPlayer', 'x', and 'y'. Either include them or remove the dependency array.",["156"],"React Hook useEffect has missing dependencies: 'x' and 'y'. Either include them or remove the dependency array.",["157"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'gl'. Either include it or remove the dependency array.",["158"],"no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [canvas.clientWidth, camera, gl, adjustCanvasSize]",{"range":"173","text":"174"},"Update the dependencies array to be: [focus, timeline]",{"range":"175","text":"176"},"Update the dependencies array to be: [medium, vidPlayer]",{"range":"177","text":"178"},"Update the dependencies array to be: [active, fullScreen, hovered]",{"range":"179","text":"180"},"Update the dependencies array to be: [active, medium, timeline, vidPlayer, x, y]",{"range":"181","text":"182"},"Update the dependencies array to be: [focus, x, y]",{"range":"183","text":"184"},"Update the dependencies array to be: [gl, props.path]",{"range":"185","text":"186"},[1807,1840],"[canvas.clientWidth, camera, gl, adjustCanvasSize]",[1393,1400],"[focus, timeline]",[2598,2600],"[medium, vidPlayer]",[2985,2994],"[active, fullScreen, hovered]",[4217,4225],"[active, medium, timeline, vidPlayer, x, y]",[4910,4917],"[focus, x, y]",[1454,1466],"[gl, props.path]"]
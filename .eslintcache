[{"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts":"1","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx":"2","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx":"3","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\constant.ts":"4","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\pass.ts":"5","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx":"6","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\main\\App.tsx":"7","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\internationalization\\i18n.ts":"8","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\Scene.tsx":"9","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\hooks\\useMousePosition.tsx":"10","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Effects.tsx":"11","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\SceneController.tsx":"12","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\contact\\Contact.tsx":"13","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\projects\\Projects.tsx":"14","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\education\\Education.tsx":"15","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\navigation\\Navbar.tsx":"16","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Home.tsx":"17","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Loader.tsx":"18","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\functions.ts":"19","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\projects\\Project.tsx":"20","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Globe.tsx":"21","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Texts.tsx":"22","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Photo.tsx":"23","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Objects.tsx":"24","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\DialogBox.tsx":"25"},{"size":440,"mtime":1614182950498,"results":"26","hashOfConfig":"27"},{"size":1129,"mtime":1627247778683,"results":"28","hashOfConfig":"27"},{"size":1041,"mtime":1627247883169,"results":"29","hashOfConfig":"27"},{"size":143,"mtime":1625666555056,"results":"30","hashOfConfig":"27"},{"size":2362,"mtime":1627247174274,"results":"31","hashOfConfig":"27"},{"size":1205,"mtime":1627766305666,"results":"32","hashOfConfig":"27"},{"size":4448,"mtime":1627768749169,"results":"33","hashOfConfig":"27"},{"size":837,"mtime":1626182987337,"results":"34","hashOfConfig":"27"},{"size":3312,"mtime":1627770573237,"results":"35","hashOfConfig":"27"},{"size":763,"mtime":1626182523356,"results":"36","hashOfConfig":"27"},{"size":2345,"mtime":1627247214072,"results":"37","hashOfConfig":"27"},{"size":1715,"mtime":1627148005611,"results":"38","hashOfConfig":"27"},{"size":6116,"mtime":1627656982944,"results":"39","hashOfConfig":"27"},{"size":3687,"mtime":1626645700067,"results":"40","hashOfConfig":"27"},{"size":3307,"mtime":1627065243248,"results":"41","hashOfConfig":"27"},{"size":5000,"mtime":1627043466309,"results":"42","hashOfConfig":"27"},{"size":1169,"mtime":1627657674436,"results":"43","hashOfConfig":"27"},{"size":513,"mtime":1626185099424,"results":"44","hashOfConfig":"27"},{"size":1782,"mtime":1626978973723,"results":"45","hashOfConfig":"27"},{"size":10811,"mtime":1627251117676,"results":"46","hashOfConfig":"27"},{"size":2447,"mtime":1627065323216,"results":"47","hashOfConfig":"27"},{"size":2040,"mtime":1626355727619,"results":"48","hashOfConfig":"27"},{"size":4078,"mtime":1627250566890,"results":"49","hashOfConfig":"27"},{"size":3131,"mtime":1627770122739,"results":"50","hashOfConfig":"27"},{"size":2492,"mtime":1627656913950,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"g7aof9",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"54"},"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts",[],["112","113"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\constant.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\postprocessing\\pass.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\main\\App.tsx",["114","115","116","117","118","119"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\internationalization\\i18n.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\Scene.tsx",["120","121"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\hooks\\useMousePosition.tsx",["122"],"import { useState, useEffect } from 'react';\r\n\r\nconst useMousePosition = (world: string) => {\r\n    const [mousePosition, setMousePosition] = useState<{ x: number, y: number }>({ x: null, y: null });\r\n\r\n    const updateMousePosition = ev => {\r\n        setMousePosition(\r\n            {\r\n                x: world === '2D' ? ev.clientX : (ev.clientX / window.innerWidth) * 2 - 1,\r\n                y: world === '2D' ? ev.clientY : -(ev.clientY / window.innerWidth) * 2 + 1\r\n            }\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('mousemove', updateMousePosition);\r\n\r\n        return () => window.removeEventListener('mousemove', updateMousePosition);\r\n    }, []);\r\n\r\n    return mousePosition;\r\n};\r\n\r\nexport default useMousePosition;",["123","124"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Effects.tsx",["125"],"import { useMemo, useState } from 'react'\r\nimport { useThree, useFrame } from '@react-three/fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport {\r\n    DEFAULT_LAYER_NUM,\r\n    BLOOM_LAYER_NUM,\r\n    // FILM_LAYER_NUM,\r\n    // MULTIPASS_LAYER_NUM\r\n} from '../postprocessing/constant';\r\nimport { createRenderPass, bloomPass, createFinalPass } from \"../postprocessing/pass\";\r\n\r\nconst Effects = (): JSX.Element => {\r\n    const { scene, gl, camera } = useThree()\r\n    const [bloomComposer, setBloomComposer] = useState<EffectComposer>(null);\r\n    const [finalComposer, setFinalComposer] = useState<EffectComposer>(null);\r\n\r\n    useMemo(() => {\r\n        const renderPass = createRenderPass(scene, camera);\r\n\r\n        // setup bloom composer\r\n        const bloomComposer = new EffectComposer(gl);\r\n        bloomComposer.renderToScreen = false;\r\n        bloomComposer.addPass(renderPass);\r\n        bloomComposer.addPass(bloomPass);\r\n\r\n        // setup film composer\r\n        // const filmComposer = new EffectComposer(gl);\r\n        // filmComposer.renderToScreen = false;\r\n        // filmComposer.addPass(renderPass);\r\n        // filmComposer.addPass(filmPass);\r\n\r\n        // setup composer with multiple passes\r\n        // const multipassComposer = new EffectComposer(gl);\r\n        // multipassComposer.renderToScreen = false;\r\n        // multipassComposer.addPass(renderPass);\r\n        // multipassComposer.addPass(bloomPass);\r\n        // multipassComposer.addPass(filmPass);\r\n\r\n        // setup final composer\r\n        const finalComposer = new EffectComposer(gl);\r\n        finalComposer.addPass(renderPass);\r\n        const finalPass = createFinalPass(\r\n            gl.getPixelRatio(),\r\n            bloomComposer,\r\n            // filmComposer,\r\n            // multipassComposer\r\n        );\r\n        finalComposer.addPass(finalPass);\r\n\r\n        gl.autoClear = false;\r\n\r\n        setBloomComposer(bloomComposer);\r\n        setFinalComposer(finalComposer);\r\n    }, [])\r\n\r\n    useFrame(() => {\r\n        gl.clear();\r\n\r\n        camera.layers.set(BLOOM_LAYER_NUM);\r\n        bloomComposer.swapBuffers();\r\n        bloomComposer.render();\r\n\r\n        camera.layers.set(DEFAULT_LAYER_NUM);\r\n        finalComposer.swapBuffers();\r\n        finalComposer.render();\r\n    })\r\n\r\n    return null;\r\n}\r\n\r\nexport default Effects;\r\n","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\scene\\SceneController.tsx",["126","127","128","129"],"import { useContext, useEffect } from 'react';\r\nimport { AppContext } from '../context';\r\nimport gsap from 'gsap';\r\nimport { Types } from '../context/reducers';\r\nimport { useFrame, useThree } from '@react-three/fiber';\r\nimport { PerspectiveCamera } from 'three';\r\nimport { Vector2 } from 'three/src/math/Vector2';\r\n\r\nconst SceneController = (): JSX.Element => {\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { camera } = useThree();\r\n    const { currentItem } = state.scene;\r\n\r\n    const onNavigationEnded = (name: string) => {\r\n        dispatch({\r\n            type: Types.SetCurrentItem,\r\n            payload: name,\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        switch (currentItem) {\r\n            case 'home.to':\r\n                camera && gsap.to(camera.position, { x: 0, y: 0, z: 5, duration: 3, ease: 'expo.out', onComplete: () => onNavigationEnded('home.end') });\r\n                break;\r\n            case 'education.to':\r\n                camera && gsap.to(camera.position, { x: 0, y: 0, z: -15, duration: 3, ease: 'expo.out', onComplete: () => onNavigationEnded('education.end') });\r\n                break;\r\n            case 'projects.to':\r\n                camera && gsap.to(camera.position, { x: 15, y: 0, z: -15, duration: 3, ease: 'expo.out', onComplete: () => onNavigationEnded('projects.end') });\r\n                break;\r\n            case 'contact.to':\r\n                camera && gsap.to(camera.position, { x: 15, y: 0, z: 5, duration: 3, ease: 'expo.out', onComplete: () => onNavigationEnded('contact.end') });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [currentItem])\r\n\r\n    return null;\r\n}\r\n\r\nexport default SceneController;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\contact\\Contact.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\projects\\Projects.tsx",["130"],"import React, { useContext, useState, useEffect, Suspense, Fragment } from 'react';\r\nimport { AppContext } from '../context';\r\nimport { Types } from '../context/reducers';\r\nimport Loader from '../components/Loader';\r\nimport Project from './Project';\r\n\r\nexport interface ProjectItem {\r\n    id: number,\r\n    name: string,\r\n    logos: Array<string>,\r\n    medium: string,\r\n    preview: string,\r\n    x: number,\r\n    y: number,\r\n    active: boolean,\r\n    focus?: boolean,\r\n    onClick?: (id: number) => void,\r\n}\r\n\r\nconst Projects = React.memo(() => {\r\n    console.log('projects rendered');\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n    const [projectItems, setProjectItems] = useState<Array<ProjectItem>>([\r\n        { id: 0, name: 'gfe', logos: ['vue', 'uikit', 'firebase'], medium: 'desktop', preview: 'http://www.gfe.agh.edu.pl', x: 11.8, y: 1, active: false },\r\n        { id: 1, name: 'stalcraft', logos: ['angular', 'node'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Stalcraft', x: 14, y: 1, active: false },\r\n        { id: 2, name: 'shop', logos: ['aspnet', 'mysql'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Shop', x: 16.2, y: 1, active: false },\r\n        { id: 3, name: 'marbles', logos: ['three', 'node', 'jquery', 'ajax', 'socketio', 'mongodb'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Marbles', x: 18.4, y: 1, active: false },\r\n        { id: 4, name: 'mp3player', logos: ['jquery', 'node', 'ajax'], medium: 'desktop', preview: 'https://github.com/kmroczek11/School-projects/tree/master/MP3%20Player', x: 11.8, y: -1, active: false },\r\n        { id: 5, name: 'coronastats', logos: ['reactnative', 'redux'], medium: 'mobile', preview: 'https://github.com/kmroczek11/Coronastats', x: 13.5, y: -1, active: false },\r\n        { id: 6, name: 'tasky', logos: ['flutter', 'rive', 'firebase'], medium: 'mobile', preview: 'https://github.com/kmroczek11/Tasky', x: 14.7, y: -1, active: false },\r\n        // { id: 7, name: '', logos: ['react', 'sass'], medium: 'desktop', preview: 'https://github.com/kmroczek11/Portfolio', x: 19.5, y: -1, active: false },\r\n    ]);\r\n    const [selected, setSelected] = useState<number>(null);\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        currentItem === 'projects.end' ? setFocus(true) : setFocus(false);\r\n    }, [currentItem])\r\n\r\n    useEffect(() => {\r\n        setProjectItems(prevProjectItems =>\r\n            prevProjectItems.map(\r\n                (e: ProjectItem) =>\r\n                    e.id === selected ?\r\n                        { ...e, active: true } : { ...e, active: false }\r\n            ));\r\n    }, [selected])\r\n\r\n    useEffect(() => {\r\n        projectItems.some((e: ProjectItem) => e.active) ?\r\n            dispatch({\r\n                type: Types.SetFullScreen,\r\n                payload: true,\r\n            }) : dispatch({\r\n                type: Types.SetFullScreen,\r\n                payload: false,\r\n            });\r\n    }, [projectItems])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                projectItems.map(\r\n                    (project: ProjectItem, index: number) =>\r\n                        <Fragment key={index}>\r\n                            <Suspense fallback={<Loader />}>\r\n                                <Project\r\n                                    {...project}\r\n                                    focus={focus}\r\n                                    onClick={setSelected}\r\n                                />\r\n                            </Suspense>\r\n                        </Fragment>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Projects;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\education\\Education.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\navigation\\Navbar.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Home.tsx",["131","132","133","134"],"import { memo, Suspense, useContext, useEffect, useState } from 'react';\r\nimport { AppContext } from '../context';\r\nimport Loader from '../components/Loader';\r\nimport Photo from './Photo'\r\nimport Objects from './Objects'\r\nimport Texts from './Texts'\r\nimport Globe from './Globe'\r\n\r\nconst Home = memo(() => {\r\n    console.log('home rendered');\r\n    const { state } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        currentItem === 'home.end' ? setFocus(true) : setFocus(false);\r\n    }, [currentItem])\r\n\r\n    return (\r\n        <>\r\n            {/* <Suspense fallback={<Loader />}>\r\n                <Photo focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Globe focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Texts focus={focus} />\r\n            </Suspense> */}\r\n            <Suspense fallback={<Loader />}>\r\n                <Objects />\r\n                {/* <Preload all /> */}\r\n            </Suspense>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Home;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\Loader.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\functions.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\projects\\Project.tsx",["135","136","137","138","139","140","141","142","143","144"],"import React, { useContext, useRef, useState, useEffect, Suspense, useMemo, Fragment } from 'react';\r\nimport { AppContext } from '../context';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { RoundedBox, Text } from '@react-three/drei';\r\nimport { useTranslation } from 'react-i18next';\r\nimport gsap from 'gsap';\r\nimport { Mesh, PlaneGeometry, ShaderMaterial, Vector2, VideoTexture } from 'three';\r\nimport videoVertexShader from '../shaders/videoVertex.glsl';\r\nimport videoFragmentShader from '../shaders/videoFragment.glsl';\r\nimport { PointerEvent, MouseEvent } from 'react';\r\nimport { ProjectItem } from './Projects';\r\nimport { useThree } from 'react-three-fiber';\r\nimport { Interaction } from 'three.interaction'\r\n\r\nconst Project = ({ id, name, logos, medium, preview, x, y, active, focus, onClick }: ProjectItem): JSX.Element => {\r\n    const { state } = useContext(AppContext);\r\n    const { fullScreen, gui } = state.scene;\r\n    const { t } = useTranslation();\r\n    const [hovered, setHovered] = useState<boolean>(false);\r\n    const [vidPlayer] = useState(() => {\r\n        const vid = document.createElement('video');\r\n        vid.crossOrigin = 'Anonymous';\r\n        vid.loop = true;\r\n        vid.controls = true;\r\n        return vid;\r\n    });\r\n    const [vidObject] = useMemo(() => {\r\n        const geometry = medium === 'desktop' ? new PlaneGeometry(1.8, 0.8) : new PlaneGeometry(0.8, 1.8);\r\n        const uniforms = {\r\n            u_tex: { value: new VideoTexture(vidPlayer) },\r\n            u_adjust_uv: { value: new Vector2(1, 1) }\r\n        }\r\n        const material = new ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: videoVertexShader,\r\n            fragmentShader: videoFragmentShader,\r\n        });\r\n\r\n        const video = new Mesh(geometry, material);\r\n        return [video];\r\n    }, []);\r\n    const project = useRef(null);\r\n    const projectDescription = useRef(null);\r\n    const exit = useRef(null);\r\n    const timeline = gsap.timeline();\r\n    const [enteredPreviewMode, setEnteredPreviewMode] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (active || !fullScreen) document.body.style.cursor = hovered ? 'pointer' : 'auto';\r\n        if (!fullScreen) {\r\n            hovered ?\r\n                project.current && gsap.to(project.current.scale, { duration: 1, ease: 'expo.out', x: 1.1, y: 1.1 }) :\r\n                project.current && gsap.to(project.current.scale, { duration: 1, ease: 'expo.out', x: 1, y: 1 });\r\n        }\r\n    }, [hovered])\r\n\r\n    useEffect(() => {\r\n        if (active) {\r\n            if (vidPlayer) {\r\n                if (vidPlayer.readyState < 3) {\r\n                    vidPlayer.src = `videos/${name}.mp4`;\r\n                    vidPlayer.load();\r\n                    vidPlayer.onerror = () => console.log(`${name} error ${vidPlayer.error.code}; details: ${vidPlayer.error.message}`);\r\n                }\r\n                vidPlayer.play();\r\n            }\r\n            if (medium === 'desktop') {\r\n                timeline.to(project.current.position, { x: 16, y: 0, z: -17.5 });\r\n                timeline.to(project.current.scale, { x: 2, y: 2, z: 2, duration: 1 });\r\n            } else {\r\n                timeline.to(project.current.position, { x: 16.5, y: 0, z: -17.5 });\r\n                timeline.to(project.current.scale, { x: 1.6, y: 1.6, z: 1.6, duration: 1 });\r\n            }\r\n            timeline.to(project.current.rotation, {\r\n                y: -0.2, duration: 1,\r\n            });\r\n            projectDescription.current.visible = true;\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0.5, duration: 3 });\r\n        }\r\n        if (!active) {\r\n            if (vidPlayer) vidPlayer.pause();\r\n            timeline.to(project.current.position, { x: x, y: y, z: -18 })\r\n            timeline.to(project.current.rotation, { y: 0, duration: 1 });\r\n            timeline.to(project.current.scale, { x: 1, y: 1, z: 1, duration: 1 });\r\n            projectDescription.current.visible = false;\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0, duration: 3 });\r\n        }\r\n    }, [active])\r\n\r\n    useEffect(() => {\r\n        if (project.current) {\r\n            if (focus) {\r\n                gsap.to(project.current.position, { duration: 3, ease: 'expo.out', x: x, y: y - 0.1, z: -18 });\r\n                gsap.to(project.current.children[1].material, { duration: 3, ease: 'expo.out', opacity: 1, onComplete: () => project.current.children[0].visible = true });\r\n            } else {\r\n                gsap.to(project.current.position, { duration: 3, ease: 'expo.out', x: rand(x - 2, x + 2), y: rand(y - 2, y + 2), z: -18 });\r\n                gsap.to(project.current.children[1].material, { duration: 3, ease: 'expo.out', opacity: 0, onComplete: () => project.current.children[0].visible = false });\r\n            }\r\n        }\r\n    }, [focus])\r\n\r\n    const rand = (a: number, b: number) => a + (b - a) * Math.random();\r\n\r\n    const preventAnimation = () => {\r\n        if (timeline.isActive()) timeline.clear();\r\n    }\r\n\r\n    const onSelected = (e: MouseEvent) => {\r\n        e.stopPropagation();\r\n        if (!fullScreen) {\r\n            preventAnimation();\r\n            setHovered(false);\r\n            onClick(id);\r\n        }\r\n    }\r\n\r\n    const onExit = () => {\r\n        preventAnimation();\r\n        setHovered(false);\r\n        onClick(null);\r\n    }\r\n\r\n    const onEnterPreviewMode = (e: MouseEvent) => {\r\n        e.stopPropagation();\r\n        if (active) {\r\n            preventAnimation();\r\n            if (medium === 'desktop')\r\n                timeline.to(project.current.position, { x: 15, y: 0, z: -16.5 });\r\n            else\r\n                timeline.to(project.current.position, { x: 15, y: 0, z: -17.1 });\r\n            timeline.to(project.current.rotation, {\r\n                y: 0,\r\n                duration: 1,\r\n                onComplete: () => setEnteredPreviewMode(true)\r\n            });\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0, duration: 3 });\r\n            projectDescription.current.visible = false;\r\n        }\r\n    }\r\n\r\n    const onExitPreviewMode = (e: MouseEvent) => {\r\n        e.stopPropagation();\r\n        if (active) {\r\n            preventAnimation();\r\n            setEnteredPreviewMode(false);\r\n            if (medium === 'desktop')\r\n                timeline.to(project.current.position, { x: 16, y: 0, z: -17.5 });\r\n            else\r\n                timeline.to(project.current.position, { x: 16.5, y: 0, z: -17.5 });\r\n            timeline.to(project.current.rotation, { y: -0.2, duration: 1 });\r\n            gsap.to(projectDescription.current.children[0].material, { opacity: 0.5, duration: 3 });\r\n            projectDescription.current.visible = true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <group\r\n                ref={project}\r\n                onClick={fullScreen ? (e) => onEnterPreviewMode(e) : (e) => onSelected(e)}\r\n                onPointerMissed={fullScreen ? (e) => onExitPreviewMode(e) : null}\r\n                onPointerOver={enteredPreviewMode ? () => setHovered(false) : () => setHovered(true)}\r\n                onPointerOut={enteredPreviewMode ? () => setHovered(true) : () => setHovered(false)}\r\n            >\r\n                <primitive\r\n                    visible={false}\r\n                    object={vidObject}\r\n                    position-z={0.08}\r\n                />\r\n                <RoundedBox args={medium == 'desktop' ? [2, 1, 0.1] : [1, 2, 0.1]}>\r\n                    <meshPhongMaterial\r\n                        attach=\"material\"\r\n                        color=\"#000\"\r\n                        opacity={0}\r\n                        transparent={true}\r\n                    />\r\n                </RoundedBox>\r\n            </group>\r\n            <group\r\n                ref={projectDescription}\r\n                position={[14.3, 0, -16]}\r\n                visible={false}\r\n            >\r\n                <mesh>\r\n                    <planeBufferGeometry args={[1.5, 1.5]} />\r\n                    <meshStandardMaterial\r\n                        color='#000'\r\n                        transparent\r\n                    />\r\n                </mesh>\r\n                <group>\r\n                    <Text\r\n                        color='#d4af37'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.1}\r\n                        maxWidth={1.5}\r\n                        textAlign='center'\r\n                        anchorY={-0.7}\r\n                        layers={[1]}\r\n                    >\r\n                        {t(`projectTitles.${id}`)}\r\n                    </Text>\r\n                    <Text\r\n                        color='#fff'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.08}\r\n                        maxWidth={1}\r\n                        textAlign='center'\r\n                        anchorY={-0.5}\r\n                        lineHeight={2}\r\n                        layers={[1]}\r\n                    >\r\n                        {t(`projectDesc.${id}`)}\r\n                    </Text>\r\n                    <Text\r\n                        color='#fff'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.06}\r\n                        maxWidth={1}\r\n                        textAlign='center'\r\n                        anchorY={0.3}\r\n                        lineHeight={2}\r\n                        layers={[1]}\r\n                    >\r\n                        {preview}\r\n                    </Text>\r\n                </group>\r\n                {logos.map((logo: string, index: number) => {\r\n                    const texture = new TextureLoader().load(`images/logos/${logo}.png`);\r\n\r\n                    return (\r\n                        <Fragment key={index}>\r\n                            <mesh\r\n                                position-x={0.5 * (index % 3) - 0.5}\r\n                                position-y={index < 3 ? -0.5 : -0.7}\r\n                            >\r\n                                <planeBufferGeometry args={[0.2, 0.1]} />\r\n                                <meshStandardMaterial map={texture} transparent />\r\n                            </mesh>\r\n                        </Fragment>\r\n                    )\r\n                })}\r\n            </group>\r\n            {\r\n                fullScreen &&\r\n                <Text\r\n                    ref={exit}\r\n                    position={[16.8, -1, -16.5]}\r\n                    color='#d4af37'\r\n                    font='fonts/Oswald.ttf'\r\n                    fontSize={0.2}\r\n                    onClick={() => onExit()}\r\n                    layers={[1]}\r\n                >\r\n                    {t('exit')}\r\n                </Text>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Project;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Globe.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Texts.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Photo.tsx",["145"],"import { useEffect, useMemo, useRef } from 'react';\r\nimport { useLoader } from '@react-three/fiber'\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport gsap from 'gsap';\r\nimport photoVertexShader from '../shaders/photoVertex.glsl';\r\nimport photoFragmentShader from '../shaders/photoFragment.glsl';\r\nimport { DoubleSide } from 'three';\r\n\r\nconst Photo = ({ focus }: { focus: boolean }): JSX.Element => {\r\n    const photo = useRef(null);\r\n    const row: number = 3;\r\n    const col: number = 4;\r\n    // const particlesNum: number = row * col;\r\n    const photoTexture = useLoader(TextureLoader, 'images/photo.png');\r\n    const maskTexture = useLoader(TextureLoader, 'images/mask.png');\r\n\r\n    const rand = (a: number, b: number) => a + (b - a) * Math.random();\r\n\r\n    const [positions, coordinates, speeds, offset] = useMemo(() => {\r\n        const initialPositions: Array<number> = [];\r\n        const initialCoordinates: Array<number> = [];\r\n        const initialSpeeds: Array<number> = [];\r\n        const initialOffset: Array<number> = [];\r\n\r\n        for (let y = 0; y < row; y += 0.01) {\r\n            let posY: number = y - row / 2;\r\n            for (let x = 0; x < col; x += 0.01) {\r\n                let posX: number = x - col / 2;\r\n                initialPositions.push(posY * 2);\r\n                initialPositions.push(posX * 2);\r\n                initialPositions.push(0);\r\n                initialCoordinates.push(y);\r\n                initialCoordinates.push(x);\r\n                initialCoordinates.push(0);\r\n                initialSpeeds.push(rand(0.4, 1));\r\n                initialOffset.push(rand(0, 5));\r\n            }\r\n        }\r\n\r\n        const positions: Float32Array = new Float32Array(initialPositions);\r\n        const coordinates: Float32Array = new Float32Array(initialCoordinates);\r\n        const speeds: Float32Array = new Float32Array(initialSpeeds);\r\n        const offset: Float32Array = new Float32Array(initialOffset);\r\n        return [positions, coordinates, speeds, offset];\r\n    }, [])\r\n\r\n    const uniforms = useMemo(() => ({\r\n        progress: { value: 0 },\r\n        photo: { value: photoTexture },\r\n        mask: { value: maskTexture },\r\n        move: { value: 5 },\r\n        time: { value: 0 }\r\n    }), [])\r\n\r\n    useEffect(() => {\r\n        focus ?\r\n            photo.current && gsap.to(photo.current.material.uniforms.move, { value: 0, duration: 5, ease: 'expo.out', }) :\r\n            photo.current && gsap.to(photo.current.material.uniforms.move, { value: 5, duration: 5, ease: 'expo.out', onUpdate: () => photo.current.geometry.verticesNeedUpdate = true, });\r\n    }, [focus])\r\n\r\n    return (\r\n        <points\r\n            ref={photo}\r\n        >\r\n            <bufferGeometry>\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"position\"]}\r\n                    count={positions.length / 3}\r\n                    array={positions}\r\n                    itemSize={3}\r\n                />\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"aCoordinates\"]}\r\n                    count={coordinates.length / 3}\r\n                    array={coordinates}\r\n                    itemSize={3}\r\n                />\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"aSpeed\"]}\r\n                    count={speeds.length}\r\n                    array={speeds}\r\n                    itemSize={1}\r\n                />\r\n                <bufferAttribute\r\n                    attachObject={[\"attributes\", \"aOffset\"]}\r\n                    count={offset.length}\r\n                    array={offset}\r\n                    itemSize={1}\r\n                />\r\n            </bufferGeometry>\r\n            <shaderMaterial\r\n                vertexShader={photoVertexShader}\r\n                fragmentShader={photoFragmentShader}\r\n                uniforms={uniforms}\r\n                side={DoubleSide}\r\n                transparent={true}\r\n            // depthTest={false}\r\n            // depthWrite={false}\r\n            />\r\n        </points>\r\n    )\r\n}\r\n\r\nexport default Photo;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\home\\Objects.tsx",["146","147","148","149","150","151","152","153","154","155","156","157"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\components\\DialogBox.tsx",["158","159","160","161","162","163"],"import { useContext, useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { useThree } from '@react-three/fiber';\r\nimport { AppContext } from '../context';\r\nimport { Html } from '@react-three/drei';\r\n\r\ninterface DialogBoxProps {\r\n    title: string,\r\n    content: string,\r\n    agreeTxt: string,\r\n    classes: any,\r\n    disagreeTxt?: string,\r\n    onAgreed?: () => void,\r\n}\r\n\r\nconst styles = {\r\n    container: {\r\n        background: '#000',\r\n        zIndex: 999\r\n    },\r\n    text: {\r\n        color: '#fff'\r\n    },\r\n    button: {\r\n        color: '#d4af37'\r\n    }\r\n};\r\n\r\nconst DialogBox = ({ title, content, agreeTxt, classes, disagreeTxt, onAgreed, }: DialogBoxProps): JSX.Element => {\r\n    const [open, setOpen] = useState<boolean>(true);\r\n\r\n    const handleAgreed = () => {\r\n        onAgreed && onAgreed();\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle className={`${classes.container} ${classes.text}`} id='alert-dialog-title'>{title}</DialogTitle>\r\n            <DialogContent className={classes.container}>\r\n                <DialogContentText className={classes.text} id='alert-dialog-description'>\r\n                    {content}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions className={classes.container}>\r\n                <Button className={classes.button} onClick={handleAgreed} autoFocus>\r\n                    {agreeTxt}\r\n                </Button>\r\n                {\r\n                    disagreeTxt &&\r\n                    <Button className={classes.button} onClick={handleClose}>\r\n                        {disagreeTxt}\r\n                    </Button>\r\n                }\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(DialogBox);\r\n",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":1,"column":40,"nodeType":"170","messageId":"171","endLine":1,"endColumn":46},{"ruleId":"168","severity":1,"message":"172","line":7,"column":33,"nodeType":"170","messageId":"171","endLine":7,"endColumn":45},{"ruleId":"168","severity":1,"message":"173","line":7,"column":47,"nodeType":"170","messageId":"171","endLine":7,"endColumn":54},{"ruleId":"168","severity":1,"message":"174","line":9,"column":18,"nodeType":"170","messageId":"171","endLine":9,"endColumn":26},{"ruleId":"168","severity":1,"message":"175","line":9,"column":28,"nodeType":"170","messageId":"171","endLine":9,"endColumn":36},{"ruleId":"176","severity":1,"message":"177","line":82,"column":6,"nodeType":"178","endLine":82,"endColumn":18,"suggestions":"179"},{"ruleId":"168","severity":1,"message":"174","line":9,"column":10,"nodeType":"170","messageId":"171","endLine":9,"endColumn":18},{"ruleId":"168","severity":1,"message":"180","line":11,"column":8,"nodeType":"170","messageId":"171","endLine":11,"endColumn":17},{"ruleId":"176","severity":1,"message":"181","line":19,"column":8,"nodeType":"178","endLine":19,"endColumn":10,"suggestions":"182"},{"ruleId":"164","replacedBy":"183"},{"ruleId":"166","replacedBy":"184"},{"ruleId":"176","severity":1,"message":"185","line":54,"column":8,"nodeType":"178","endLine":54,"endColumn":10,"suggestions":"186"},{"ruleId":"168","severity":1,"message":"174","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":18},{"ruleId":"168","severity":1,"message":"187","line":6,"column":10,"nodeType":"170","messageId":"171","endLine":6,"endColumn":27},{"ruleId":"168","severity":1,"message":"173","line":7,"column":10,"nodeType":"170","messageId":"171","endLine":7,"endColumn":17},{"ruleId":"176","severity":1,"message":"188","line":38,"column":8,"nodeType":"178","endLine":38,"endColumn":21,"suggestions":"189"},{"ruleId":"176","severity":1,"message":"190","line":59,"column":8,"nodeType":"178","endLine":59,"endColumn":22,"suggestions":"191"},{"ruleId":"168","severity":1,"message":"192","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":13},{"ruleId":"168","severity":1,"message":"193","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":13},{"ruleId":"168","severity":1,"message":"194","line":7,"column":8,"nodeType":"170","messageId":"171","endLine":7,"endColumn":13},{"ruleId":"168","severity":1,"message":"195","line":13,"column":12,"nodeType":"170","messageId":"171","endLine":13,"endColumn":17},{"ruleId":"168","severity":1,"message":"196","line":1,"column":58,"nodeType":"170","messageId":"171","endLine":1,"endColumn":66},{"ruleId":"168","severity":1,"message":"197","line":10,"column":10,"nodeType":"170","messageId":"171","endLine":10,"endColumn":22},{"ruleId":"168","severity":1,"message":"175","line":12,"column":10,"nodeType":"170","messageId":"171","endLine":12,"endColumn":18},{"ruleId":"168","severity":1,"message":"198","line":13,"column":10,"nodeType":"170","messageId":"171","endLine":13,"endColumn":21},{"ruleId":"168","severity":1,"message":"199","line":17,"column":25,"nodeType":"170","messageId":"171","endLine":17,"endColumn":28},{"ruleId":"176","severity":1,"message":"200","line":41,"column":8,"nodeType":"178","endLine":41,"endColumn":10,"suggestions":"201"},{"ruleId":"176","severity":1,"message":"202","line":55,"column":8,"nodeType":"178","endLine":55,"endColumn":17,"suggestions":"203"},{"ruleId":"176","severity":1,"message":"204","line":88,"column":8,"nodeType":"178","endLine":88,"endColumn":16,"suggestions":"205"},{"ruleId":"176","severity":1,"message":"206","line":100,"column":8,"nodeType":"178","endLine":100,"endColumn":15,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":170,"column":42,"nodeType":"210","messageId":"211","endLine":170,"endColumn":44},{"ruleId":"176","severity":1,"message":"212","line":53,"column":9,"nodeType":"178","endLine":53,"endColumn":11,"suggestions":"213"},{"ruleId":"168","severity":1,"message":"214","line":3,"column":10,"nodeType":"170","messageId":"171","endLine":3,"endColumn":22},{"ruleId":"168","severity":1,"message":"215","line":3,"column":24,"nodeType":"170","messageId":"171","endLine":3,"endColumn":28},{"ruleId":"168","severity":1,"message":"216","line":3,"column":30,"nodeType":"170","messageId":"171","endLine":3,"endColumn":44},{"ruleId":"168","severity":1,"message":"217","line":3,"column":46,"nodeType":"170","messageId":"171","endLine":3,"endColumn":62},{"ruleId":"168","severity":1,"message":"218","line":4,"column":10,"nodeType":"170","messageId":"171","endLine":4,"endColumn":30},{"ruleId":"168","severity":1,"message":"219","line":6,"column":10,"nodeType":"170","messageId":"171","endLine":6,"endColumn":17},{"ruleId":"168","severity":1,"message":"220","line":7,"column":10,"nodeType":"170","messageId":"171","endLine":7,"endColumn":27},{"ruleId":"168","severity":1,"message":"221","line":12,"column":11,"nodeType":"170","messageId":"171","endLine":12,"endColumn":18},{"ruleId":"168","severity":1,"message":"222","line":14,"column":11,"nodeType":"170","messageId":"171","endLine":14,"endColumn":17},{"ruleId":"168","severity":1,"message":"223","line":15,"column":13,"nodeType":"170","messageId":"171","endLine":15,"endColumn":18},{"ruleId":"168","severity":1,"message":"224","line":16,"column":13,"nodeType":"170","messageId":"171","endLine":16,"endColumn":18},{"ruleId":"168","severity":1,"message":"225","line":16,"column":20,"nodeType":"170","messageId":"171","endLine":16,"endColumn":22},{"ruleId":"168","severity":1,"message":"226","line":1,"column":10,"nodeType":"170","messageId":"171","endLine":1,"endColumn":20},{"ruleId":"168","severity":1,"message":"227","line":1,"column":22,"nodeType":"170","messageId":"171","endLine":1,"endColumn":31},{"ruleId":"168","severity":1,"message":"175","line":9,"column":10,"nodeType":"170","messageId":"171","endLine":9,"endColumn":18},{"ruleId":"168","severity":1,"message":"228","line":10,"column":10,"nodeType":"170","messageId":"171","endLine":10,"endColumn":20},{"ruleId":"168","severity":1,"message":"229","line":11,"column":10,"nodeType":"170","messageId":"171","endLine":11,"endColumn":14},{"ruleId":"168","severity":1,"message":"230","line":43,"column":11,"nodeType":"170","messageId":"171","endLine":43,"endColumn":26},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'Intersection' is defined but never used.","'Vector2' is defined but never used.","'useFrame' is defined but never used.","'useThree' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'adjustCanvasSize'. Either include it or remove the dependency array.","ArrayExpression",["233"],"'DialogBox' is defined but never used.","React Hook useEffect has a missing dependency: 'updateMousePosition'. Either include it or remove the dependency array.",["234"],["231"],["232"],"React Hook useMemo has missing dependencies: 'camera', 'gl', and 'scene'. Either include them or remove the dependency array.",["235"],"'PerspectiveCamera' is defined but never used.","React Hook useEffect has missing dependencies: 'camera' and 'onNavigationEnded'. Either include them or remove the dependency array.",["236"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["237"],"'Photo' is defined but never used.","'Texts' is defined but never used.","'Globe' is defined but never used.","'focus' is assigned a value but never used.","'Suspense' is defined but never used.","'PointerEvent' is defined but never used.","'Interaction' is defined but never used.","'gui' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'medium' and 'vidPlayer'. Either include them or remove the dependency array.",["238"],"React Hook useEffect has missing dependencies: 'active' and 'fullScreen'. Either include them or remove the dependency array.",["239"],"React Hook useEffect has missing dependencies: 'medium', 'name', 'timeline', 'vidPlayer', 'x', and 'y'. Either include them or remove the dependency array.",["240"],"React Hook useEffect has missing dependencies: 'x' and 'y'. Either include them or remove the dependency array.",["241"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useMemo has missing dependencies: 'maskTexture' and 'photoTexture'. Either include them or remove the dependency array.",["242"],"'LinearFilter' is defined but never used.","'Mesh' is defined but never used.","'PMREMGenerator' is defined but never used.","'UnsignedByteType' is defined but never used.","'HDRCubeTextureLoader' is defined but never used.","'Vector3' is defined but never used.","'rotateAroundPoint' is defined but never used.","'monitor' is assigned a value but never used.","'tablet' is assigned a value but never used.","'state' is assigned a value but never used.","'scene' is assigned a value but never used.","'gl' is assigned a value but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","'AppContext' is defined but never used.","'Html' is defined but never used.","'handleClickOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},"Update the dependencies array to be: [gl, camera, adjustCanvasSize]",{"range":"263","text":"264"},"Update the dependencies array to be: [updateMousePosition]",{"range":"265","text":"266"},"Update the dependencies array to be: [camera, gl, scene]",{"range":"267","text":"268"},"Update the dependencies array to be: [camera, currentItem, onNavigationEnded]",{"range":"269","text":"270"},"Update the dependencies array to be: [dispatch, projectItems]",{"range":"271","text":"272"},"Update the dependencies array to be: [medium, vidPlayer]",{"range":"273","text":"274"},"Update the dependencies array to be: [active, fullScreen, hovered]",{"range":"275","text":"276"},"Update the dependencies array to be: [active, medium, name, timeline, vidPlayer, x, y]",{"range":"277","text":"278"},"Update the dependencies array to be: [focus, x, y]",{"range":"279","text":"280"},"Update the dependencies array to be: [maskTexture, photoTexture]",{"range":"281","text":"282"},[2880,2892],"[gl, camera, adjustCanvasSize]",[690,692],"[updateMousePosition]",[1999,2001],"[camera, gl, scene]",[1643,1656],"[camera, currentItem, onNavigationEnded]",[3020,3034],"[dispatch, projectItems]",[1854,1856],"[medium, vidPlayer]",[2519,2528],"[active, fullScreen, hovered]",[4149,4157],"[active, medium, name, timeline, vidPlayer, x, y]",[4899,4906],"[focus, x, y]",[2248,2250],"[maskTexture, photoTexture]"]
[{"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx":"1","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts":"2","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\App.tsx":"3","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Navbar.tsx":"4","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Home.tsx":"5","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Scene.tsx":"6","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Education.tsx":"7","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Projects.tsx":"8","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx":"9","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx":"10","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Contact.tsx":"11","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\i18n.ts":"12","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\functions.ts":"13","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Loader.tsx":"14","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\SceneController.tsx":"15"},{"size":1173,"mtime":1615244637424,"results":"16","hashOfConfig":"17"},{"size":440,"mtime":1614182950498,"results":"18","hashOfConfig":"17"},{"size":1728,"mtime":1621546700857,"results":"19","hashOfConfig":"17"},{"size":2372,"mtime":1617370627810,"results":"20","hashOfConfig":"17"},{"size":6015,"mtime":1621549314174,"results":"21","hashOfConfig":"17"},{"size":1681,"mtime":1617233278940,"results":"22","hashOfConfig":"17"},{"size":3239,"mtime":1621549343994,"results":"23","hashOfConfig":"17"},{"size":11976,"mtime":1621550460979,"results":"24","hashOfConfig":"17"},{"size":1166,"mtime":1617370915067,"results":"25","hashOfConfig":"17"},{"size":1246,"mtime":1616020094322,"results":"26","hashOfConfig":"17"},{"size":3237,"mtime":1617368668266,"results":"27","hashOfConfig":"17"},{"size":837,"mtime":1615245228365,"results":"28","hashOfConfig":"17"},{"size":932,"mtime":1621545499197,"results":"29","hashOfConfig":"17"},{"size":516,"mtime":1616965634255,"results":"30","hashOfConfig":"17"},{"size":1636,"mtime":1621546653759,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"g7aof9",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx",[],["71","72"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\App.tsx",["73"],"import React, { useContext } from 'react';\r\nimport './styles/app.css';\r\nimport { AppContext } from './context';\r\nimport { Types } from './context/reducers';\r\nimport { Canvas } from 'react-three-fiber';\r\nimport Navbar from './Navbar';\r\nimport Scene from './Scene';\r\nimport { Stars, Stats, useContextBridge } from '@react-three/drei';\r\n\r\nconst navbar_items: Array<NavbarItem> = [\r\n  { id: 0, name: 'education' },\r\n  { id: 1, name: 'projects' },\r\n  { id: 2, name: 'contact' },\r\n]\r\n\r\nexport interface NavbarItem {\r\n  id: number,\r\n  name: string,\r\n}\r\n\r\nconst App = (): JSX.Element => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const ContextBridge = useContextBridge(AppContext);\r\n\r\n  return (\r\n    <>\r\n      <Navbar items={navbar_items} />\r\n      <Canvas\r\n        colorManagement={false}\r\n        style={{ width: '100vw', height: '100vh' }}\r\n        onCreated={({ camera, gl: { domElement } }) => {\r\n          camera.position.set(15, 0, -15);\r\n          dispatch({\r\n            type: Types.SetCanvas,\r\n            payload: domElement,\r\n          });\r\n          dispatch({\r\n            type: Types.SetCamera,\r\n            payload: camera,\r\n          });\r\n        }}\r\n      >\r\n        <ContextBridge>\r\n          <Scene />\r\n        </ContextBridge>\r\n        {/* <Stars\r\n          radius={100} // Radius of the inner sphere (default=100)\r\n          depth={50} // Depth of area where stars should fit (default=50)\r\n          count={5000} // Amount of stars (default=5000)\r\n          factor={4} // Size factor (default=4)\r\n          saturation={0} // Saturation 0-1 (default=0)\r\n          fade // Faded dots (default=false)\r\n        /> */}\r\n      </Canvas>\r\n      <Stats showPanel={0} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Navbar.tsx",["74"],"import React, { useContext, useState } from 'react';\r\nimport './styles/navbar.css';\r\nimport { NavbarItem } from './App';\r\nimport { AppContext } from './context';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Types } from './context/reducers';\r\n\r\ninterface NavProps {\r\n    items: Array<NavbarItem>\r\n}\r\n\r\ninterface LanguageItem {\r\n    name: string,\r\n    src: string,\r\n}\r\n\r\nconst Navbar = ({ items }: NavProps): JSX.Element => {\r\n    console.log('navbar rendered');\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { fullScreen } = state.scene;\r\n    const [languages] = useState<Array<LanguageItem>>([\r\n        { name: 'pl', src: 'images/flags/poland.png' },\r\n        { name: 'en', src: 'images/flags/england.png' }\r\n    ]);\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const onNavigationStarted = (name: string) => {\r\n        dispatch({\r\n            type: Types.SetCurrentItem,\r\n            payload: name,\r\n        });\r\n    }\r\n\r\n    const onLanguageChanged = (language: string) => {\r\n        i18n.changeLanguage(language);\r\n    };\r\n\r\n    return !fullScreen ? (\r\n        <div className='navbar-container'>\r\n            <div className=\"logo-container\">\r\n                <svg\r\n                    className=\"logo\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 200 100\"\r\n                    fill=\"rgba(255, 255, 255, 0)\"\r\n                >\r\n                    <path d=\"M 50 100 L 50 0 L 100 50 L 150 0 L 150 100\" />\r\n                </svg>\r\n                <Link className='full-name' to={'/'} onClick={() => onNavigationStarted('home.to')}>KAMIL MROCZEK</ Link>\r\n            </div>\r\n            <ul>\r\n                {\r\n                    items.map((item: NavbarItem, index: number) =>\r\n                        <li key={index}>\r\n                            <Link to={`/${item.name}`} onClick={() => onNavigationStarted(`${item.name}.to`)}>{t(`navItems.${index}`)}</Link>\r\n                        </li>\r\n                    )\r\n                }\r\n                {\r\n                    languages.map((language: LanguageItem, index: number) =>\r\n                        <img key={index} src={language.src} onClick={() => onLanguageChanged(language.name)} />)\r\n                }\r\n            </ul>\r\n        </div>\r\n    ) : null;\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Home.tsx",["75","76","77"],"import React, { Suspense, useContext, useEffect, useRef, useState } from 'react';\r\nimport { useFrame, useLoader } from 'react-three-fiber'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { Vector3 } from 'three/src/math/Vector3';\r\nimport { rotateAroundPoint } from './functions';\r\nimport { Preload, Text } from '@react-three/drei';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AppContext } from './context';\r\nimport Loader from './Loader';\r\nimport gsap from 'gsap';\r\n\r\nconst Texts = ({ focus }: { focus: boolean }): JSX.Element => {\r\n    const texts = useRef([]);\r\n    const { t, i18n } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (focus) {\r\n            texts.current[0] && gsap.to(texts.current[0].position, { x: -2, y: 0, z: 0.5, duration: 5, ease: 'expo.out' });\r\n            texts.current[1] && gsap.to(texts.current[1].position, { x: 2, y: -1, z: 0.5, duration: 5, ease: 'expo.out' });\r\n            texts.current[0] && gsap.to(texts.current[0], { duration: 5, ease: 'expo.out', fillOpacity: 1 });\r\n            texts.current[1] && gsap.to(texts.current[1], { duration: 5, ease: 'expo.out', fillOpacity: 1 });\r\n        } else {\r\n            console.log('unfocused');\r\n            texts.current[0] && gsap.to(texts.current[0].position, { x: 0, y: 0, z: 0, duration: 5, ease: 'expo.out' });\r\n            texts.current[1] && gsap.to(texts.current[1].position, { x: 0, y: 0, z: 0, duration: 5, ease: 'expo.out' });\r\n            texts.current[0] && gsap.to(texts.current[0], { duration: 5, ease: 'expo.out', fillOpacity: 0 });\r\n            texts.current[1] && gsap.to(texts.current[1], { duration: 5, ease: 'expo.out', fillOpacity: 0 });\r\n        }\r\n    }, [focus])\r\n\r\n    return (\r\n        <>\r\n            <Text\r\n                ref={el => texts.current[0] = el}\r\n                color='#fff'\r\n                font='fonts/Oswald.ttf'\r\n                fontSize={1}\r\n                textAlign='center'\r\n                fillOpacity={0}\r\n            >\r\n                {t('homeDesc.0')}\r\n            </Text>\r\n            <Text\r\n                ref={el => texts.current[1] = el}\r\n                color='#d4af37'\r\n                font='fonts/Oswald.ttf'\r\n                fontSize={1}\r\n                textAlign='center'\r\n                fillOpacity={0}\r\n            >\r\n                {t('homeDesc.1')}\r\n            </Text>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Globe = ({ focus }: { focus: boolean }): JSX.Element => {\r\n    const globe = useRef(null);\r\n    const texture = useLoader(TextureLoader, 'images/textures/night.jpg');\r\n\r\n    useFrame(() => {\r\n        globe.current.rotation.y -= 0.005;\r\n    })\r\n\r\n    useEffect(() => {\r\n        focus ?\r\n            globe.current && gsap.to(globe.current.material, { duration: 5, ease: 'expo.out', opacity: 1 }) :\r\n            globe.current && gsap.to(globe.current.material, { duration: 5, ease: 'expo.out', opacity: 0 });\r\n    }, [focus])\r\n\r\n    return (\r\n        <mesh\r\n            ref={globe}\r\n            position={[0, 0, -6]}\r\n        // receiveShadow\r\n        >\r\n            <sphereGeometry args={[6, 100, 100]} />\r\n            <meshPhongMaterial transparent map={texture} opacity={0} />\r\n        </mesh>\r\n    )\r\n}\r\n\r\n// const Objects = ({ focus }: { focus: boolean }): JSX.Element => {\r\nconst Objects = (): JSX.Element => {\r\n    const monitor = useLoader(GLTFLoader, 'models/monitor.glb');\r\n    const phone = useLoader(GLTFLoader, 'models/phone.glb');\r\n    const tablet = useLoader(GLTFLoader, 'models/tablet.glb');\r\n\r\n    useFrame(() => {\r\n        monitor.scene && rotateAroundPoint(monitor.scene, new Vector3(0, 0, -3), new Vector3(0, 1, 0), 1 * Math.PI / 180, true);\r\n        phone.scene && rotateAroundPoint(phone.scene, new Vector3(0, 0, -3), new Vector3(0, 1, 0), 1 * Math.PI / 180, true);\r\n        tablet.scene && rotateAroundPoint(tablet.scene, new Vector3(0, 0, -3), new Vector3(0, 1, 0), 1 * Math.PI / 180, true);\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <mesh position={[-4, 1, 0]}>\r\n                <primitive object={monitor.scene} />\r\n            </mesh>\r\n            <mesh position={[-4, -0.5, 0]}>\r\n                <primitive object={phone.scene} />\r\n            </mesh>\r\n            <mesh position={[4, 1, 0]}>\r\n                <primitive object={tablet.scene} />\r\n            </mesh>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Photo = ({ focus }: { focus: boolean }): JSX.Element => {\r\n    const photoTexture = useLoader(TextureLoader, 'images/photo.png');\r\n    const photo = useRef(null);\r\n\r\n    useEffect(() => {\r\n        focus ?\r\n            photo.current && gsap.to(photo.current.position, { x: 0, y: 0, z: 0, duration: 2, ease: 'slow (0.1, 0.7, false)' }) :\r\n            photo.current && gsap.to(photo.current.position, { x: 0, y: 0, z: 6, duration: 2, ease: 'slow (0.1, 0.7, false)' });\r\n    }, [focus])\r\n\r\n    return (\r\n        <mesh\r\n            ref={photo}\r\n            position={[0, 0, 6]}\r\n        >\r\n            <planeGeometry args={[6, 8]} />\r\n            <meshStandardMaterial transparent map={photoTexture} />\r\n        </mesh>\r\n    )\r\n}\r\n\r\nconst Home = React.memo(() => {\r\n    console.log('home rendered');\r\n    const { state } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        currentItem == 'home.end' ? setFocus(true) : setFocus(false);\r\n    }, [currentItem])\r\n\r\n    return (\r\n        <>\r\n            <Suspense fallback={<Loader />}>\r\n                <Photo focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Globe focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Texts focus={focus} />\r\n            </Suspense>\r\n            <Suspense fallback={<Loader />}>\r\n                <Objects />\r\n                {/* <Preload all /> */}\r\n            </Suspense>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Home;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Scene.tsx",["78","79"],"import React from 'react';\r\nimport Home from './Home';\r\nimport Education from './Education';\r\nimport Projects from './Projects';\r\nimport Contact from './Contact';\r\nimport { TextureLoader, BackSide } from 'three';\r\nimport SceneController from './SceneController';\r\nimport { OrbitControls } from '@react-three/drei';\r\n\r\nconst Skybox = React.memo(() => {\r\n    console.log('skybox rendered');\r\n    const textures: Array<string> = [\r\n        'images/textures/skybox/space_ft.png',\r\n        'images/textures/skybox/space_bk.png',\r\n        'images/textures/skybox/space_up.png',\r\n        'images/textures/skybox/space_dn.png',\r\n        'images/textures/skybox/space_rt.png',\r\n        'images/textures/skybox/space_lf.png'\r\n    ];\r\n\r\n    return <mesh>\r\n        <boxBufferGeometry args={[1000, 1000, 1000]} />\r\n        {\r\n            textures.map((value: string, i: number) => {\r\n                const texture = new TextureLoader().load(value);\r\n                console.log(texture);\r\n                return <meshBasicMaterial key={i} attachArray='material' map={texture} side={BackSide} />;\r\n            })\r\n        }\r\n    </mesh>\r\n})\r\n\r\nconst Scene = (): JSX.Element => {\r\n    console.log('scene rendered');\r\n\r\n    return (\r\n        <>\r\n            <Home />\r\n            <Education />\r\n            <Projects />\r\n            <Contact />\r\n            <directionalLight position={[0, 1, 1]} intensity={1} color={'#fff'} />\r\n            <ambientLight color={'#404040'} />\r\n            <SceneController />\r\n            {/* <Suspense fallback={null}>\r\n                <Skybox />\r\n            </Suspense> */}\r\n            {/* <OrbitControls /> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Scene;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Education.tsx",["80","81","82","83"],"import React, { Suspense, useContext, useEffect, useRef, useState } from 'react';\r\nimport { useFrame, useLoader } from 'react-three-fiber'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { Text } from '@react-three/drei';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Loader from './Loader';\r\nimport { AppContext } from './context';\r\nimport gsap from 'gsap';\r\n\r\ninterface InstitutionItem {\r\n    id: number,\r\n    name?: string,\r\n    objSrc: string,\r\n    desc?: string,\r\n    scale: number,\r\n    x: number,\r\n    y: number,\r\n    focus?: boolean\r\n}\r\n\r\nconst Institution = ({ id, name, objSrc, desc, scale, x, y, focus }: InstitutionItem): JSX.Element => {\r\n    const obj = useLoader(GLTFLoader, objSrc);\r\n    const insitution = useRef(null);\r\n\r\n    useFrame(() => {\r\n        obj.scene.rotation.y += 0.01;\r\n    })\r\n\r\n    useEffect(() => {\r\n        focus ?\r\n            insitution.current && gsap.to(insitution.current.scale, { x: 1, y: 1, z: 1, duration: 5, ease: 'expo.out' }) :\r\n            insitution.current && gsap.to(insitution.current.scale, { x: 0, y: 0, z: 0, duration: 5, ease: 'expo.out' });\r\n    }, [focus])\r\n\r\n    return (\r\n        <group\r\n            ref={insitution}\r\n            position={[x, y, -18]}\r\n            scale={[0, 0, 0]}\r\n        >\r\n            <mesh scale={[scale, scale, scale]}>\r\n                <primitive object={obj.scene} />\r\n                <meshBasicMaterial />\r\n            </mesh>\r\n            <Text\r\n                color='#d4af37'\r\n                font='fonts/Oswald.ttf'\r\n                fontSize={0.3}\r\n                textAlign='center'\r\n                anchorY={0.5}\r\n            >\r\n                {name}\r\n            </Text>\r\n            <Text\r\n                color='#fff'\r\n                font='fonts/Oswald.ttf'\r\n                fontSize={0.15}\r\n                textAlign='center'\r\n                anchorY={2}\r\n            >\r\n                {desc}\r\n            </Text>\r\n        </group>\r\n    )\r\n}\r\n\r\nconst Education = React.memo(() => {\r\n    const [institutionItems, setInstitutionItems] = useState<Array<InstitutionItem>>(\r\n        [\r\n            { id: 0, objSrc: 'models/school.glb', scale: 0.1, x: -3, y: 1 },\r\n            { id: 1, objSrc: 'models/college.glb', scale: 0.2, x: 0, y: 1 },\r\n            { id: 2, objSrc: 'models/uni.glb', scale: 0.2, x: 3, y: 1 },\r\n        ]\r\n    );\r\n    const { t, i18n } = useTranslation();\r\n    const { state } = useContext(AppContext);\r\n    const { currentItem } = state.scene;\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        currentItem == 'education.end' ? setFocus(true) : setFocus(false);\r\n    }, [currentItem])\r\n\r\n    return (\r\n        <Suspense fallback={<Loader />}>\r\n            {\r\n                institutionItems.map((e: InstitutionItem, i: number) =>\r\n                    <Institution\r\n                        key={i} {...e}\r\n                        name={t(`educationTitles.${i}`)}\r\n                        desc={t(`educationDesc.${i}`)}\r\n                        focus={focus}\r\n                    />\r\n                )\r\n            }\r\n        </Suspense>\r\n    )\r\n})\r\n\r\nexport default Education;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Projects.tsx",["84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Contact.tsx",["103"],"import React from 'react';\r\nimport './styles/contact.css';\r\nimport { Html } from '@react-three/drei';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst ContactForm = (): JSX.Element => {\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <Html position={[15, 0, 0]} center>\r\n            <Formik\r\n                initialValues={{ name: '', email: '', phone: '', link: '', message: '' }}\r\n                validate={values => {\r\n                    const errors = { name: '', email: '', phone: '', link: '', message: '' };\r\n                    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) errors.email = t('contact.6');\r\n                    if (!values.name) errors.name = t('contact.7');\r\n                    if (!values.email) errors.email = t('contact.7');\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setTimeout(() => {\r\n                        alert(JSON.stringify(values, null, 2));\r\n                        setSubmitting(false);\r\n                    }, 400);\r\n                }}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form className='contact-form'>\r\n                        <div className='name'>\r\n                            <span className='material-icons'>person</span>\r\n                            <Field type='text' name='name' placeholder={t('contact.0')} />\r\n                            <ErrorMessage className='error' name='name' component='span' />\r\n                        </div>\r\n                        <div className='email'>\r\n                            <span className='material-icons'>email</span>\r\n                            <Field type='email' name='email' placeholder={t('contact.1')} />\r\n                            <ErrorMessage className='error' name='email' component='span' />\r\n                        </div>\r\n                        <div className='phone'>\r\n                            <span className='material-icons'>phone</span>\r\n                            <Field type='tel' name='phone' placeholder={t('contact.2')} />\r\n                            <ErrorMessage className='error' name='phone' component='span' />\r\n                        </div>\r\n                        <div className='link'>\r\n                            <span className='material-icons'>link</span>\r\n                            <Field type='url' name='link' placeholder={t('contact.3')} />\r\n                        </div>\r\n                        <div className='message'>\r\n                            <span className='material-icons'>message</span>\r\n                            <Field type='text' name='message' placeholder={t('contact.4')} as='textarea' />\r\n                        </div>\r\n                        <div className='break' />\r\n                        <button type='submit' disabled={isSubmitting}>{t('contact.5')}</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Html>\r\n    )\r\n}\r\n\r\nconst Contact = (): JSX.Element => {\r\n    console.log('contact rendered');\r\n\r\n    return (\r\n        <ContactForm />\r\n    )\r\n}\r\n\r\nexport default Contact;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\i18n.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\functions.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Loader.tsx",["104"],"import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Text, useProgress } from '@react-three/drei';\r\n\r\nconst Loader = (): JSX.Element => {\r\n    const { progress } = useProgress();\r\n    const { t, i18n } = useTranslation();\r\n    console.log(progress);\r\n\r\n    return <Text\r\n        color='#d4af37'\r\n        font='fonts/Oswald.ttf'\r\n        fontSize={0.5}\r\n        textAlign='center'\r\n    >\r\n        {t('loadingMessage', { progress: progress })}\r\n    </Text>\r\n}\r\n\r\nexport default Loader;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\SceneController.tsx",["105","106","107","108"],"import React, { useContext, useEffect } from 'react';\r\nimport { useFrame } from 'react-three-fiber'\r\nimport { AppContext } from './context';\r\nimport { Vector3 } from 'three/src/math/Vector3';\r\nimport gsap from 'gsap';\r\nimport { Types } from './context/reducers';\r\n\r\nconst SceneController = (): JSX.Element => {\r\n    const { state, dispatch } = useContext(AppContext);\r\n    const { camera, currentItem } = state.scene;\r\n\r\n    const onNavigationEnded = (name: string) => {\r\n        dispatch({\r\n            type: Types.SetCurrentItem,\r\n            payload: name,\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        switch (currentItem) {\r\n            case 'home.to':\r\n                camera && gsap.to(camera.position, { x: 0, y: 0, z: 5, duration: 5, ease: 'expo.out', onComplete: () => onNavigationEnded('home.end') });\r\n                break;\r\n            case 'education.to':\r\n                camera && gsap.to(camera.position, { x: 0, y: 0, z: -15, duration: 5, ease: 'expo.out', onComplete: () => onNavigationEnded('education.end') });\r\n                break;\r\n            case 'projects.to':\r\n                camera && gsap.to(camera.position, { x: 15, y: 0, z: -15, duration: 5, ease: 'expo.out', onComplete: () => onNavigationEnded('projects.end') });\r\n                break;\r\n            case 'contact.to':\r\n                camera && gsap.to(camera.position, { x: 15, y: 0, z: 5, duration: 5, ease: 'expo.out', onComplete: () => onNavigationEnded('contact.end') });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [currentItem])\r\n\r\n    return null;\r\n}\r\n\r\nexport default SceneController;",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":8,"column":10,"nodeType":"115","messageId":"116","endLine":8,"endColumn":15},{"ruleId":"117","severity":1,"message":"118","line":62,"column":25,"nodeType":"119","endLine":62,"endColumn":112},{"ruleId":"113","severity":1,"message":"120","line":7,"column":10,"nodeType":"115","messageId":"116","endLine":7,"endColumn":17},{"ruleId":"113","severity":1,"message":"121","line":15,"column":16,"nodeType":"115","messageId":"116","endLine":15,"endColumn":20},{"ruleId":"122","severity":1,"message":"123","line":139,"column":21,"nodeType":"124","messageId":"125","endLine":139,"endColumn":23},{"ruleId":"113","severity":1,"message":"126","line":8,"column":10,"nodeType":"115","messageId":"116","endLine":8,"endColumn":23},{"ruleId":"113","severity":1,"message":"127","line":10,"column":7,"nodeType":"115","messageId":"116","endLine":10,"endColumn":13},{"ruleId":"113","severity":1,"message":"128","line":5,"column":10,"nodeType":"115","messageId":"116","endLine":5,"endColumn":23},{"ruleId":"113","severity":1,"message":"129","line":69,"column":30,"nodeType":"115","messageId":"116","endLine":69,"endColumn":49},{"ruleId":"113","severity":1,"message":"121","line":76,"column":16,"nodeType":"115","messageId":"116","endLine":76,"endColumn":20},{"ruleId":"122","severity":1,"message":"123","line":82,"column":21,"nodeType":"124","messageId":"125","endLine":82,"endColumn":23},{"ruleId":"113","severity":1,"message":"130","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":18},{"ruleId":"113","severity":1,"message":"131","line":2,"column":31,"nodeType":"115","messageId":"116","endLine":2,"endColumn":42},{"ruleId":"113","severity":1,"message":"132","line":2,"column":44,"nodeType":"115","messageId":"116","endLine":2,"endColumn":52},{"ruleId":"113","severity":1,"message":"133","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":17},{"ruleId":"113","severity":1,"message":"134","line":6,"column":16,"nodeType":"115","messageId":"116","endLine":6,"endColumn":20},{"ruleId":"113","severity":1,"message":"135","line":10,"column":8,"nodeType":"115","messageId":"116","endLine":10,"endColumn":12},{"ruleId":"113","severity":1,"message":"136","line":10,"column":16,"nodeType":"115","messageId":"116","endLine":10,"endColumn":27},{"ruleId":"113","severity":1,"message":"137","line":11,"column":10,"nodeType":"115","messageId":"116","endLine":11,"endColumn":20},{"ruleId":"113","severity":1,"message":"138","line":28,"column":25,"nodeType":"115","messageId":"116","endLine":28,"endColumn":28},{"ruleId":"113","severity":1,"message":"121","line":29,"column":16,"nodeType":"115","messageId":"116","endLine":29,"endColumn":20},{"ruleId":"113","severity":1,"message":"139","line":30,"column":12,"nodeType":"115","messageId":"116","endLine":30,"endColumn":19},{"ruleId":"113","severity":1,"message":"140","line":43,"column":11,"nodeType":"115","messageId":"116","endLine":43,"endColumn":29},{"ruleId":"113","severity":1,"message":"141","line":45,"column":11,"nodeType":"115","messageId":"116","endLine":45,"endColumn":21},{"ruleId":"113","severity":1,"message":"142","line":46,"column":11,"nodeType":"115","messageId":"116","endLine":46,"endColumn":21},{"ruleId":"113","severity":1,"message":"143","line":47,"column":18,"nodeType":"115","messageId":"116","endLine":47,"endColumn":27},{"ruleId":"113","severity":1,"message":"144","line":89,"column":11,"nodeType":"115","messageId":"116","endLine":89,"endColumn":25},{"ruleId":"122","severity":1,"message":"123","line":205,"column":21,"nodeType":"124","messageId":"125","endLine":205,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":221,"column":8,"nodeType":"147","endLine":221,"endColumn":10,"suggestions":"148"},{"ruleId":"145","severity":1,"message":"149","line":241,"column":8,"nodeType":"147","endLine":241,"endColumn":22,"suggestions":"150"},{"ruleId":"113","severity":1,"message":"121","line":8,"column":16,"nodeType":"115","messageId":"116","endLine":8,"endColumn":20},{"ruleId":"113","severity":1,"message":"121","line":7,"column":16,"nodeType":"115","messageId":"116","endLine":7,"endColumn":20},{"ruleId":"113","severity":1,"message":"151","line":1,"column":8,"nodeType":"115","messageId":"116","endLine":1,"endColumn":13},{"ruleId":"113","severity":1,"message":"130","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":18},{"ruleId":"113","severity":1,"message":"133","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":17},{"ruleId":"145","severity":1,"message":"152","line":36,"column":8,"nodeType":"147","endLine":36,"endColumn":21,"suggestions":"153"},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"@typescript-eslint/no-unused-vars","'Stars' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Preload' is defined but never used.","'i18n' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'OrbitControls' is defined but never used.","'Skybox' is assigned a value but never used.","'TextureLoader' is defined but never used.","'setInstitutionItems' is assigned a value but never used.","'useFrame' is defined but never used.","'useResource' is defined but never used.","'useThree' is defined but never used.","'Vector3' is defined but never used.","'Html' is defined but never used.","'gsap' is defined but never used.","'TimelineMax' is defined but never used.","'GLTFLoader' is defined but never used.","'gui' is assigned a value but never used.","'hovered' is assigned a value but never used.","'projectDescription' is assigned a value but never used.","'normalMap1' is assigned a value but never used.","'normalMap2' is assigned a value but never used.","'materials' is assigned a value but never used.","'generateNumber' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gui'. Either include it or remove the dependency array.","ArrayExpression",["156"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["157"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'camera' and 'onNavigationEnded'. Either include them or remove the dependency array.",["158"],"no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [gui]",{"range":"165","text":"166"},"Update the dependencies array to be: [dispatch, projectItems]",{"range":"167","text":"168"},"Update the dependencies array to be: [camera, currentItem, onNavigationEnded]",{"range":"169","text":"170"},[10407,10409],"[gui]",[11020,11034],"[dispatch, projectItems]",[1564,1577],"[camera, currentItem, onNavigationEnded]"]
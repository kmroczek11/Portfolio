[{"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx":"1","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts":"2","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\App.tsx":"3","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Navbar.tsx":"4","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Home.tsx":"5","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\functions.tsx":"6","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Scene.tsx":"7","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Education.tsx":"8","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Projects.tsx":"9","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx":"10","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx":"11","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Contact.tsx":"12","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\i18n.ts":"13"},{"size":1173,"mtime":1615244637424,"results":"14","hashOfConfig":"15"},{"size":440,"mtime":1614182950498,"results":"16","hashOfConfig":"15"},{"size":1723,"mtime":1615150806608,"results":"17","hashOfConfig":"15"},{"size":1577,"mtime":1615245615466,"results":"18","hashOfConfig":"15"},{"size":3677,"mtime":1615245688035,"results":"19","hashOfConfig":"15"},{"size":1065,"mtime":1614370367902,"results":"20","hashOfConfig":"15"},{"size":2676,"mtime":1615309726457,"results":"21","hashOfConfig":"15"},{"size":2248,"mtime":1615309670879,"results":"22","hashOfConfig":"15"},{"size":7409,"mtime":1615246975466,"results":"23","hashOfConfig":"15"},{"size":1015,"mtime":1614808489559,"results":"24","hashOfConfig":"15"},{"size":1066,"mtime":1614808516602,"results":"25","hashOfConfig":"15"},{"size":3237,"mtime":1615247467042,"results":"26","hashOfConfig":"15"},{"size":837,"mtime":1615245228365,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"g7aof9",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\index.tsx",[],["59","60"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\reportWebVitals.ts",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\App.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Navbar.tsx",["61"],"import React, { useContext, useState } from 'react';\r\nimport './styles/navbar.css';\r\nimport { NavbarItem } from './App';\r\nimport { AppContext } from './context';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface NavProps {\r\n    items: Array<NavbarItem>\r\n}\r\n\r\ninterface LanguageItem {\r\n    name: string,\r\n    src: string,\r\n}\r\n\r\nconst Navbar = ({ items }: NavProps): JSX.Element => {\r\n    console.log('navbar rendered');\r\n    const { state } = useContext(AppContext);\r\n    const [languages] = useState<Array<LanguageItem>>([\r\n        { name: 'pl', src: 'images/flags/poland.png' },\r\n        { name: 'en', src: 'images/flags/england.png' }\r\n    ]);\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const onClick = (language: string) => i18n.changeLanguage(language);\r\n\r\n    return !state.scene.fullScreen ? (\r\n        <div className='navbar-container'>\r\n            <Link className='full-name' to={'/'}>KAMIL MROCZEK</ Link>\r\n            <ul>\r\n                {\r\n                    items.map((item: NavbarItem, index: number) =>\r\n                        <li key={index}>\r\n                            <Link to={item.link}>{t(`navItems.${index}`)}</Link>\r\n                        </li>\r\n                    )\r\n                }\r\n                {\r\n                    languages.map((language: LanguageItem, index: number) =>\r\n                        <img key={index} src={language.src} onClick={() => onClick(language.name)} />)\r\n                }\r\n            </ul>\r\n        </div>\r\n    ) : null;\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Home.tsx",["62"],"import React, { useRef } from 'react';\r\nimport { useFrame, useLoader } from 'react-three-fiber'\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { Vector3 } from 'three/src/math/Vector3';\r\nimport { moveObject, rotateAroundPoint } from './functions';\r\nimport { Text } from '@react-three/drei';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst Texts = (): JSX.Element => {\r\n    const texts = useRef([]);\r\n    const { t, i18n } = useTranslation();\r\n\r\n    useFrame(() => {\r\n        [0, 1].forEach((e) => {\r\n            var targetVector: Vector3;\r\n            e === 0 ? targetVector = new Vector3(-2, 0, 0.5) : targetVector = new Vector3(2, -1, 0.5);\r\n            texts.current[e] && moveObject(texts.current[e], texts.current[e].position, targetVector, 0.01);\r\n        })\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Text\r\n                ref={el => texts.current[0] = el}\r\n                color='#fff'\r\n                font='fonts/Oswald.ttf'\r\n                fontSize={1}\r\n                textAlign='center'\r\n            >\r\n                {t('homeDesc.0')}\r\n            </Text>\r\n            <Text\r\n                ref={el => texts.current[1] = el}\r\n                color='#ff0000'\r\n                font='fonts/Oswald.ttf'\r\n                fontSize={1}\r\n                textAlign='center'\r\n            >\r\n                {t('homeDesc.1')}\r\n            </Text>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Circle = (): JSX.Element => {\r\n    const circle = useRef(null);\r\n    const blackStone = useLoader(TextureLoader, 'images/textures/black_stone.jpg');\r\n\r\n    return (\r\n        <mesh\r\n            ref={circle}\r\n            position={[0, 0, -0.5]}\r\n            receiveShadow\r\n        >\r\n            <circleGeometry args={[3.5, 100]} />\r\n            <meshPhongMaterial map={blackStone} />\r\n        </mesh>\r\n    )\r\n}\r\n\r\nconst Objects = (): JSX.Element => {\r\n    const monitor = useLoader(OBJLoader, 'models/monitor.obj');\r\n    const phone = useLoader(OBJLoader, 'models/phone.obj');\r\n    const tablet = useLoader(OBJLoader, 'models/tablet.obj');\r\n\r\n    useFrame(() => {\r\n        rotateAroundPoint(monitor, new Vector3(0, 0, 0), new Vector3(0, 1, 0), 1 * Math.PI / 180, true)\r\n        rotateAroundPoint(phone, new Vector3(0, 0, 0), new Vector3(0, 1, 0), 1 * Math.PI / 180, true)\r\n        rotateAroundPoint(tablet, new Vector3(0, 0, 0), new Vector3(0, 1, 0), 1 * Math.PI / 180, true)\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <mesh position={[-4, 1, 0]}>\r\n                <primitive object={monitor} />\r\n            </mesh>\r\n            <mesh position={[-4, -0.5, 0]}>\r\n                <primitive object={phone} />\r\n            </mesh>\r\n            <mesh position={[4, 1, 0]}>\r\n                <primitive object={tablet} />\r\n            </mesh>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Photo = (): JSX.Element => {\r\n    const photoTexture = useLoader(TextureLoader, 'images/photo.png');\r\n    const photo = useRef(null);\r\n\r\n    useFrame(() => {\r\n        photo.current && moveObject(photo.current, photo.current.position, new Vector3(0, 0, 0), 0.01);\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <mesh\r\n                ref={photo}\r\n            // position={[0, 0, -1]}\r\n            >\r\n                <planeGeometry args={[8, 8]} />\r\n                <meshStandardMaterial transparent map={photoTexture} />\r\n            </mesh>\r\n            <Objects />\r\n        </>\r\n    )\r\n}\r\n\r\nconst Home = React.memo(() => {\r\n    console.log('home rendered');\r\n\r\n    return (\r\n        <>\r\n            <Photo />\r\n            <Circle />\r\n            <Texts />\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Home;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\functions.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Scene.tsx",["63","64"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Education.tsx",["65","66"],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Projects.tsx",["67","68","69"],"import React, { useContext, useRef, useState, useEffect } from 'react';\r\nimport { useFrame, useLoader, useThree } from 'react-three-fiber'\r\nimport { AppContext } from './context';\r\nimport { moveObject } from './functions';\r\nimport { Vector3 } from 'three/src/math/Vector3';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\nimport { Text } from '@react-three/drei';\r\nimport { Types } from './context/reducers';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        appHistory: any;\r\n    }\r\n}\r\n\r\ninterface ProjectItem {\r\n    id: string,\r\n    name?: string,\r\n    videoSrc: string,\r\n    imageSrc: string,\r\n    desc?: string,\r\n    medium: string,\r\n    x: number,\r\n    y: number,\r\n    active: boolean,\r\n}\r\n\r\nconst Project = ({ id, name, videoSrc, imageSrc, desc, medium, x, y, active }: ProjectItem): JSX.Element => {\r\n    const [hovered, setHovered] = useState<boolean>(false);\r\n    const [video] = useState(() => {\r\n        const vid = document.createElement('video');\r\n        vid.src = videoSrc;\r\n        vid.onerror = () => console.log(`${name} error ${vid.error.code}; details: ${vid.error.message}`);\r\n        vid.crossOrigin = 'Anonymous';\r\n        vid.loop = true;\r\n        vid.controls = true;\r\n        vid.load();\r\n        return vid;\r\n    });\r\n    const project = useRef(null);\r\n    const description = useRef(null);\r\n    const image = useLoader(TextureLoader, imageSrc);\r\n    const blackStone = useLoader(TextureLoader, 'images/textures/black_stone.jpg');\r\n    const { viewport } = useThree();\r\n    // console.log(viewport.width, viewport.height);\r\n\r\n    useEffect(() => {\r\n        document.body.style.cursor = hovered ? 'pointer' : 'auto'\r\n    }, [hovered])\r\n\r\n    useEffect(() => {\r\n        video && active ? video.play() : video.pause();\r\n    }, [video, active])\r\n\r\n    useFrame(() => {\r\n        if (active) {\r\n            var maxWidth: number;\r\n            var maxHeight: number;\r\n            if (medium === 'desktop') {\r\n                maxWidth = viewport.width / 5;\r\n                maxHeight = viewport.height / 5;\r\n            }\r\n            else {\r\n                maxWidth = viewport.width / 15;\r\n                maxHeight = viewport.height / 5;\r\n            }\r\n            if (project.current.scale.x < maxWidth) project.current.scale.x += 0.1;\r\n            if (project.current.scale.y < maxHeight) project.current.scale.y += 0.1;\r\n            project && moveObject(project.current, project.current.position, new Vector3(10, 0, -11.5), 0.1);\r\n        }\r\n        if (!active) {\r\n            if (project.current.scale.x > 1) project.current.scale.x -= 0.1;\r\n            if (project.current.scale.y > 1) project.current.scale.y -= 0.1;\r\n            project && moveObject(project.current, project.current.position, new Vector3(x, y, -13), 0.1);\r\n        }\r\n    })\r\n\r\n    const onClick = () => {\r\n        window.appHistory.push(`/projects/${id}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <mesh\r\n                ref={project}\r\n                position={[x, y - 0.1, -13.1]}\r\n                onClick={() => onClick()}\r\n                onPointerOver={() => setHovered(true)}\r\n                onPointerOut={() => setHovered(false)}\r\n            >\r\n                <planeBufferGeometry args={[1.5, 1.5]} />\r\n                <meshBasicMaterial>\r\n                    <videoTexture attach='map' args={[video]} />\r\n                </meshBasicMaterial>\r\n            </mesh>\r\n            <group\r\n                ref={description}\r\n                position={[x, y, -13]}\r\n            >\r\n                <mesh >\r\n                    <planeBufferGeometry args={[1.5, 1.5]} />\r\n                    <meshBasicMaterial map={blackStone} />\r\n                </mesh>\r\n                <group>\r\n                    <Text\r\n                        color='#ff0000'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.1}\r\n                        maxWidth={0.5}\r\n                        textAlign='center'\r\n                        anchorY={-0.6}\r\n                    >\r\n                        {name}\r\n                    </Text>\r\n                    <Text\r\n                        color='#fff'\r\n                        font='fonts/Oswald.ttf'\r\n                        fontSize={0.08}\r\n                        maxWidth={1}\r\n                        textAlign='center'\r\n                        anchorY={-0.1}\r\n                        lineHeight={2}\r\n                    >\r\n                        {desc}\r\n                    </Text>\r\n                </group>\r\n                <mesh position-y={-0.95}>\r\n                    <planeBufferGeometry args={[1.5, 0.4]} />\r\n                    <meshStandardMaterial map={image} transparent />\r\n                </mesh>\r\n            </group>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Projects = React.memo(() => {\r\n    console.log('projects rendered');\r\n    const { dispatch } = useContext(AppContext);\r\n    const [projectItems, setProjectItems] = useState<Array<ProjectItem>>([\r\n        { id: 'gfe', videoSrc: 'videos/gfe.mp4', imageSrc: 'images/descriptions/gfe.svg', medium: 'desktop', x: 7, y: 1, active: false },\r\n        { id: 'stalcraft', videoSrc: 'videos/stalcraft.mp4', imageSrc: 'images/descriptions/stalcraft.svg', medium: 'desktop', x: 9, y: 1, active: false },\r\n        { id: 'shop', videoSrc: 'videos/shop.mp4', imageSrc: 'images/descriptions/shop.svg', medium: 'desktop', x: 11, y: 1, active: false },\r\n        { id: 'coronastats', videoSrc: 'videos/coronastats.mp4', imageSrc: 'images/descriptions/coronastats.svg', medium: 'phone', x: 13, y: 1, active: false },\r\n        { id: 'marbles', videoSrc: 'videos/marbles.mp4', imageSrc: 'images/descriptions/marbles.svg', medium: 'desktop', x: 7, y: -1, active: false },\r\n        { id: 'mp3player', videoSrc: 'videos/mp3player.mp4', imageSrc: 'images/descriptions/mp3player.svg', medium: 'desktop', x: 9, y: -1, active: false },\r\n        { id: 'tasky', videoSrc: 'videos/tasky.mp4', imageSrc: 'images/descriptions/tasky.svg', medium: 'phone', x: 11, y: -1, active: false },\r\n        { id: 'portfolio', videoSrc: '', imageSrc: 'images/descriptions/portfolio.svg', medium: 'desktop', x: 13, y: -1, active: false },\r\n    ]);\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const unlisten = window.appHistory.listen((location: any) => {\r\n        setProjectItems(prevProjectItems =>\r\n            prevProjectItems.map(\r\n                (e: ProjectItem) =>\r\n                    e.id === location.pathname.split('/')[2] ?\r\n                        { ...e, active: true } : { ...e, active: false }\r\n            ))\r\n    })\r\n\r\n    useEffect(() => {\r\n        projectItems.some((e: ProjectItem) => e.active) ?\r\n            dispatch({\r\n                type: Types.SetFullScreen,\r\n                payload: true,\r\n            }) :\r\n            dispatch({\r\n                type: Types.SetFullScreen,\r\n                payload: false,\r\n            })\r\n    }, [projectItems])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                projectItems.map(\r\n                    (e: ProjectItem, i: number) =>\r\n                        <Project\r\n                            key={i}\r\n                            {...e}\r\n                            name={t(`projectTitles.${i}`)}\r\n                            desc={t(`projectDesc.${i}`)}\r\n                        />\r\n                )\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Projects;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\index.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\context\\reducers.tsx",[],"C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\Contact.tsx",["70"],"import React from 'react';\r\nimport './styles/contact.css';\r\nimport { Html } from '@react-three/drei';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst ContactForm = (): JSX.Element => {\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <Html position={[10, 0, 0]} center>\r\n            <Formik\r\n                initialValues={{ name: '', email: '', phone: '', link: '', message: '' }}\r\n                validate={values => {\r\n                    const errors = { name: '', email: '', phone: '', link: '', message: '' };\r\n                    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) errors.email = t('contact.6');\r\n                    if (!values.name) errors.name = t('contact.7');\r\n                    if (!values.email) errors.email = t('contact.7');\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setTimeout(() => {\r\n                        alert(JSON.stringify(values, null, 2));\r\n                        setSubmitting(false);\r\n                    }, 400);\r\n                }}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form className='contact-form'>\r\n                        <div className='name'>\r\n                            <span className='material-icons'>person</span>\r\n                            <Field type='text' name='name' placeholder={t('contact.0')} />\r\n                            <ErrorMessage className='error' name='name' component='span' />\r\n                        </div>\r\n                        <div className='email'>\r\n                            <span className='material-icons'>email</span>\r\n                            <Field type='email' name='email' placeholder={t('contact.1')} />\r\n                            <ErrorMessage className='error' name='email' component='span' />\r\n                        </div>\r\n                        <div className='phone'>\r\n                            <span className='material-icons'>phone</span>\r\n                            <Field type='tel' name='phone' placeholder={t('contact.2')} />\r\n                            <ErrorMessage className='error' name='phone' component='span' />\r\n                        </div>\r\n                        <div className='link'>\r\n                            <span className='material-icons'>link</span>\r\n                            <Field type='url' name='link' placeholder={t('contact.3')} />\r\n                        </div>\r\n                        <div className='message'>\r\n                            <span className='material-icons'>message</span>\r\n                            <Field type='text' name='message' placeholder={t('contact.4')} as='textarea' />\r\n                        </div>\r\n                        <div className='break' />\r\n                        <button type='submit' disabled={isSubmitting}>{t('contact.5')}</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Html>\r\n    )\r\n}\r\n\r\nconst Contact = (): JSX.Element => {\r\n    console.log('contact rendered');\r\n\r\n    return (\r\n        <ContactForm />\r\n    )\r\n}\r\n\r\nexport default Contact;","C:\\Users\\Kamil\\Desktop\\Portfolio\\portfolio\\src\\i18n.ts",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":41,"column":25,"nodeType":"77","endLine":41,"endColumn":102},{"ruleId":"78","severity":1,"message":"79","line":12,"column":16,"nodeType":"80","messageId":"81","endLine":12,"endColumn":20},{"ruleId":"78","severity":1,"message":"79","line":19,"column":16,"nodeType":"80","messageId":"81","endLine":19,"endColumn":20},{"ruleId":"78","severity":1,"message":"82","line":39,"column":11,"nodeType":"80","messageId":"81","endLine":39,"endColumn":19},{"ruleId":"78","severity":1,"message":"83","line":55,"column":30,"nodeType":"80","messageId":"81","endLine":55,"endColumn":49},{"ruleId":"78","severity":1,"message":"79","line":62,"column":16,"nodeType":"80","messageId":"81","endLine":62,"endColumn":20},{"ruleId":"78","severity":1,"message":"79","line":150,"column":16,"nodeType":"80","messageId":"81","endLine":150,"endColumn":20},{"ruleId":"78","severity":1,"message":"82","line":152,"column":11,"nodeType":"80","messageId":"81","endLine":152,"endColumn":19},{"ruleId":"84","severity":1,"message":"85","line":171,"column":8,"nodeType":"86","endLine":171,"endColumn":22,"suggestions":"87"},{"ruleId":"78","severity":1,"message":"79","line":8,"column":16,"nodeType":"80","messageId":"81","endLine":8,"endColumn":20},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'i18n' is assigned a value but never used.","Identifier","unusedVar","'unlisten' is assigned a value but never used.","'setInstitutionItems' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["90"],"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [dispatch, projectItems]",{"range":"93","text":"94"},[6925,6939],"[dispatch, projectItems]"]